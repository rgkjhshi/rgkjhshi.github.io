<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆水行舟</title>
    <description>Michael King&#39;s Blog</description>
    <link>http://loveshisong.cn/</link>
    <atom:link href="http://loveshisong.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Jun 2016 11:52:15 +0800</pubDate>
    <lastBuildDate>Fri, 24 Jun 2016 11:52:15 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Java线程状态</title>
        <description>&lt;p&gt;java线程状态详解&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;进程三态模型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java线程状态&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;线程状态解释&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;状态转换图&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;进程三态模型&lt;/h2&gt;

&lt;p&gt;操作系统中有比较经典的进程三态模型, 各状态之间的转换关系如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/system_thread.png&quot; alt=&quot;进程三态模型&quot; title=&quot;进程三态模型&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;java&quot;&gt;Java线程状态&lt;/h2&gt;

&lt;p&gt;类&lt;code class=&quot;highlighter-rouge&quot;&gt;java.long.Thread&lt;/code&gt;中有个内部的枚举类&lt;code class=&quot;highlighter-rouge&quot;&gt;State&lt;/code&gt;用来表示线程的状态, 它的定义如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 刚创建, 还没启动&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RUNNABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 可运行状态&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BLOCKED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 阻塞态, 或被挂起&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WAITING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 等待锁的状态&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMED_WAITING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 等待时间的状态, 如sleep就在等待时间&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TERMINATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 终止态&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;线程状态解释&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NEW&lt;/code&gt;: 线程还没被&lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt;启动. 调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt;状态也不一定会立即改变, 中间还有一些步骤.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;NEW&lt;/code&gt;状态的线程&lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt;结束后会进入&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态. 正在运行的线程一定处于&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.currentThread().getState()&lt;/code&gt;只会得到&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;. 处于&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态的线程并不一定在&lt;code class=&quot;highlighter-rouge&quot;&gt;运行&lt;/code&gt;. 比如当线程发生了&lt;code class=&quot;highlighter-rouge&quot;&gt;yield()&lt;/code&gt;操作时, 该线程仍然是&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态, 要是对应到操作系统中的三态模型就该算是&lt;code class=&quot;highlighter-rouge&quot;&gt;就绪&lt;/code&gt;了; 再比如, 在BIO中, 线程正在网络等待时, 现成的状态仍然时&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;, 而在底层实际上已经被阻塞了.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;: 阻塞态, 原因通常是在等待某个&lt;code class=&quot;highlighter-rouge&quot;&gt;锁&lt;/code&gt;, 当某个&lt;code class=&quot;highlighter-rouge&quot;&gt;synchronized&lt;/code&gt;正好有线程正在使用, 另一个线程尝试进入该&lt;code class=&quot;highlighter-rouge&quot;&gt;临界区&lt;/code&gt;的时候就会被阻塞. 得到锁(比如另一个线程走完了临界区或发生了相应锁对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;操作)之后状态会由&lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;恢复到&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;: 这种状态通常是调用某个&lt;code class=&quot;highlighter-rouge&quot;&gt;锁对象&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;方法的结果, 类似的有&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.join()&lt;/code&gt;. 跟&lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;不同, &lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;是表示不能进入临界区, 所以在等待; &lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;是已经进入了临界区, 或者可理解为已经在运行了, 然后发现缺少某些资源(锁对象), 放弃运行权, 等待资源准备好. 对某个锁对象&lt;code class=&quot;highlighter-rouge&quot;&gt;notify()&lt;/code&gt;时, 将从等待池中唤醒一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;状态的线程恢复到&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TIMED_WAITING&lt;/code&gt;: 跟&lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;不一样的地方是, &lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;等待锁对象,它等待的是时间, 比如使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.sleep()&lt;/code&gt;相当于把时间资源作为所对象. 时间到达时触发线程回到工作状态.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TERMINATED&lt;/code&gt;: 线程结束了,&lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt;方法跑完了. 这是Java的一种状态,在操作系统内部可能线程已经注销了.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;状态转换图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/java_thread.png&quot; alt=&quot;进程三态模型&quot; title=&quot;进程三态模型&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-20-Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-20-Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>MySQL常用命令</title>
        <description>&lt;p&gt;mysql相关的常用命令&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mysqldump&quot;&gt;mysqldump导出数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;索引操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;删除索引&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;创建索引&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;字段操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;删除字段&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;添加字段&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;修改字段&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;修改注释&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;修改字段注释&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot;&gt;修改表注释&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mysqldump&quot;&gt;mysqldump导出数据&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqldump -h hostname -P port -u username -pPassword --no-create-info --skip-lock-tables --tables dbname tablename &amp;gt; backup.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;索引操作&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;删除索引&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;-- 直接使用drop语句
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- drop语句作为alter语句的一部分使用
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;创建索引&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;-- 创建普通索引
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 创建唯一索引
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- 普通索引
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- 唯一索引
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- 跟上面一样, 另一种写法
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;-- 主键索引
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;字段操作&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;删除字段&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;添加字段&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 只是举个例子，根据需要修改
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 在表最后添加
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 在具体某个字段后添加
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;修改字段&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 可修改字段名称, 类型, 默认值, 注释, 以及顺序
-- change 用于改名字
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
-- modify 不能改名字
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-7&quot;&gt;修改注释&lt;/h2&gt;

&lt;h3 id=&quot;section-8&quot;&gt;修改字段注释&lt;/h3&gt;

&lt;p&gt;跟修改字段一样, 把注释换成新注释就好&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;修改表注释&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-06-16-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-06-16-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
        
        <category>MySQL</category>
        
        
        <category>点滴积累</category>
        
      </item>
    
      <item>
        <title>AOP中获取方法上的注解信息</title>
        <description>&lt;p&gt;获取注解在某个方法上的注解信息&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;应用场景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;注解定义&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;切点的定义&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;获取参数的流程解释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;应用场景&lt;/h2&gt;

&lt;p&gt;通过AOP的方式, 方便的把所有方法的请求参数和返回结果都打印出来. 定义一个注解然后写切面拦截这个注解. 注解用于标记什么地方需要打日志(请求参数和返回结果).&lt;br /&gt;
注解可以标记在类上, 表示该类的所有方法都需要把参数和返回值打印出来, 这样就不需要给每个方法都加注解了;&lt;br /&gt;
注解也可以标记在某个具体的方法上, 表示只有这个方法要打印日志, 其他方法都不需要;&lt;br /&gt;
当某类上有注解, 但这个类的某个方法不应该打日志时, 可以在这个方法上加个注解, 并给注解中的属性赋值, 表示不需要打日志.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;注解定义&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 是否需要打印参数, 注解在方法上时该属性起作用, 注解在类上, 则忽略其值, 按照true来处理&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加了注解的类中的方法会被AOP拦截打出日志, 不需要打印日志的方法可以通过指定&lt;code class=&quot;highlighter-rouge&quot;&gt;@LogAnnotation(false)&lt;/code&gt; 来实现.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;切点的定义&lt;/h2&gt;

&lt;p&gt;先写个不能达到目的的错误的例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@annotation(com.test.LogAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaringType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 获取切点处的方法签名&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// 获取切点的传入参数&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}的请求参数为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}返回结果为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这个例子不对, 因为&lt;code class=&quot;highlighter-rouge&quot;&gt;joinPoint.getSignature().getDeclaringType()&lt;/code&gt;得到的是这个类的类型, 而不是这个方法(切点)的类型, 所以没法得到加在方法上的注解信息&lt;/p&gt;

&lt;p&gt;或许可以这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//得到目标对象&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//得到方法名&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//得到方法参数&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过反射拿到这个方法, 然后拿到方法上的注解&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是有更好的方法, 因为可以传递参数给通知方法.&lt;br /&gt;
下面的代码就是可以达到目的的切面的写法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 若注解仅在类上(方法上没有), 则可通过@within拦截到, 此时通过方法没有拦截到, logParameter为null
     * 若注解在方法上, 则可以通过@annotation拦截到, 此时logParameter为方法上加的注解
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@within(logAnnotation) || @annotation(logAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logAnnotation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logPointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logPointcut(logAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 方法上有注解并且指定不输出, 则不打印&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 获取切点处的方法签名&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// 获取切点的传入参数&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;void&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// toShotString, 有参数形如 Hello.hello(..); 无参数形如: Hello.hello()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;requestString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}的请求参数为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;void&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// toString, 形如 void com.test.Hello.test(); String com.test.Hello.hello(String)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;void&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;returnString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}返回结果为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;获取参数的流程解释&lt;/h2&gt;

&lt;p&gt;示例通知方法的写法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;args(param) &amp;amp;&amp;amp; target(bean) &amp;amp;&amp;amp; @annotation(logAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jp, param, bean, logAnnotation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersonService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;图片解释:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/joinPoint.png&quot; alt=&quot;获取通知参数流程&quot; title=&quot;获取通知参数流程&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-01-AOP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-01-AOP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>各种还款方式详解</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;等额本金&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;等额本息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;信用卡分期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;等额本金&lt;/h2&gt;

&lt;p&gt;等额本金的特点是每个月还款总金额(本金+利息)是不一样的, 还款总额的本金部分是固定的, 由于已经还了一部分本金, 相当于借银行的钱变少了, 因此利息部分是逐渐减少的。所以每个月的还款总金额也是逐渐减少的, 第一个月最多, 最后一个月最少。&lt;/p&gt;

&lt;p&gt;等额本金还款方式的公式可以这么来推算:&lt;br /&gt;
设贷款金额为&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, 年利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;, 还款总月数为&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, 第&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;个月剩余贷款本金为&lt;code class=&quot;highlighter-rouge&quot;&gt;an&lt;/code&gt;, 则每个月还款本金为&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;, 详情见下表:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;第n个月&lt;/th&gt;
      &lt;th&gt;已还本金&lt;/th&gt;
      &lt;th&gt;剩余贷款本金(an)&lt;/th&gt;
      &lt;th&gt;当月应还本金&lt;/th&gt;
      &lt;th&gt;当月应还利息&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a1*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a2*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m)*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2*a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a3&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m*2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a3*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m*2)*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(n-1)*a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;an&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m*(n-1)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;an*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m*(n-1))*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(m-1)*a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;am&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m*(m-1)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;am*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m*(m-1))*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;总利息&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a1+a2+..+am)*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(ma-a/m*(m(m-1)/2))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(m+1)*a*i/2 &lt;/code&gt;, 等同于:总利息=&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;贷款总额*m-月供本金*[m*(m-1)/2]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*贷款利率&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;等额本息&lt;/h2&gt;

&lt;p&gt;等额本息的特点是每个月还款总金额一样, 每个月还一样多的钱, 其中的本金比例越来越大, 利息比例越来越小&lt;/p&gt;

&lt;p&gt;设贷款金额为&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, 还款总月数为&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, 每月还款额为&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;(包括本息), 还款总利息为&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;, 推导方法如下:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每月还款&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;共还&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;个月结束, 扣掉贷款本金&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 则总利息&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;应有:&lt;code class=&quot;highlighter-rouge&quot;&gt;Y=m*b-a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;每个月还款的利息累加得到的利息总和&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;应该与上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;相等, 每个月利息如下:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;第一个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第二个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-(b-a*i))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a+a*i-b)*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;第三个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-(b-a*i)-(b-(b+(a*i－b)*(1＋i))))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a+a*i-b + (a*i-b)*(1+i))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)^2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第四个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)^3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)^(m-1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;个月的利息总和:&lt;code class=&quot;highlighter-rouge&quot;&gt;Y = m*b + (a*i－b)*((1＋i)^m-1)/i)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;两种方式计算出来的总利息应该一样,即有等式:&lt;code class=&quot;highlighter-rouge&quot;&gt;m*b-a = m*b + (a*i－b)*((1＋i)^m-1)/i)&lt;/code&gt;, 化简为:&lt;code class=&quot;highlighter-rouge&quot;&gt;1-a = (a*i－b)*(1＋i)^m&lt;/code&gt;求得:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;月均还款:&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;＝&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i*(1＋i)^m/((1+i)^m－1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;总利息:&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;＝ &lt;code class=&quot;highlighter-rouge&quot;&gt;m*a*i*(1＋i)^m/((1＋i)^m－1)－a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;信用卡分期&lt;/h2&gt;

&lt;p&gt;最具欺骗性的就是信用卡分期了. 信用卡分期是直接按照借款总额和利率一次性计算出利息, 平均到每个月还款. 但实际上占用的银行本金随着每个月的还款已经逐渐变少了, 所以还一开始计算出的利息对于借款人来说并不划算.&lt;/p&gt;

&lt;p&gt;举个例子, 比如信用卡月利率是&lt;code class=&quot;highlighter-rouge&quot;&gt;0.6%&lt;/code&gt;, 即年利率&lt;code class=&quot;highlighter-rouge&quot;&gt;7.2%&lt;/code&gt;, 借了10w, 分12个月还, 则每个月还款为: &lt;code class=&quot;highlighter-rouge&quot;&gt;10000*(1+0.072)/12=8933.33&lt;/code&gt;,
其中利息有&lt;code class=&quot;highlighter-rouge&quot;&gt;10000*0.6%=600&lt;/code&gt;, 本金有&lt;code class=&quot;highlighter-rouge&quot;&gt;10000/12=8333.33&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;实际年利率应该这么计算, 第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;用了一个月, 第二个&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;用了2个月, … , 第十二个&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;用了12个月, 相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;总共借用了78个月, 实际月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;100000*7.2%/78/8333.33=1.1%&lt;/code&gt;, 实际年利率大约为:&lt;code class=&quot;highlighter-rouge&quot;&gt;13.29%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;设信用卡分期总金额为&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, 分期期数为&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, 则:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;还款总利息&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i*n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;每月还款额(包括本息)&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a/n+a*i&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;实际月利率&lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i*n/(n*(n+1)/2)/(a/n)&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;2*n*i/(n+1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;实际年利率&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;12*r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 25 May 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E6%B1%82%E7%9F%A5%E6%84%9F%E6%82%9F/2016-05-25-%E5%90%84%E7%A7%8D%E8%BF%98%E6%AC%BE%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E6%B1%82%E7%9F%A5%E6%84%9F%E6%82%9F/2016-05-25-%E5%90%84%E7%A7%8D%E8%BF%98%E6%AC%BE%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3.html</guid>
        
        <category>理财</category>
        
        
        <category>求知感悟</category>
        
      </item>
    
      <item>
        <title>HBase Shell命令总结</title>
        <description>&lt;p&gt;HBase Shell命令总结, 便于查阅&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#namespace&quot;&gt;namespace&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;常用命令&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#namespace-1&quot;&gt;基于namespace的授权操作&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shell-&quot;&gt;shell 命令总结表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;namespace&quot;&gt;namespace&lt;/h2&gt;

&lt;p&gt;表名&lt;code class=&quot;highlighter-rouge&quot;&gt;ns:table1&lt;/code&gt;中冒号前面的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;, 它可以在逻辑上隔离数据, 也可以对不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;进行不同授权&lt;br /&gt;
HBase系统默认定义了两个缺省的namespace&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hbase&lt;/code&gt;: 系统命名空间, 用于包含hbase的内部表, 包括namespace和meta表&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;: 用户建表时未指定namespace的表都创建在此&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;常用命令&lt;/h3&gt;

&lt;p&gt;下面是对于&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;的一些操作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建: &lt;code class=&quot;highlighter-rouge&quot;&gt;create_namespace &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除: &lt;code class=&quot;highlighter-rouge&quot;&gt;drop_namespace &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;查看所有: &lt;code class=&quot;highlighter-rouge&quot;&gt;list_namespace&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;查看某个: &lt;code class=&quot;highlighter-rouge&quot;&gt;describe_namespace &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;查看namespace下的表: &lt;code class=&quot;highlighter-rouge&quot;&gt;list_namespace_tables &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在namespace下创建表: &lt;code class=&quot;highlighter-rouge&quot;&gt;create &#39;ns:testtable&#39;, &#39;fm1&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改属性: &lt;code class=&quot;highlighter-rouge&quot;&gt;alter_namespace &#39;ns&#39;, {METHOD =&amp;gt; &#39;set&#39;, &#39;PROPERTY_NAME&#39; =&amp;gt; &#39;PROPERTY_VALUE&#39;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;namespace-1&quot;&gt;基于namespace的授权操作&lt;/h3&gt;

&lt;p&gt;具备Create权限的namespace Admin可以对表创建和删除、生成和恢复快照&lt;br /&gt;
具备Admin权限的namespace Admin可以对表splits或major compactions&lt;br /&gt;
RWXCA&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;授权&lt;code class=&quot;highlighter-rouge&quot;&gt;userA&lt;/code&gt;用户对&lt;code class=&quot;highlighter-rouge&quot;&gt;test_ns&lt;/code&gt;的写权限: &lt;code class=&quot;highlighter-rouge&quot;&gt;grant &#39;userA&#39; &#39;W&#39; &#39;@test_ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;回收&lt;code class=&quot;highlighter-rouge&quot;&gt;userA&lt;/code&gt;用户对&lt;code class=&quot;highlighter-rouge&quot;&gt;test_ns&lt;/code&gt;的所有权限: &lt;code class=&quot;highlighter-rouge&quot;&gt;revoke &#39;userA&#39;&#39;@test_ns&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;hbase-site.xml&lt;/code&gt;在HBase中启用授权机制:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.security.authorization&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.coprocessor.master.classes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.apache.hadoop.hbase.security.access.AccessController&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.coprocessor.region.classes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.AccessController&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;shell-&quot;&gt;shell 命令总结表&lt;/h2&gt;

&lt;p&gt;在hbase shell中直接敲命令会给出说明，并有很多例子, 一看就知道怎么用了&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;shell 命令&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看所有表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;describe&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;描述表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;count&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;统计表中行数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;create&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;alter&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;修改列族模式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;drop&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exists&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;测试表是否存在&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;disable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;使表无效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;enable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;使表有效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;put&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;插入数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;incr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;增加表、行或列的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;get&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;scan&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看批量数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delete&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除表行列对应的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;deleteall&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除指定行的所有元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;shutdown&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;关闭HBase集群(不同于exit)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;truncate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;重新创建指定表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tools&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列出HBase支持的工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;status&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;返回HBase集群状态&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;version&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看hbase版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;推出HBase shell&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-04-12-HBase-Shell%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-04-12-HBase-Shell%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html</guid>
        
        <category>HBase</category>
        
        
        <category>点滴积累</category>
        
      </item>
    
      <item>
        <title>SpringMVC解决GET参数乱码</title>
        <description>&lt;p&gt;SpringMVC项目中通过GET方式传递的参数中有中文时, 有可能产生乱码.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;乱码的原因&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;在URL中通过GET方式传递参数, 有中文会乱码, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;文件中设置了编码过滤器, 但对于GET方式传过来的参数仍然没有作用&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;乱码的原因&lt;/h2&gt;

&lt;p&gt;HTTP请求到达Spring的Servlet程序之前, 先经过了Tomcat, 而对于GET方式的URL, Tomcat先做了一次URLDecode.  Tomcat对GET方式的URL默认是以iso-8859-1解码, 所以等请求到达我们的程序时, 就已经乱码了.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;解决办法就是让Tomcat对GET请求解码时, 按照UTF-8解码. 方法是修改Tomcat的配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;conf/server.xml&lt;/code&gt;, 将其中的&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&amp;gt;&lt;/code&gt;&lt;br /&gt;
改为:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 11 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-04-11-SpringMVC%E8%A7%A3%E5%86%B3GET%E5%8F%82%E6%95%B0%E4%B9%B1%E7%A0%81.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-04-11-SpringMVC%E8%A7%A3%E5%86%B3GET%E5%8F%82%E6%95%B0%E4%B9%B1%E7%A0%81.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>一致性哈希</title>
        <description>&lt;p&gt;一致性哈希在哈希算法基础上, 适用于动态变化的Cache环境中&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;场景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;使用一致性哈希解决上述场景&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;算法步骤&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cache&quot;&gt;新增Cache服务器的情景&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cache-1&quot;&gt;删除Cache服务器的情景&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cache-2&quot;&gt;虚拟Cache服务器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;场景&lt;/h2&gt;

&lt;p&gt;如果我们有4台Cache服务器来存放一些对象, 可以用简单的办法来分配:&lt;code class=&quot;highlighter-rouge&quot;&gt;object.hashCode() % 4&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cache0: &lt;code class=&quot;highlighter-rouge&quot;&gt;object.hashCode() % 4 == 0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Cache1: &lt;code class=&quot;highlighter-rouge&quot;&gt;object.hashCode() % 4 == 1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Cache2: &lt;code class=&quot;highlighter-rouge&quot;&gt;object.hashCode() % 4 == 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Cache3: &lt;code class=&quot;highlighter-rouge&quot;&gt;object.hashCode() % 4 == 3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;动态变化体现在, 如果因为某些原因Cache服务器少了一台或者多了一台, 我们怎么处理对象与服务器的关系呢?&lt;br /&gt;
少了一台应该&lt;code class=&quot;highlighter-rouge&quot;&gt;%3&lt;/code&gt;, 多了一台应该&lt;code class=&quot;highlighter-rouge&quot;&gt;%5&lt;/code&gt;, 这样服务器上原来存放的对象与服务器的对应关系就全乱了&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;使用一致性哈希解决上述场景&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;算法步骤&lt;/h3&gt;

&lt;p&gt;一致性哈希算法采用一种新的方式来解决问题，不再仅仅依赖object.hashCode()本身，而且将Cache的配置也进行哈希运算。具体步骤如下:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先求出每个Cache的哈希值, 并将其配置到一个0~2^32的圆环区间上(为啥是32?哈希值一般不超过32位)&lt;/li&gt;
  &lt;li&gt;求出需要存储对象的哈希值, 也将其配置到这个圆环上&lt;/li&gt;
  &lt;li&gt;从对象所映射到的位置顺时针开始找, 把对象保存在第一个找到的Cache节点上&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/hash01.png&quot; alt=&quot;一致性哈希算法&quot; title=&quot;一致性哈希算法&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cache&quot;&gt;新增Cache服务器的情景&lt;/h3&gt;

&lt;p&gt;假设在这个环形哈希空间中, Cache5被映射在Cache3和Cache4之间, 那么受影响的将仅是沿Cache5逆时针遍历, 直到下一个Cache(Cache3)之间的对象. 只对这些对象进行转移即可.
Cache3~Cache5之间部分原来映射到Cache4, 现在应该映射到Cache5;&lt;br /&gt;
Cache5~Cache4之间部分原来映射到Cache4, 现在还是映射到Cache4, 不受影响;  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/hash02.png&quot; alt=&quot;新增Cache服务器的情景&quot; title=&quot;新增Cache服务器的情景&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cache-1&quot;&gt;删除Cache服务器的情景&lt;/h3&gt;

&lt;p&gt;假设在这个环形哈希空间中, Cache3被移除, 那么受影响的将仅是沿Cache3逆时针遍历直到下一个Cache(Cache2)之间的对象&lt;/p&gt;

&lt;p&gt;原来Cache2~Cache3之间部分原来映射到Cache3, 现在应该映射到Cache4;&lt;br /&gt;
原来Cache3~Cache4之间部分原来映射到Cache4, 现在还是映射到Cache4, 不受影响;  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/hash03.png&quot; alt=&quot;删除Cache服务器的情景&quot; title=&quot;删除Cache服务器的情景&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cache-2&quot;&gt;虚拟Cache服务器&lt;/h2&gt;

&lt;p&gt;考虑到哈希算法并不是保证绝对的平衡, 尤其Cache较少的话, 对象并不能被均匀的映射到Cache上. 为了解决这种情况引入了”虚拟节点”的概念.&lt;br /&gt;
虚拟节点是实际节点在环形空间的复制品, 一个实际节点对应了若干个”虚拟节点”, 这个对应个数也称为”复制个数”, “虚拟节点”在哈希空间中以哈希值排列.&lt;/p&gt;

&lt;p&gt;仍以4台Cache服务器为例,设置”复制个数”为2后, 共有8个“虚拟节点”分部在环形区域上, 会如下图一样:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/hash04.png&quot; alt=&quot;虚拟节点&quot; title=&quot;虚拟节点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;引入了”虚拟节点”后，映射关系就从&lt;code class=&quot;highlighter-rouge&quot;&gt;对象--&amp;gt;Cache服务器&lt;/code&gt;转换成了&lt;code class=&quot;highlighter-rouge&quot;&gt;对象--&amp;gt;虚拟节点--&amp;gt;Cache服务器&lt;/code&gt;. 当然虚拟节点与真正的服务器之间也有对应关系. 查询对象所在Cache服务器的映射关系整个流程如下图所示:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/hash05.png&quot; alt=&quot;映射关系&quot; title=&quot;映射关系&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Fri, 25 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-03-25-%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-03-25-%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C.html</guid>
        
        <category>一致性哈希</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Java中的弱引用</title>
        <description>&lt;p&gt;第一次接触到弱引用&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakReference&lt;/code&gt;是在&lt;code class=&quot;highlighter-rouge&quot;&gt;ThreadLocal&lt;/code&gt;中, 于是就把相关知识梳理了下&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;引用简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;强引用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;弱引用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;软引用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;虚引用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;引用队列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;引用简介&lt;/h2&gt;

&lt;p&gt;引用跟垃圾回收相关, 关于引用的类位于&lt;code class=&quot;highlighter-rouge&quot;&gt;java.long.ref&lt;/code&gt;包中, 他们的继承关系图如下(蓝色表示抽象类):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/reference.png&quot; alt=&quot;引用相关的类&quot; title=&quot;引用相关的类&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照他们阻止被回收的能力强弱可以分为:
&lt;code class=&quot;highlighter-rouge&quot;&gt;强引用 &amp;gt; 软引用(SoftReference) &amp;gt; 弱引用(WeakReference) &amp;gt; 虚引用(PhantomReference)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;强引用&lt;/h2&gt;

&lt;p&gt;就是我们平时使用的对象的引用, 比如:&lt;code class=&quot;highlighter-rouge&quot;&gt;Object o = new Object()&lt;/code&gt;, 那个&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;就是一个强引用.&lt;br /&gt;
如果一个对象通过强引用链可到达, 它是不会被回收的, 不可达时才有可能被回收.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;弱引用&lt;/h2&gt;

&lt;p&gt;先说下弱引用(&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakReference&lt;/code&gt;),  它阻止被回收的能力不太强,  由JVM决定何时回收. 可以这样创建一个弱引用对象:
&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakReference&amp;lt;Object&amp;gt; weakObject = new WeakReference&amp;lt;Object&amp;gt;(o);&lt;/code&gt;, 通过&lt;code class=&quot;highlighter-rouge&quot;&gt;weakObject.get()&lt;/code&gt;就可以得到引用的对象了.&lt;br /&gt;
因为弱引用不能阻止回收, 所以如果没有其他强引用指向这个对象时, 当使用get方法时说不准就返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;了.&lt;br /&gt;
如果一个对象是弱引用可到达, 那么这个对象会JVM的下一个回收周期销毁.&lt;br /&gt;
有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakHashMap&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt;几乎一样, 唯一的区别就是它的键(key)使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakReference&lt;/code&gt;引用, 当它里面的某个key被标记为垃圾时, 对应的这个&lt;code class=&quot;highlighter-rouge&quot;&gt;Entry&lt;/code&gt;就被自动移除了&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;软引用&lt;/h2&gt;

&lt;p&gt;软引用(&lt;code class=&quot;highlighter-rouge&quot;&gt;SoftReference&lt;/code&gt;)比弱引用稍微强一些, 当内存不足时(即将&lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemory&lt;/code&gt;)垃圾回收器才会回收这些软引用可到达的对象.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;虚引用&lt;/h2&gt;
&lt;p&gt;虚引用(PhantomReference)指向的对象十分脆弱,我们不能用get方法来得到其指向的对象(get总返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;).&lt;br /&gt;
它的唯一作用就是当其指向的对象被回收之后，自己被加入到引用队列，用作记录该引用指向的对象已被销毁。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;引用队列&lt;/h2&gt;

&lt;p&gt;各种引用的父类&lt;code class=&quot;highlighter-rouge&quot;&gt;Reference&lt;/code&gt;中有个字段&lt;code class=&quot;highlighter-rouge&quot;&gt;queue&lt;/code&gt;, 它就是引用队列&lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceQueue&lt;/code&gt;.&lt;br /&gt;
一旦弱引用对象开始返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, 该引用指向的对象就被标记成了垃圾.&lt;br /&gt;
当构造时传入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceQueue&lt;/code&gt;对象, 则当引用只想的对象被标记为垃圾时, 这个引用对象会自动地加入到引用队列里面.&lt;br /&gt;
我们可以处理传入的引用队列来主动清理一些已经不用的引用.&lt;br /&gt;
软引用和弱引用被放入引用队列时, 并不能保证此时引用对象已经被销毁了(对象可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt;方法里再生), 虚引用放入引用队列时, 可保证引用对象已经被销毁了.  &lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-03-04-java%E4%B8%AD%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-03-04-java%E4%B8%AD%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Java中的并发(二)</title>
        <description>&lt;p&gt;本文主要介绍&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable、Callable、Executor、Future&lt;/code&gt;等接口以及他们的关系&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;并发相关接口图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#runnable&quot;&gt;Runnable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#callable&quot;&gt;Callable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#executor&quot;&gt;Executor&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#executorservice&quot;&gt;ExecutorService&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#future&quot;&gt;Future&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;总结及示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;并发相关接口图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/concurrent.png&quot; alt=&quot;并发相关接口关系图&quot; title=&quot;并发相关接口关系图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-01-05-java-concurrency.html&quot;&gt;这篇文章&lt;/a&gt;中介绍了通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable、Thread&lt;/code&gt;来创建线程，下面介绍上图中其他相关的接口&lt;/p&gt;

&lt;h2 id=&quot;runnable&quot;&gt;Runnable&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Runnable&lt;/code&gt;接口表示一个可以运行的单位, 它只有一个方法:&lt;code class=&quot;highlighter-rouge&quot;&gt;void run()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Theard&lt;/code&gt;类是它的子类。&lt;br /&gt;
由于&lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt;方法返回值为&lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;类型，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;在执行完任务之后无法返回任何结果。&lt;/p&gt;

&lt;h2 id=&quot;callable&quot;&gt;Callable&lt;/h2&gt;

&lt;p&gt;Java1.5 出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent.Callable&lt;/code&gt;接口也可以表示一个可运行的单元, 它有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;V call()&lt;/code&gt;方法, 可以返回执行的结果.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;可以交给一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;直接启动一个线程, &lt;code class=&quot;highlighter-rouge&quot;&gt;Callable&lt;/code&gt;一般需要交给&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecuteService&lt;/code&gt;来执行.&lt;/p&gt;

&lt;h2 id=&quot;executor&quot;&gt;Executor&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent.Executor&lt;/code&gt;Java1.5出现的执行器, 角色类似于调度着, 跟它相关的内容包括线程池, Executor, Executors, ExecutorService, CompletionService, Future, Callable等, 它的引入大大简化了并发编程. &lt;br /&gt;
它有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;void execute(Runnable command)&lt;/code&gt;方法可以调度执行&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;executorservice&quot;&gt;ExecutorService&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutorService&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Executor&lt;/code&gt;最常用的子接口, 可以当成是&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Callable&lt;/code&gt;的调度容器,  它重载了几个&lt;code class=&quot;highlighter-rouge&quot;&gt;submit&lt;/code&gt;方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt; Future&amp;lt;T&amp;gt; submit(Callable&amp;lt;T&amp;gt; task)&lt;/code&gt;: 提交一个有返回结果的任务(&lt;code class=&quot;highlighter-rouge&quot;&gt;Callable&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt; Future&amp;lt;T&amp;gt; submit(Runnable task, T result)&lt;/code&gt;: 提交一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;, 正确执行完成的结果将会是&lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Future&amp;lt;?&amp;gt; submit(Runnable task)&lt;/code&gt;:提交一个没有返回结果的任务(&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有其他方法, 暂不细说&lt;/p&gt;

&lt;h2 id=&quot;future&quot;&gt;Future&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent.Future&lt;/code&gt;是任务执行结果的查看着, 里面有方法比较简单&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean cancel(boolean mayInterruptIfRunning)&lt;/code&gt;: 取消任务, 取消成功返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, 取消失败返回&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. 参数&lt;code class=&quot;highlighter-rouge&quot;&gt;mayInterruptIfRunning&lt;/code&gt;仅表示是否允许取消正在执行却没有执行完毕的任务, 若任务还没执行, 则会取消该任务并返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;; 若任务已经执行完成, 则相当于取消失败, 直接返回&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;; 若任务执行中, 还没执行完, 这个参数就要起作用了, 传&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;则取消该正在执行的任务, 返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;表示取消成功.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isCancelled()&lt;/code&gt;: 任务是否被取消成功, 如果任务正常完成前被取消成功, 则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isDone()&lt;/code&gt;: 任务是否已经完成, 若任务完成, 则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;V get()&lt;/code&gt;: 获取执行结果, 这个方法会产生阻塞, 会一直等到任务执行完毕才返回(这个方法比较常用)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;V get(long timeout, TimeUnit unit)&lt;/code&gt;: 获取执行结果, 如果在指定时间内, 还没获取到结果, 就直接返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;总结及示例&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Callable&lt;/code&gt;是可执行的单位(一个无返回值, 一个有返回值)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutorService&lt;/code&gt;可以提交一个可执行单位&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;是用来存放调度完成返回的结果的,可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;方法获取执行结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是一个例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 创建一个执行器&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 1.Runnable通过Future返回结果为空&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runnable running.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 2.Callable通过Future能返回结果&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;callable running.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CallableResult&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 获得任务的结果&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Runnable return:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Runnable return:null&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Callable return:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Callable return:CallableResult&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get会抛出InterruptedException, ExecutionException异常&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-03-01-java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91(%E4%BA%8C).html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-03-01-java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91(%E4%BA%8C).html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Class类简介</title>
        <description>&lt;p&gt;java反射中经常用到Class类, 本文对它以及它的方法进行简单说明&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#class&quot;&gt;Class类简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;判定方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;获取内容系列方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;获取属性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;获取方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;获取构造方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;获取注解&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;父类子类(接口)相关&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;内部类相关&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;名字相关&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot;&gt;其他方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;class&quot;&gt;Class类简介&lt;/h2&gt;
&lt;p&gt;Class类位于&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang&lt;/code&gt;包中, Class类的实例表示正在运行的Java应用程序中的类和接口.&lt;br /&gt;
枚举算类, 注解算接口; 数组算类,它映射的Class对象被有着相同元素和大小的数组共享;&lt;br /&gt;
Java的原生(primitive types)类型(&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean、byte、char、short、int、long、float、double&lt;/code&gt;)和关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;也代表Class对象.&lt;/p&gt;

&lt;p&gt;Class类实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;Serializable、GenericDeclaration、Type、AnnotatedElement&lt;/code&gt;接口&lt;/p&gt;

&lt;p&gt;Class类无public构造函数, Class类对象是由JVM在类加载的时候调用类加载器的&lt;code class=&quot;highlighter-rouge&quot;&gt;defineClass&lt;/code&gt;方法创建的.&lt;br /&gt;
如下方法能够获取类名:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;obj.getClass().getName()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Foo.class.getName()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;判定方法&lt;/h2&gt;
&lt;p&gt;这些方法可以判断某个类是否是接口、是否是枚举、是否是注解、是否有某个注解、是否是匿名类、是否是某个类的超类(是否可强制转换为该类)等&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isArray()&lt;/code&gt;: 是否是数组; &lt;code class=&quot;highlighter-rouge&quot;&gt;int[].class.isArray()&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isAnnotation()&lt;/code&gt;: 是否是注解, 若返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;,则&lt;code class=&quot;highlighter-rouge&quot;&gt;isInterface&lt;/code&gt;也为&lt;code class=&quot;highlighter-rouge&quot;&gt;ture&lt;/code&gt;; &lt;code class=&quot;highlighter-rouge&quot;&gt;Target.class.isAnnotation()&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isEnum()&lt;/code&gt;: 是否是枚举类&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isPrimitive()&lt;/code&gt;: 是否是原生类型(共9个, 包装类返回&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;void.class.isArray()&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isInterface()&lt;/code&gt;: 是否是接口&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isMemberClass()&lt;/code&gt;: 是否是成员类, 类的定义在另一个类里面的那种&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isAnonymousClass()&lt;/code&gt;: 是否是匿名类&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isLocalClass()&lt;/code&gt;: 是否是本地类&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isSynthetic()&lt;/code&gt;: 是否是复合类 (接口&lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;也有这个方法)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isInstance(Object obj)&lt;/code&gt;: obj是否是该类的一个实例&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isAssignableFrom(Class&amp;lt;?&amp;gt; cls)&lt;/code&gt;: cls是否可以被转换成该类&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean isAnnotationPresent(Class&amp;lt;? extends Annotation&amp;gt; annotationClass)&lt;/code&gt;: 该类上是否存在这个注解(继承自接口&lt;code class=&quot;highlighter-rouge&quot;&gt;AnnotatedElement&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是几个方法的实例说明:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这是传说中的成员类&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这是传说中的本地类&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Hello是其他地方定义的一个接口, 有一个sayHello()方法, 这就是匿名类(无类名)&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isMemberClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnonymousClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLocalClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;isInstance&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;isAssignableFrom&lt;/code&gt;的区别&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;运算符只被用于对象引用变量, 比如: &lt;code class=&quot;highlighter-rouge&quot;&gt;自身类或子类的实例 instanceof 自身类&lt;/code&gt; 返回true&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;isInstance(Object obj)&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;运算符的动态等价, 比如: &lt;code class=&quot;highlighter-rouge&quot;&gt;自身类.class.isInstance(自身类或子类的实例)&lt;/code&gt; 返回true&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;isAssignableFrom(Class&amp;lt;?&amp;gt; cls)&lt;/code&gt;是两个类之间的关系, 比如: &lt;code class=&quot;highlighter-rouge&quot;&gt;自身类.class.isAssignableFrom(自身类或子类.class)&lt;/code&gt; 返回true  &lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;获取内容系列方法&lt;/h2&gt;
&lt;p&gt;通过Class类可以获取这个类的一些内容性质的信息, 比如属性、方法、构造方法、注解&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;获取属性&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Field[] getFields()&lt;/code&gt;: 获取本类或父类中所有public属性&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Field getField(String name)&lt;/code&gt;: 获取本类或父类中特定名字的public属性&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Field[] getDeclaredFields()&lt;/code&gt;: 获取本类中声明的所有属性&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Field getDeclaredField(String name)&lt;/code&gt;: 获取本类中声明的特定名字的属性&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;获取方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Method[] getMethods()&lt;/code&gt;: 获取本类或父类中所有public方法(包括构造器方法)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Method getMethod(String name, Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类或父类中特定名字和参数的public方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Method[] getDeclaredMethods()&lt;/code&gt;: 获取本类中声明的所有方法(包括非public但不包括继承来的)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Method getDeclaredMethod(String name, Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类中声明的特定名字和参数的方法(最常用)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-4&quot;&gt;获取构造方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&amp;lt;?&amp;gt;[] getConstructors()&lt;/code&gt;: 获取本类中所有public构造器&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&amp;lt;T&amp;gt; getConstructor(Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类中特定参数的public构造器&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&amp;lt;?&amp;gt;[] getDeclaredConstructors()&lt;/code&gt;: 获取本类中所有构造器&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&amp;lt;T&amp;gt; getDeclaredConstructor(Class&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;: 获取本类中指定参数的构造器&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-5&quot;&gt;获取注解&lt;/h3&gt;

&lt;p&gt;这几个方法均继承自接口&lt;code class=&quot;highlighter-rouge&quot;&gt;AnnotatedElement&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation[] getAnnotations()&lt;/code&gt;: 获取这个元素上的所有注解(包括父类上被&lt;code class=&quot;highlighter-rouge&quot;&gt;@Inherited&lt;/code&gt;标记的注解)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;A extends Annotation&amp;gt; A getAnnotation(Class&amp;lt;A&amp;gt; annotationClass)&lt;/code&gt;: 获取这个元素上指定类型的注解, 没有返回null&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation[] getDeclaredAnnotations()&lt;/code&gt;: 获取直接标注在这个元素上的注解&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-6&quot;&gt;父类子类(接口)相关&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;? super T&amp;gt; getSuperclass()&lt;/code&gt;: 返回本类的父类(直接超类);&lt;code class=&quot;highlighter-rouge&quot;&gt;int[].class&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;int.class&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.class&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Type getGenericSuperclass()&lt;/code&gt;: 以Type的形式返回本类的父类, 带有范型信息(没有范型信息时把Class以Type形式返回)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt;[] getInterfaces()&lt;/code&gt;: 返回本类&lt;strong&gt;直接实现&lt;/strong&gt;的接口&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Type[] getGenericInterfaces()&lt;/code&gt;: 以Type的形式返回本类&lt;strong&gt;直接实现&lt;/strong&gt;的接口, 带有范型信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;U&amp;gt; Class&amp;lt;? extends U&amp;gt; asSubclass(Class&amp;lt;U&amp;gt; clazz) &lt;/code&gt;: 把当前类转为clazz表示的子类(或自己), 不能转抛&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;异常&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asSubclass&lt;/code&gt;的作用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList.class.asSubclass(List.class)&lt;/code&gt;得到的还是&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList.class&lt;/code&gt;, 看起来没什么作用&lt;br /&gt;
但是它的作用体现在&lt;strong&gt;窄化未知的Class类型的范围&lt;/strong&gt;, 比如通常我们用到&lt;code class=&quot;highlighter-rouge&quot;&gt;Class.forName(&quot;XXX&quot;)&lt;/code&gt;, 它的返回是&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt;比较宽泛, 我们可以窄化一下: &lt;code class=&quot;highlighter-rouge&quot;&gt;Class.forName(&quot;XXX&quot;).asSubclass(List.class).newInstance()&lt;/code&gt;. 当&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX&lt;/code&gt;不是&lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;的子类时,抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;异常&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;内部类相关&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt; getEnclosingClass()&lt;/code&gt;: 获取底层类的直接封闭类, 如上面&lt;code class=&quot;highlighter-rouge&quot;&gt;LocalClass&lt;/code&gt;的封闭类为&lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt;, 那个匿名类的封闭类也是&lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&amp;lt;?&amp;gt; getEnclosingConstructor()&lt;/code&gt;: 若该Class对象是在一个构造方法中的本地类或匿名类时, 返回这个构造器对象, 表示底层类直接封闭构造方法, 否则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;; 上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;LocalClass&lt;/code&gt;不在构造方法中,因此返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Method getEnclosingMethod()&lt;/code&gt;: 若该Class对象是在一个方法中的本地类或匿名类时, 返回这个&lt;code class=&quot;highlighter-rouge&quot;&gt;Method&lt;/code&gt;对象, 表示底层类的直接封闭方法, 否则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt; getDeclaringClass()&lt;/code&gt;: 该类是另一个类的成员(&lt;code class=&quot;highlighter-rouge&quot;&gt;isMemberClass&lt;/code&gt;),则返回该类的声明类(外部类); 接口&lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;中也有该方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt;[] getDeclaredClasses() &lt;/code&gt;: 返回该类中直接声明的所有类&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt;[] getClasses() &lt;/code&gt;: 返回该类中直接声明的所有public类&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-8&quot;&gt;名字相关&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static Class&amp;lt;?&amp;gt; forName(String className)&lt;/code&gt;: 返回与给定的字符串名称相关联的Class对象&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String getSimpleName()&lt;/code&gt;: 返回源码中定义的简单类名, 匿名类返回空串, 数组返回”组件类型[]”&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String getCanonicalName&lt;/code&gt;: 返回底层类的Java语言规范中定义的标准名称&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public String getName()&lt;/code&gt;: 返回此Class对象所表示的实体(类，接口，数组类，基本类型或void)的名字, 略复杂,规则如下:
    &lt;ul&gt;
      &lt;li&gt;若是原始类型(class), 则返回Java语言规范中定义的标准名称&lt;/li&gt;
      &lt;li&gt;若是原生类型(primitive)或void, 直接返回关键字对应的字符串&lt;/li&gt;
      &lt;li&gt;若是数组, 则用”[“代表数组维度,后面跟上元素类型代码,具体如下表:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;元素类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;类型代码&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;byte&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;char&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;double&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;D&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;float&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;I&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;long&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;J&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;short&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;class or interface&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lclassname;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;来个例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// String&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCanonicalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// java.lang.String&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// java.lang.String&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// int&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCanonicalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// int&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// int&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// String[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCanonicalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// java.lang.String[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// [Ljava.lang.String;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// int[][]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCanonicalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// int[][]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// [[I&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;其他方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeVariable&amp;lt;Class&amp;lt;T&amp;gt;&amp;gt;[] getTypeParameters()&lt;/code&gt;: 继承自接口&lt;code class=&quot;highlighter-rouge&quot;&gt;GenericDeclaration&lt;/code&gt;,按照声明顺序返回声明的类型变量&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt; getComponentType()&lt;/code&gt;: 若该类是个数组，则返回组件的类型&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还有一些方法暂不介绍了.&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-02-25-Class%E7%B1%BB%E7%AE%80%E4%BB%8B.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-02-25-Class%E7%B1%BB%E7%AE%80%E4%BB%8B.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
  </channel>
</rss>
