<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆水行舟</title>
    <description>Michael King&#39;s Blog</description>
    <link>http://loveshisong.cn/</link>
    <atom:link href="http://loveshisong.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 02 Aug 2016 22:36:07 +0800</pubDate>
    <lastBuildDate>Tue, 02 Aug 2016 22:36:07 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Docker学习笔记(三):网络和数据卷</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;网络&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;列出网络&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;查看网络信息&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;断开网络&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;创建网络&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;使用自定义网络创建容器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;数据卷&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;添加数据卷&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;挂载本地目录&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot;&gt;挂载文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot;&gt;挂载容器中的数据卷&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot;&gt;查看删除数据卷&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#volume&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;的其他用法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;网络&lt;/h2&gt;

&lt;p&gt;之前有个web程序的例子已经介绍过了端口, 这里说下网络&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;列出网络&lt;/h3&gt;

&lt;p&gt;每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;引擎默认都会包含三个默认的网络, 我们可以这样查看:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
5fa52100eeb6        bridge              bridge              local
e3b7da4f14e9        host                host                local
6ddc3eda6788        none                null                local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NAME&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;的网络比较特殊, 新运行的容器默认都是在这个网络中, 除非指定是用别的网络&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;查看网络信息&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -itd --name=networktest ubuntu
408cf6d9f25b9757c5d5fdfcd8c9a7133c7b888095c02b7b85d46f8df404b847
$ docker network inspect bridge
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们会得到类似于下面的描述&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;5fa52100eeb64d58d5ec97b2f2267c78d700265d310030b0bc61e203367172d2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;EnableIPv6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;IPAM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;Subnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.0/16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;Gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.1&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Internal&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Containers&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;408cf6d9f25b9757c5d5fdfcd8c9a7133c7b888095c02b7b85d46f8df404b847&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;networktest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;EndpointID&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;87625c710a97b0e40dd79119d5002edd4c44f162ff1c2d4b85d9c87b0f43968e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;MacAddress&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;02:42:ac:11:00:02&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;IPv4Address&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.2/16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;IPv6Address&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Options&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.default_bridge&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.enable_icc&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.enable_ip_masquerade&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.host_binding_ipv4&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.driver.mtu&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1500&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Labels&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们可以这样检查容器的信息, 其中就有网络信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;花括号之间没有空格!!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看网络信息&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {json .NetworkSettings.Networks}}&#39;&lt;/span&gt; networktest
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IPAMConfig&quot;&lt;/span&gt;:null,&lt;span class=&quot;s2&quot;&gt;&quot;Links&quot;&lt;/span&gt;:null,&lt;span class=&quot;s2&quot;&gt;&quot;Aliases&quot;&lt;/span&gt;:null,&lt;span class=&quot;s2&quot;&gt;&quot;NetworkID&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;5fa52100eeb64d58d5ec97b2f2267c78d700265d310030b0bc61e203367172d2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;EndpointID&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;87625c710a97b0e40dd79119d5002edd4c44f162ff1c2d4b85d9c87b0f43968e&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Gateway&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;IPPrefixLen&quot;&lt;/span&gt;:16,&lt;span class=&quot;s2&quot;&gt;&quot;IPv6Gateway&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;GlobalIPv6Address&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;GlobalIPv6PrefixLen&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;MacAddress&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;02:42:ac:11:00:02&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 直接查看IP地址&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;&lt;/span&gt; networktest
172.17.0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;断开网络&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network disconnect bridge networktest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;networktest&lt;/code&gt;这个容器从&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;网络中断开, 再次查看IP地址就没没有ip了&lt;/p&gt;

&lt;p&gt;当然也可以重新连接&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network connect bridge networktest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;创建网络&lt;/h3&gt;
&lt;p&gt;我们可以这样创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;网络&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network create -d bridge my-bridge
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;: driver value, 可以不写, 默认就是&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;; 最后面跟自己的driver名字&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;使用自定义网络创建容器&lt;/h3&gt;

&lt;p&gt;在运行容器的时候可以通过传递参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--network=my-bridge&lt;/code&gt;来指定使用那个网络, 不传默认使用&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;花括号之间没有空格!!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --network&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-bridge --name db training/postgres
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --name web training/webapp python app.py
&lt;span class=&quot;c&quot;&gt;# db 使用的网络是 my-bridge&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;&lt;/span&gt; db
172.18.0.2
&lt;span class=&quot;c&quot;&gt;# web 使用的网络是 bridge&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;shisong$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;&lt;/span&gt; web
172.17.0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们可以打开容器&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;的终端, &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt;一下看看网是否通&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker exec -it db bash
root@822d3512fe8d:/# ping 172.17.0.2
PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.
64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.114 ms
64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.070 ms
^C
--- 172.18.0.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1006ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果我们把&lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt;容器也连接到&lt;code class=&quot;highlighter-rouge&quot;&gt;my-bridge&lt;/code&gt;网络中, 则网络就通了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker network connect my-bridge web
&lt;span class=&quot;c&quot;&gt;# 查看新的IP地址, 刚才的网络没断开, 所以会看到有两个网络, 两个IP地址(新的是172.18.0.3)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect web
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -it db bash
&lt;span class=&quot;gp&quot;&gt;root@822d3512fe8d:/# &lt;/span&gt;ping 172.18.0.3
PING 172.18.0.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;172.18.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 172.18.0.3: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.298 ms
64 bytes from 172.18.0.3: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.112 ms
^C
--- 172.18.0.3 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;999ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;数据卷&lt;/h2&gt;
&lt;p&gt;数据卷(&lt;code class=&quot;highlighter-rouge&quot;&gt;data volume&lt;/code&gt;)类似于linux系统中的挂载点&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;添加数据卷&lt;/h3&gt;
&lt;p&gt;我们在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker create&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;时可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; flag来添加数据卷, 甚至可以多次使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;来添加多个数据卷&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P --name web -v /webapp training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面是挂载了一个数据卷到容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/webapp&lt;/code&gt;目录(必须是绝对路径), &lt;code class=&quot;highlighter-rouge&quot;&gt;/webapp&lt;/code&gt;不存在则创建, 存在则覆盖(但不会删除原有的, 卸载时恢复原有的)&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect web&lt;/code&gt;命令来查看添加数据卷的信息, 会有一段如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;Mounts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e30f9d5c1c8ffe1d02c8f1d758c5b0663c73ba46e8469e1e6ee14a9e5ee1784a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/docker/volumes/e30f9d5c1c8ffe1d02c8f1d758c5b0663c73ba46e8469e1e6ee14a9e5ee1784a/_data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/webapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;RW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Propagation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;就是我们挂载的数据卷,&lt;code class=&quot;highlighter-rouge&quot;&gt;Destination&lt;/code&gt;是我们挂载到容器中的位置,&lt;code class=&quot;highlighter-rouge&quot;&gt;RW&lt;/code&gt;是否可读写, 默认就是可读写&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;挂载本地目录&lt;/h3&gt;
&lt;p&gt;我们可以挂载本地目录, 也可以指定是只读还是可读写模式, &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;后面的格式为&lt;code class=&quot;highlighter-rouge&quot;&gt;[local_path:]container-dir[:ro]&lt;/code&gt;, 除了上面的那种形式, 还可以像下面这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py
$ docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不过在&lt;code class=&quot;highlighter-rouge&quot;&gt;OS X&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;windows&lt;/code&gt;中, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Engine&lt;/code&gt;只有&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users (OS X)&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users (Windows)&lt;/code&gt;的访问权限, 所以只能这样使用了:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# os x&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -v /Users/&amp;lt;path&amp;gt;:/&amp;lt;container path&amp;gt; ...
&lt;span class=&quot;c&quot;&gt;# windows&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -v /c/Users/&amp;lt;path&amp;gt;:/&amp;lt;container path&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外, 还可以挂载某个名字的数据卷, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;会创建一个给定名字的数据卷, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P --name web -v foo:/opt/webapp:ro training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect web&lt;/code&gt;得到的描述如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;Mounts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/docker/volumes/foo/_data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/opt/webapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ro&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;RW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Propagation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rprivate&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;挂载文件&lt;/h3&gt;

&lt;p&gt;我们可以挂载某个文件到容器中:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -it -v ~/.bash_history:/root/.bash_history ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;: 容器退出时自动删除容器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面就挂载了&lt;code class=&quot;highlighter-rouge&quot;&gt;bash_history&lt;/code&gt;到容器中, 在容器里查看到原来本地机上的历史命令, 当退出容器的时候, 本地机会有刚才在容器里使用过的命令的历史.&lt;br /&gt;
不过需要注意的是, 若是挂在了文件, 在容器里使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt;等编辑该挂在文件时, 会引起错误. 因此挂载这个文件的父目录是更好的选择.&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;挂载容器中的数据卷&lt;/h3&gt;
&lt;p&gt;挂载数据卷, 可以是匿名的也可以是命名的, 可以挂载本地目录也可以挂载本地文件, 还能挂载另一个容器中的数据卷. 我们可以通过参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--volumes-from&lt;/code&gt;指定数据卷来自于哪个容器, 可以多次使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--volumes-from&lt;/code&gt;来挂载多个数据卷&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 先创建一个叫 dbstore 的容器, 这个容器添加了数据卷&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker create -v /dbdata --name dbstore training/postgres /bin/true
&lt;span class=&quot;c&quot;&gt;# 创建容器 db1, 指明数据卷来自于 dbstore&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --volumes-from dbstore --name db1 training/postgres
&lt;span class=&quot;c&quot;&gt;# 创建容器 db2, 指明数据卷来自于 db1&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --volumes-from db1 --name db2 training/postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-11&quot;&gt;查看删除数据卷&lt;/h3&gt;
&lt;p&gt;上面例子中, 删除挂载数据卷的容器, 并不会删除挂载的数据卷, 除非在删除最后一个引用该数据卷的容器时指定&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;标记&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 删除容器不会删除数据卷&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rm db1
&lt;span class=&quot;c&quot;&gt;# 添加 -v 由于不是最后一个引用数据卷的容器, 所以数据卷仍没被删除&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rm -v dbstore
&lt;span class=&quot;c&quot;&gt;# 删除最后一个引用数据卷的容器时,添加 -v , 数据卷被删除&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rm -v db2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果删除了最后一个引用数据卷的容器时没有加&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;, 将会出现&lt;code class=&quot;highlighter-rouge&quot;&gt;dangling&lt;/code&gt;状态(悬挂,没人用了)的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;有匿名和命名之分, 我们可以在创建容器时通过参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;指定, 当容器删除时, 对应的所有匿名&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;也随着删除&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -v /foo -v awesome:/bar --name test ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;指定了一个匿名&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;, 挂载到容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/foo&lt;/code&gt;下, 还指定了一个命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;awesome&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;挂在到了&lt;code class=&quot;highlighter-rouge&quot;&gt;/bar&lt;/code&gt;下, 容器运行完自动删除镜像(&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;)时, 匿名数据卷会被删除,而&lt;code class=&quot;highlighter-rouge&quot;&gt;awesome&lt;/code&gt;并没有被删除.&lt;/p&gt;

&lt;p&gt;另外我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume&lt;/code&gt;命令来查看管理所有的数据卷&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有 volume&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker volume ls
&lt;span class=&quot;c&quot;&gt;# 查看 dangling 的 volume&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker volume ls -f &lt;span class=&quot;nv&quot;&gt;dangling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 删除 volume&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker volume rm &amp;lt;volume name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;volume&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;的其他用法&lt;/h3&gt;
&lt;p&gt;我们可以使用数据卷进行数据的备份、存储以及迁移等工作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;dbstore&lt;/code&gt;挂载了一个数据卷, 并且把本地目录挂在到了&lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt;下, 最后传递了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt;命令, 把&lt;code class=&quot;highlighter-rouge&quot;&gt;dbdata volume&lt;/code&gt;备份到&lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt;目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;backup.tar&lt;/code&gt;文件里. 命令执行完, 容器停止并被自动移除了, 但是&lt;code class=&quot;highlighter-rouge&quot;&gt;dbdata volume&lt;/code&gt;的数据被备份了.&lt;/p&gt;

&lt;p&gt;然后我们可以创建一个新容器, 添加了一个匿名的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;在容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/dbdata&lt;/code&gt;目录下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -v /dbdata --name dbstore2 ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;下面我们可以把刚才的备份文件解压到&lt;code class=&quot;highlighter-rouge&quot;&gt;dbstore2&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;中, 从而达到转移的目的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c &quot;cd /dbdata &amp;amp;&amp;amp; tar xvf /backup/backup.tar --strip 1&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-21-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E7%BD%91%E7%BB%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8D%B7.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-21-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E7%BD%91%E7%BB%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8D%B7.html</guid>
        
        <category>Docker</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Docker学习笔记(二):简单使用</title>
        <description>&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;命令行客户端使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;的一些例子&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;命令格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;简单使用&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hello-world&quot;&gt;hello world&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;交互式运行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;后台运行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;查看容器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;容器命名&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;查看容器的输出&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;停止/启动容器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;删除容器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web&quot;&gt;运行web程序(使用端口)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot;&gt;查看端口&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot;&gt;查看程序日志&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot;&gt;检查容器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-12&quot;&gt;镜像操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot;&gt;显示本地镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-14&quot;&gt;获取镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot;&gt;搜索镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot;&gt;制作镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tag&quot;&gt;镜像的tag&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-17&quot;&gt;提交镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-18&quot;&gt;删除镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#image-digests&quot;&gt;Image Digests&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;命令格式&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;安装过程参考&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官网&lt;/a&gt;, 安装成功后我们可以通过命令行接口(CLI)来使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;, 每个命令都可能会包含一些标记(&lt;code class=&quot;highlighter-rouge&quot;&gt;flags&lt;/code&gt;)和参数(&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;), 命令的格式大致如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;比如刚安装完成可以查看&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;的版本信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;标记来获取帮助, 比如列出&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;命令的所有选项(子命令)和用法、查看子命令的用法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker --help
&lt;span class=&quot;c&quot;&gt;# 查看 attach 子命令的用法&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker attach --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;简单使用&lt;/h2&gt;

&lt;p&gt;常用的命令使用方式示例以及一些解释&lt;/p&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;hello world&lt;/h3&gt;

&lt;p&gt;镜像好比类, 容器好比实例, 镜像被&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;就形成了容器, 运行容器可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;命令&lt;/p&gt;

&lt;p&gt;先来个简单例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;当运行镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world&lt;/code&gt;时, 会先检查本地是否有这个镜像, 没有则会去仓库(默认是docker hub)下载&lt;/p&gt;

&lt;p&gt;其他例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run ubuntu /bin/echo &#39;Hello world&#39;
Hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;交互式运行&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -t -i ubuntu /bin/bash
root@a98895ac1616:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt; flag: 给容器分配一个tty终端&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; flag: 可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;STDIN&lt;/code&gt;与容器交互&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;: 在容器里运行的&lt;code class=&quot;highlighter-rouge&quot;&gt;bash shell&lt;/code&gt;, 可用shell命令&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;退出容器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;后台运行&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d ubuntu /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;
28f3adccbae408573bbe6ecc03ad621d4257fbf1a79c672cc8d83ad327266807
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; flag: 后台运行容器(daemonize)&lt;/li&gt;
  &lt;li&gt;输出的那一长串是&lt;code class=&quot;highlighter-rouge&quot;&gt;container ID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;查看容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
28f3adccbae4        ubuntu              &quot;/bin/sh -c &#39;while tr&quot;   4 minutes ago       Up 4 minutes                            zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;container ID&lt;/code&gt;: 前面那一长串的缩写&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NAMES&lt;/code&gt;: 自动给容器起的名字, 每个容器的名字都是不一样的
另外:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;: 仅查看运行中的容器&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -l&lt;/code&gt;: 查看最后一次运行的容器(last)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt;: 查看所有运行过的容器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;容器命名&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --name hello ubuntu /bin/echo &#39;Hello world&#39;
Hello world
$ docker ps -l
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
c4c79c82eb6c        ubuntu              &quot;/bin/echo &#39;Hello wor&quot;   48 minutes ago      Exited (0) 2 seconds ago                       hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;容器的名字已经变成了&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;而不再是自动起的名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-6&quot;&gt;查看容器的输出&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker logs zen_curran
hello world
hello world
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;停止/启动容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stop zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以再次运行某个容器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker start zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;删除容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker rm zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;web&quot;&gt;运行web程序(使用端口)&lt;/h2&gt;
&lt;p&gt;新下载一个镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;training/webapp&lt;/code&gt;, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;python app.py&lt;/code&gt;可运行python写的web程序, 通过下面的命令运行容器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;查看该容器的信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
9b32553a8272        training/webapp     &quot;python app.py&quot;     12 minutes ago      Up 12 minutes       0.0.0.0:32768-&amp;gt;5000/tcp   admiring_mayer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中有个与其他程序不一样的地方:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PORTS
0.0.0.0:32768-&amp;gt;5000/tcp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这就是&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;的作用, 上面描述的意思是&lt;code class=&quot;highlighter-rouge&quot;&gt;Dcoker&lt;/code&gt;容器里的端口是&lt;code class=&quot;highlighter-rouge&quot;&gt;5000(Python Flask的默认端口)&lt;/code&gt;暴露到了属主机的&lt;code class=&quot;highlighter-rouge&quot;&gt;32768&lt;/code&gt;端口.&lt;br /&gt;
上面&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;的作用等同于&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 5000&lt;/code&gt;, 将暴露容器中的端口&lt;code class=&quot;highlighter-rouge&quot;&gt;5000&lt;/code&gt;到一个更大的宿主机端口上(临时端口映射范围一般为&lt;code class=&quot;highlighter-rouge&quot;&gt;32768~61000&lt;/code&gt;).&lt;br /&gt;
也可以自己指定使用某个具体的端口:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -p 80:5000 training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;访问容器运行起来的web程序地址为:&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:80&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;查看端口&lt;/h3&gt;
&lt;p&gt;上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;可以看到容器的端口信息, 还有个更简单的命令&lt;code class=&quot;highlighter-rouge&quot;&gt;docker port&lt;/code&gt;, 指定要查看的容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt;即可:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker port 9b32553a8272
5000/tcp -&amp;gt; 0.0.0.0:32768
$ docker port admiring_mayer 5000
0.0.0.0:32768
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-10&quot;&gt;查看程序日志&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker logs -f admiring_mayer
 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
172.17.0.1 - - [19/Jul/2016 09:10:49] &quot;GET / HTTP/1.1&quot; 200 -
172.17.0.1 - - [19/Jul/2016 09:10:49] &quot;GET /favicon.ico HTTP/1.1&quot; 404 -
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;: 类似与&lt;code class=&quot;highlighter-rouge&quot;&gt;tail -f&lt;/code&gt;的形式查看&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-11&quot;&gt;检查容器&lt;/h3&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt;命令可以获取一些信息, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker inspect admiring_mayer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以看到一些json格式的信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;9b32553a82729a012b33b157abefb7639f1a59007042454f7ea543982a888466&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2016-07-19T08:40:01.882402323Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;app.py&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;State&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-12&quot;&gt;镜像操作&lt;/h2&gt;

&lt;h3 id=&quot;section-13&quot;&gt;显示本地镜像&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              cf62323fa025        11 days ago         125 MB
hello-world         latest              c54a2cc56cbb        2 weeks ago         1.848 kB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REPOSITORY&lt;/code&gt;: 镜像来自哪个仓库, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TAG&lt;/code&gt;: 镜像的版本, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;14.04&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt;表示最新版本&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IMAGE ID&lt;/code&gt;: 镜像的id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个镜像都有很多版本, 你可以指定某个版本, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -t -i ubuntu:14.04 /bin/bash&lt;/code&gt;, 当不指定时, 默认都是&lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;获取镜像&lt;/h3&gt;
&lt;p&gt;之前都是直接&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;的, 会自动获取镜像, 也可以仅获取, 不运行:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull ubuntu:14.04
$ docker pull centos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-15&quot;&gt;搜索镜像&lt;/h3&gt;
&lt;p&gt;可以去&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;搜索镜像, 也可以在命令行搜索&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker search ubuntu
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu                            Ubuntu is a Debian-based Linux operating s...   4293      [OK]       
ubuntu-upstart                    Upstart is an event-based replacement for ...   65        [OK]       
rastasheep/ubuntu-sshd            Dockerized SSH service, built on top of of...   29                   [OK]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STARS&lt;/code&gt;: 表示该镜像的受欢迎程度&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OFFICIAL&lt;/code&gt;: 表示是官方制作的镜像&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUTOMATED&lt;/code&gt;: 表示是用户制作的镜像,&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;前面就是用户名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-16&quot;&gt;制作镜像&lt;/h3&gt;
&lt;p&gt;我们可以通过两种方式来制作镜像&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;可以更新镜像运行起来的容器, 在运行的容器中做修改, 然后提交这个修改得到新的镜像&lt;/li&gt;
  &lt;li&gt;可以写&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;来指定具体如何创建某个镜像.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先来看看第一种方法.&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;training/sinatra&lt;/code&gt;镜像运行起来一个容器:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -t -i training/sinatra /bin/bash
root@0b2616b0e5a8:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;记住这个容器的id:&lt;code class=&quot;highlighter-rouge&quot;&gt;0b2616b0e5a8&lt;/code&gt;,一会儿会用. 然后通过bash在容器中安装&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; gem&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@0b2616b0e5a8:/# gem install json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;完成之后退出容器就可以了&lt;/p&gt;

&lt;p&gt;最后我们用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker commit&lt;/code&gt;命令, 把刚才已经改变了的容器提交一个副本制作成镜像&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker commit -m &quot;Added json gem&quot; -a &quot;Kate Smith&quot; 0b2616b0e5a8 ouruser/sinatra:v2
4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;: 添加描述信息, 类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;: 作者信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0b2616b0e5a8&lt;/code&gt;: 要制作成镜像的拿个容器的id&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ouruser/sinatra:v2&lt;/code&gt;: 目标镜像, 用户为&lt;code class=&quot;highlighter-rouge&quot;&gt;ouruser&lt;/code&gt;, 镜像名为&lt;code class=&quot;highlighter-rouge&quot;&gt;sinatra&lt;/code&gt;, 版本(tag)为&lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种方法比较麻烦而且不利于团队间的合作分享, 下面看看第二种方法:&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;命令编译&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;来制作镜像, 首先创建一个目录和一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir sinatra
$ cd sinatra
$ touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件里添加类似于下面的内容:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is a comment&lt;/span&gt;
FROM ubuntu:14.04
MAINTAINER Kate Smith &amp;lt;ksmith@example.com&amp;gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y ruby ruby-dev
RUN gem install sinatra
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;开头的是注释, 下面是指令, 指令的格式类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;INSTRUCTION statement&lt;/code&gt;, 每条指令都会创建镜像的一层&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;: 告诉&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;源镜像, 即我们是基于哪个镜像进行修改的&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAINTAINER&lt;/code&gt;: 用来说明是谁维护的这个镜像&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;: 要在源镜像上做那些修改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后我们编译&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t ouruser/sinatra:v2 .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;: 来指定一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;, 形式为:&lt;code class=&quot;highlighter-rouge&quot;&gt;name:tag&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;: 注意后面有个&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, 用来表示编译当前目录里的&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件, 也可以自己指定&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tag&quot;&gt;镜像的tag&lt;/h3&gt;
&lt;p&gt;我们可以给已经存在的镜像添加新的&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker tag ubuntu:14.04 rgkjhshi/ubuntu:newtag
docker tag b2f1fdd93175 rgkjhshi/ubuntu:newtag2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-17&quot;&gt;提交镜像&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker push rgkjhshi/ubuntu:newtag
&lt;span class=&quot;c&quot;&gt;# 提交所有tag&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker push rgkjhshi/ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-18&quot;&gt;删除镜像&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rmi rgkjhshi/ubuntu:newtag2
&lt;span class=&quot;c&quot;&gt;# 不写tag 默认删除 latest&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rmi rgkjhshi/ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;image-digests&quot;&gt;Image Digests&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt;或之后的格式的镜像, 有个唯一标识符叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;, 如果用于生成镜像的输入没有变,则&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;值也是一样的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images --digests
REPOSITORY          TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE
rgkjhshi/ubuntu     newtag              sha256:8d0f6d13291273ad6271c3c55b222ad08e28ff71a40c27487c79dbe80cce184f   b2f1fdd93175        40 hours ago        188.4 MB
rgkjhshi/ubuntu     newtag2             sha256:8d0f6d13291273ad6271c3c55b222ad08e28ff71a40c27487c79dbe80cce184f   b2f1fdd93175        40 hours ago        188.4 MB
ubuntu              14.04               sha256:b2c8a4d46473ab082200880391ddf8c06f2a67da4fa905ce2747dcd95d8d7af7   b2f1fdd93175        40 hours ago        188.4 MB
ubuntu              latest              sha256:ba1688fec34f66d8a7ff5b42e6971625d8232c72bf0e38ad06dda10cad157293   cf62323fa025        11 days ago         125 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0&lt;/code&gt;的仓库使用&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;命令时都会显示镜像的&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;, 我们也可以直接像这样使用&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull rgkjhshi/ubuntu@sha256:8d0f6d13291273ad6271c3c55b222ad08e28ff71a40c27487c79dbe80cce184f
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;若同一个&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;有不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;, 则&lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;下来的镜像没有&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;(显示的是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;none&amp;gt;&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;rmi&lt;/code&gt;命令甚至&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;都可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 19 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-19-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-19-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
        
        <category>Docker</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Docker学习笔记(一):初步了解</title>
        <description>&lt;p&gt;本文是学习Docker的过程记录, 有些内容是自己的理解, 所以可能理解的不到位甚至不正确, 随着学习的深入我会慢慢更正。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;写在最前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker&quot;&gt;初识Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-1&quot;&gt;Docker与传统虚拟机技术的对比&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-engine&quot;&gt;Docker Engine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-&quot;&gt;Docker 架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;写在最前面&lt;/h2&gt;

&lt;p&gt;学习&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;最好的方式就是看官方文档, 不过有时候官网的解释非常官方, 所以我把学习中用到的资料全都列在下面&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.docker.org.cn/index.html&quot;&gt;docker中文社区&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/list/docker/&quot;&gt;极客学院教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;docker&quot;&gt;初识Docker&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是什么其实不太好定义, 它是个新的东西, 原来没有. 官方是这么说的, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是一个开发、装载、运行程序的开源的平台, 致力于快速发布你的程序, 缩短了从写代码到发布上线之间的这个周期.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;容器可以把程序运行所需要的一切软件, 包括代码、运行时环境、系统工具、系统库等直接打包进一个完整的文件系统里. 容器运行时可保证程序运行的环境都是一致的.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是一个开源项目, Go语言实现, 遵从&lt;code class=&quot;highlighter-rouge&quot;&gt;Apache 2.0&lt;/code&gt;协议. &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Linux容器技术(LXC)&lt;/code&gt;上进一步封装, 使用户操作更简单, 像是操作一个轻量级的虚拟机.&lt;/p&gt;

&lt;h2 id=&quot;docker-1&quot;&gt;Docker与传统虚拟机技术的对比&lt;/h2&gt;

&lt;p&gt;一般都会拿&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;跟传统的虚拟机技术做比较, 下图是官网上的对比图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/docker_VM.png&quot; alt=&quot;Virtural Machine&quot; title=&quot;Virtural Machine&quot; /&gt;
&lt;img src=&quot;/static/images/docker_container.png&quot; alt=&quot;Container&quot; title=&quot;Container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;infrastructure(硬件)&lt;/code&gt;之上是我们的宿主机的操作系统, 传统虚拟机需要通过一层&lt;code class=&quot;highlighter-rouge&quot;&gt;HyperVisor&lt;/code&gt;进行模拟硬件, 然后再安装虚拟机操你工作系统, 在虚拟机中跑各种程序; &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是在宿主机的操作系统上直接装了&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;引擎(硬件模拟Docker帮我们屏蔽了,虚拟机也不需要了), 直接在Docker引擎上可以跑各种程序.&lt;/p&gt;

&lt;h2 id=&quot;docker-engine&quot;&gt;Docker Engine&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Engine&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker platform&lt;/code&gt;中最核心的部分. &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Engine&lt;/code&gt;是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;client-server&lt;/code&gt;形式的程序, 它包括三部分:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;server : 一个一直运行的进程, 可叫做守护进程(daemon process)&lt;/li&gt;
  &lt;li&gt;REST API : 跟&lt;code class=&quot;highlighter-rouge&quot;&gt;daemon&lt;/code&gt;进行交互的API&lt;/li&gt;
  &lt;li&gt;client: 客户端工具, 给用户使用的命令行接口, &lt;code class=&quot;highlighter-rouge&quot;&gt;command line interface(CLI)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/docker_engine.png&quot; alt=&quot;docker_engine&quot; title=&quot;docker_engine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命令行脚本或命令通过&lt;code class=&quot;highlighter-rouge&quot;&gt;REST API&lt;/code&gt;跟&lt;code class=&quot;highlighter-rouge&quot;&gt;demon&lt;/code&gt;进行交互, 许多其他的docker组件, 也使用&lt;code class=&quot;highlighter-rouge&quot;&gt;REST API&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;CLI&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;docker-&quot;&gt;Docker 架构&lt;/h2&gt;

&lt;p&gt;Docker是&lt;code class=&quot;highlighter-rouge&quot;&gt;client-server&lt;/code&gt;架构, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker client&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker daemon&lt;/code&gt;交互来控制编译、运行、发布容器. &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;daemon&lt;/code&gt;运行在同一个系统里, 也可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;连接到远程的&lt;code class=&quot;highlighter-rouge&quot;&gt;daemon&lt;/code&gt;上, 它们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;交互&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/docker_architecture.png&quot; alt=&quot;docker_architecture&quot; title=&quot;docker_architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中有三个新内容: &lt;code class=&quot;highlighter-rouge&quot;&gt;image registry container&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker image&lt;/code&gt; : 一个只读模板, 比如, Ubuntu的操作系统上装了apache, 上面放了你自己的web应用, 这整个被创建成了一个镜像文件. 你可以自己制作镜像, 也可以下载别人的镜像.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker registry&lt;/code&gt;: registry用于保存&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;. 存储镜像的形式可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;的也可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;的. 官方提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker registry&lt;/code&gt;, 叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt;是官方提供的, 最大的一个镜像仓库.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker container&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;来创建的. 容器里面包含了程序运行的所有东西. 容器可以被&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;started&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stopped&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;moved&lt;/code&gt;, 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;deleted&lt;/code&gt;, 每个容器都是相互独立的.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些基本上就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;经常用到的东西了. 上面的大部分内容都来自官网,更多内容可以去官网看看.&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-11-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)-%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-11-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)-%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</guid>
        
        <category>Docker</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Java日期处理工具JodaTime</title>
        <description>&lt;p&gt;主要是介绍下有这么一个好用的工具包, 简单写几个使用的例子&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#maven&quot;&gt;maven依赖&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;使用示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;maven&quot;&gt;maven依赖&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;joda-time&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;joda-time&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;使用示例&lt;/h2&gt;

&lt;p&gt;最常用的一个类就是&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;类, 它有很多构造方法和时间的操作方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 创建当前时间&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 创建某一时刻的时间&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过系统毫秒数创建当前时间&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过格式化字符串创建时间&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2016-06-30 12:01:01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 与JDK 的 Date 相互转换&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdkDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 默认输出格式&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2016-06-29T15:36:41.591+08:00&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 格式化输出&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2016-06-06 12:01:01.999&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 输出星期几&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 星期三 2016-06-29 15:38:47&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 时间操作, 注意每个返回都是一个新对象&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 33天后&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2016-01-01 12:10:10.010&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plusDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2016-02-03 12:10:10.010&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 年月日时分秒 还有毫秒, 都能加&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 某月最后一天&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2016-01-01 12:10:10.010&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dayOfMonth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMaximumValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2016-01-31 12:10:10.010&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 某周第一天&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2016-01-01 12:10:10.010&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dayOfWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMinimumValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 2015-12-28 12:10:10.010&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 类似的有 yearOfCentury dayOfYear monthOfYear dayOfMonth dayOfWeek&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 距离今天多少天&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2016-06-30 12:01:01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;daysBetween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 后面早则为负数&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实创建&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;对象时也能传&lt;code class=&quot;highlighter-rouge&quot;&gt;ISODateTimeFormat&lt;/code&gt;格式化的字符串, 如:”2006-01-26T13:30:00-06:00”, 但要确保给出的字符串格式正确, 可以参考&lt;a href=&quot;http://joda-time.sourceforge.net/api-release/index.html&quot;&gt;Joda API文档&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-29-Java%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7JodaTime.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-29-Java%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7JodaTime.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Java中的同步异步阻塞非阻塞</title>
        <description>&lt;p&gt;内容涉及OS的IO模型, Java的同步与异步, 阻塞与非阻塞, BIO、NIO、AIO&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;同步与异步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#io&quot;&gt;IO模型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;阻塞与非阻塞&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#bio&quot;&gt;BIO&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#nio&quot;&gt;NIO&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#io-1&quot;&gt;多路复用IO&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#aio&quot;&gt;AIO&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;同步与异步&lt;/h2&gt;

&lt;p&gt;同步就是一直在做某件事儿, 调用某个功能时, 这个功能没有结果之前, 这个调用就不返回。 比如洗衣服, 把衣服放在洗衣机里没有洗好之前就一直在那里看着它洗, 这就是同步(这个例子并不好, 人和洗衣机是两个主体, 我觉得同步应该是要洗一堆衣服, 自己动手洗, 没洗好之前就一直洗, 直到洗完才能做别的事情, 这样理解同步更好)&lt;/p&gt;

&lt;p&gt;异步就是做某件事儿的同时也做了其他事, 调用某个功能时, 不用立即得到结果, 可以先处理别的功能, 有结果之后被调用方通知调用者来处理这个结果。 比如洗衣服, 把衣服放到洗衣机里洗, 自己可以先做别的事情, 衣服洗好了, 洗衣机会响铃通知, 这个时候就可以再去把衣服拿出来&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;io&quot;&gt;IO模型&lt;/h2&gt;

&lt;p&gt;要理解阻塞和非阻塞, 可以先了解下IO操作机制。IO机制是操作系统层面的, Java可以通过JVM发起系统调用进行IO操作.&lt;/p&gt;

&lt;p&gt;先介绍下Linux OS中常见的IO模型:select, poll, epoll&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;select模型: 网络通信被linux操作系统抽象成文件读写, 通常由设备驱动程序提供, 驱动知道自身数据是否可用. 这些设备描述符由一个数组管理, 数组是有长度的, 32位机上限1024, 64位机上限2048. 每次select请求时都会线性遍历数组看是否有可用的文件描述符, 若一个也没有则睡眠, 直到超时或有可用资源后被唤醒, 然后重新遍历select数组找到可用的文件描述符.&lt;/li&gt;
  &lt;li&gt;poll模型: 与select类似, 把select数组采用链表实现, 因此没了最大数量的限制&lt;/li&gt;
  &lt;li&gt;epoll模型: 基于事件回调机制, 回调时直接通知进程, 无须使用某种方式来查看状态.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;阻塞与非阻塞&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;阻塞与非阻塞&lt;/code&gt;貌似很容易和&lt;code class=&quot;highlighter-rouge&quot;&gt;同步与异步&lt;/code&gt;混淆。我们可以这么来看.&lt;/p&gt;

&lt;p&gt;阻塞的线程通常是处于&lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;状态(BIO中的&lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;操作时, 线程阻塞是JVM配合OS完成的, 此时Java获取到线程的状态仍是&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;但它确实已经被阻塞了)
同步是指步骤需要一步步来完成, 像代码一条条执行, 而异步可以没执行完当前代码之前就执行下一行代码, 即做当前任务的同时也能做别的任务(当前任务可以交给别的线程同时执行). 不过关键要注意的是, 同步异步中的同步跟多线程同步使用&lt;code class=&quot;highlighter-rouge&quot;&gt;synchronized&lt;/code&gt;进行同步, 这俩词虽然是一样的, 但说的完全不是一会儿事儿.&lt;/p&gt;

&lt;p&gt;所以&lt;code class=&quot;highlighter-rouge&quot;&gt;阻塞与非阻塞&lt;/code&gt;说的是怎么通信, 是挂起还是不挂起, 有没有回调; &lt;code class=&quot;highlighter-rouge&quot;&gt;同步与异步&lt;/code&gt;说的是怎么干活, 按部就班顺序干, 还是不按顺序一起同时干.&lt;/p&gt;

&lt;p&gt;传统的IO发起后线程被挂起, IO返回时接收结果的时间比运行的时间还要长. 所以可以用一个线程专门监视IO的返回状况(通过system call 获取一些状态), 发现IO的数据准备好时采用某种方式来处理(可以分配一个线程处理, 若处理比较简单可以也使用这个线程处理). JDK1.4 提供了NIO(New I/O), 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;SocketChannel&lt;/code&gt;代替原来的&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket&lt;/code&gt;, 它就是非阻塞IO, 它通过select选择器来进行系统调用。
不过这样的处理, 中间有一个将数据从内核区拷贝到进程内的过程是同步的, 即这个过程是程序自己处理的(占用了本身线程的时间), 所以NIO是同步非阻塞的。如果这个拷贝数据到程序空间的过程也是别人来做, 不占用本身线程的时间, 这就是异步模型了.&lt;/p&gt;

&lt;h3 id=&quot;bio&quot;&gt;BIO&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BIO&lt;/code&gt;即&lt;code class=&quot;highlighter-rouge&quot;&gt;Blocking I/O&lt;/code&gt;(阻塞 I/O), 这种模型中程序先通过系统调用(System Call)发送请求给内核(Kernel), 然后由内核去进行通信, 如果系统调用是读操作的话, 在内核准备好数据之前这个线程是被挂起的, 直到数据在内核中准备好.&lt;/p&gt;

&lt;p&gt;整个过程可分为两个阶段:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;等待I/O数据返回. 这取决于IO目标返回数据的速度, 如网络IO时看网速和数据本身的大小&lt;/li&gt;
  &lt;li&gt;返回的数据先被填充到内核(Kernel)缓冲区里, 然后从内核区拷贝到进程内. 这个过程完成后程序才能向下执行.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BIO整个过程如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/BIO.png&quot; alt=&quot;BIO&quot; title=&quot;BIO&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BIO的特点就是在IO执行的两个阶段都被block了&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nio&quot;&gt;NIO&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NIO&lt;/code&gt;即&lt;code class=&quot;highlighter-rouge&quot;&gt;Non-Blocking I/O&lt;/code&gt;(非阻塞 I/O), 与BIO的明显区别是, 发起第一次System Call请求后, 线程并没有被阻塞, 它反复检查数据是否准备好, 把原来大块不能用的阻塞时间分成了许多”小阻塞”(检查), 所以进程不断有机会被执行.这个检查有没有准备好数据的过程有点类似于”轮询”.&lt;/p&gt;

&lt;p&gt;线程一直在反复查看有没有数据准备好, 这似乎在空耗CPU, 看起来效率更低, 这就要看到底怎么使用了. 实际上每次查看的动作比较简单, 可以只用一个专门的线程对很多事件进行监听, 设计好检测频率就能达到高效且节省资源的目的.&lt;/p&gt;

&lt;p&gt;NIO整个过程如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/NIO.png&quot; alt=&quot;NIO&quot; title=&quot;NIO&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NIO的特点就是程序需要不断的主动询问内核数据是否准备好。第一个阶段非阻塞, 第二个阶段阻塞&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;io-1&quot;&gt;多路复用IO&lt;/h3&gt;

&lt;p&gt;NIO中轮询操作是用户线程进行的, 如果把这个任务交给其他线程, 则用户线程就不用这么费劲的查询状态了. 多路复用(&lt;code class=&quot;highlighter-rouge&quot;&gt;Multiplexing I/O&lt;/code&gt;)调用系统级别的&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;poll&lt;/code&gt;模型, 由系统进行监控IO状态. select轮询可以监控许多socket的IO请求, 当有一个socket的数据准备好时就可以返回可读状态. 用户线程有一段时间是阻塞的, 与普通非阻塞IO不一样的是, select不是等到所有数据准备好才返回, 而是只要有一个准备好就返回.&lt;/p&gt;

&lt;p&gt;Java 1.4提供的的NIO就是采用了这种方式, 在套接字上提供selector选择机制, 当发起&lt;code class=&quot;highlighter-rouge&quot;&gt;select()&lt;/code&gt;时会阻塞等待至少一个事件返回.&lt;/p&gt;

&lt;p&gt;多路复用IO过程图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/Multiplexing_IO.png&quot; alt=&quot;Multiplexing_IO&quot; title=&quot;Multiplexing_IO&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多路复用IO的特点是用户进程能同时等待多个IO请求,系统来监控IO状态,其中的任意一个进入读就绪状态,select函数就可以返回.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;上面这三种模式, 用户进程发起系统调用, 等待数据到来的过程中, 直接等待、轮询 或 select轮询。第一个过程有的阻塞, 有的不阻塞, 有的可以阻塞又可以不阻塞. 第二个过程都是阻塞的。从整个IO过程来看, 他们都是顺序执行的, 因此都属于同步模型.&lt;/p&gt;

&lt;h3 id=&quot;aio&quot;&gt;AIO&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AIO&lt;/code&gt;即&lt;code class=&quot;highlighter-rouge&quot;&gt;Asynchronous I/O&lt;/code&gt;(异步 I/O), 这是Java1.7引入的&lt;code class=&quot;highlighter-rouge&quot;&gt;NIO 2.0&lt;/code&gt;中用到的. 整个过程中, 用户线程发起一个系统调用之后无须等待, 可以处理别的事情. 由操作系统等待接收内容, 接收后把数据拷贝到用户进程中, 最后通知用户程序已经可以使用数据了, 整个过程都是非阻塞的. 相当于数据”送货上门”了. 这个过程中系统帮我们处理IO, 用户线程可以同时处理别的事情, 这属于异步模型.&lt;/p&gt;

&lt;p&gt;AIO整个过程如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/AIO.png&quot; alt=&quot;AIO&quot; title=&quot;AIO&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AIO是异步的, 我们怎么进一步加工处理结果呢? Java在这个模型中提供了两种方法:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一种是基于”回调”, 我们可以实现&lt;code class=&quot;highlighter-rouge&quot;&gt;CompletionHandler&lt;/code&gt;接口, 在调用时把回调函数传递给对应的API即可&lt;/li&gt;
  &lt;li&gt;另一种是返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;isDone()&lt;/code&gt;可查看是否已经准备好数据, 这有点类似于NIO查询的意思； &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;方法是等到数据完成返回数据, 有点类似于BIO的意思.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sat, 25 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-25-Java%E4%B8%AD%E7%9A%84%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-25-Java%E4%B8%AD%E7%9A%84%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Java线程状态</title>
        <description>&lt;p&gt;java线程状态详解&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;进程三态模型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java线程状态&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;线程状态解释&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;状态转换图&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;进程三态模型&lt;/h2&gt;

&lt;p&gt;操作系统中有比较经典的进程三态模型, 各状态之间的转换关系如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/system_thread.png&quot; alt=&quot;进程三态模型&quot; title=&quot;进程三态模型&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;java&quot;&gt;Java线程状态&lt;/h2&gt;

&lt;p&gt;类&lt;code class=&quot;highlighter-rouge&quot;&gt;java.long.Thread&lt;/code&gt;中有个内部的枚举类&lt;code class=&quot;highlighter-rouge&quot;&gt;State&lt;/code&gt;用来表示线程的状态, 它的定义如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 刚创建, 还没启动&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RUNNABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 可运行状态&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BLOCKED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 阻塞态, 或被挂起&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WAITING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 等待锁的状态&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMED_WAITING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 等待时间的状态, 如sleep就在等待时间&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TERMINATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 终止态&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;线程状态解释&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NEW&lt;/code&gt;: 线程还没被&lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt;启动. 调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt;状态也不一定会立即改变, 中间还有一些步骤.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;NEW&lt;/code&gt;状态的线程&lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt;结束后会进入&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态. 正在运行的线程一定处于&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.currentThread().getState()&lt;/code&gt;只会得到&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;. 处于&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态的线程并不一定在&lt;code class=&quot;highlighter-rouge&quot;&gt;运行&lt;/code&gt;. 比如当线程发生了&lt;code class=&quot;highlighter-rouge&quot;&gt;yield()&lt;/code&gt;操作时, 该线程仍然是&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态, 要是对应到操作系统中的三态模型就该算是&lt;code class=&quot;highlighter-rouge&quot;&gt;就绪&lt;/code&gt;了; 再比如, 在BIO中, 线程正在网络等待时, 现成的状态仍然时&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;, 而在底层实际上已经被阻塞了.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;: 阻塞态, 原因通常是在等待某个&lt;code class=&quot;highlighter-rouge&quot;&gt;锁&lt;/code&gt;, 当某个&lt;code class=&quot;highlighter-rouge&quot;&gt;synchronized&lt;/code&gt;正好有线程正在使用, 另一个线程尝试进入该&lt;code class=&quot;highlighter-rouge&quot;&gt;临界区&lt;/code&gt;的时候就会被阻塞. 得到锁(比如另一个线程走完了临界区或发生了相应锁对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;操作)之后状态会由&lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;恢复到&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;: 这种状态通常是调用某个&lt;code class=&quot;highlighter-rouge&quot;&gt;锁对象&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;方法的结果, 类似的有&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.join()&lt;/code&gt;. 跟&lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;不同, &lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKED&lt;/code&gt;是表示不能进入临界区, 所以在等待; &lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;是已经进入了临界区, 或者可理解为已经在运行了, 然后发现缺少某些资源(锁对象), 放弃运行权, 等待资源准备好. 对某个锁对象&lt;code class=&quot;highlighter-rouge&quot;&gt;notify()&lt;/code&gt;时, 将从等待池中唤醒一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;状态的线程恢复到&lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt;状态&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TIMED_WAITING&lt;/code&gt;: 跟&lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;不一样的地方是, &lt;code class=&quot;highlighter-rouge&quot;&gt;WAITING&lt;/code&gt;等待锁对象,它等待的是时间, 比如使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.sleep()&lt;/code&gt;相当于把时间资源作为所对象. 时间到达时触发线程回到工作状态.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TERMINATED&lt;/code&gt;: 线程结束了,&lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt;方法跑完了. 这是Java的一种状态,在操作系统内部可能线程已经注销了.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;状态转换图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/java_thread.png&quot; alt=&quot;进程三态模型&quot; title=&quot;进程三态模型&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-20-Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-20-Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>MySQL常用命令</title>
        <description>&lt;p&gt;mysql相关的常用命令&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mysqldump&quot;&gt;mysqldump导出数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;索引操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;删除索引&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;创建索引&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;字段操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;删除字段&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;添加字段&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;修改字段&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;修改注释&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;修改字段注释&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot;&gt;修改表注释&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mysqldump&quot;&gt;mysqldump导出数据&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqldump -h hostname -P port -u username -pPassword --no-create-info --skip-lock-tables --tables dbname tablename &amp;gt; backup.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;索引操作&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;删除索引&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;-- 直接使用drop语句
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- drop语句作为alter语句的一部分使用
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;创建索引&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;-- 创建普通索引
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 创建唯一索引
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- 普通索引
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- 唯一索引
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- 跟上面一样, 另一种写法
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;-- 主键索引
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;字段操作&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;删除字段&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;添加字段&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 只是举个例子，根据需要修改
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 在表最后添加
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 在具体某个字段后添加
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;修改字段&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 可修改字段名称, 类型, 默认值, 注释, 以及顺序
-- change 用于改名字
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
-- modify 不能改名字
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-7&quot;&gt;修改注释&lt;/h2&gt;

&lt;h3 id=&quot;section-8&quot;&gt;修改字段注释&lt;/h3&gt;

&lt;p&gt;跟修改字段一样, 把注释换成新注释就好&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;修改表注释&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;注释&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 另一种写法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-06-16-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-06-16-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
        
        <category>MySQL</category>
        
        
        <category>点滴积累</category>
        
      </item>
    
      <item>
        <title>AOP中获取方法上的注解信息</title>
        <description>&lt;p&gt;获取注解在某个方法上的注解信息&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;应用场景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;注解定义&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;切点的定义&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;获取参数的流程解释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;应用场景&lt;/h2&gt;

&lt;p&gt;通过AOP的方式, 方便的把所有方法的请求参数和返回结果都打印出来. 定义一个注解然后写切面拦截这个注解. 注解用于标记什么地方需要打日志(请求参数和返回结果).&lt;br /&gt;
注解可以标记在类上, 表示该类的所有方法都需要把参数和返回值打印出来, 这样就不需要给每个方法都加注解了;&lt;br /&gt;
注解也可以标记在某个具体的方法上, 表示只有这个方法要打印日志, 其他方法都不需要;&lt;br /&gt;
当某类上有注解, 但这个类的某个方法不应该打日志时, 可以在这个方法上加个注解, 并给注解中的属性赋值, 表示不需要打日志.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;注解定义&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 是否需要打印参数, 注解在方法上时该属性起作用, 注解在类上, 则忽略其值, 按照true来处理&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加了注解的类中的方法会被AOP拦截打出日志, 不需要打印日志的方法可以通过指定&lt;code class=&quot;highlighter-rouge&quot;&gt;@LogAnnotation(false)&lt;/code&gt; 来实现.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;切点的定义&lt;/h2&gt;

&lt;p&gt;先写个不能达到目的的错误的例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@annotation(com.test.LogAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaringType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 获取切点处的方法签名&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// 获取切点的传入参数&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}的请求参数为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}返回结果为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这个例子不对, 因为&lt;code class=&quot;highlighter-rouge&quot;&gt;joinPoint.getSignature().getDeclaringType()&lt;/code&gt;得到的是这个类的类型, 而不是这个方法(切点)的类型, 所以没法得到加在方法上的注解信息&lt;/p&gt;

&lt;p&gt;或许可以这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//得到目标对象&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//得到方法名&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//得到方法参数&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过反射拿到这个方法, 然后拿到方法上的注解&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是有更好的方法, 因为可以传递参数给通知方法.&lt;br /&gt;
下面的代码就是可以达到目的的切面的写法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 若注解仅在类上(方法上没有), 则可通过@within拦截到, 此时通过方法没有拦截到, logParameter为null
     * 若注解在方法上, 则可以通过@annotation拦截到, 此时logParameter为方法上加的注解
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@within(logAnnotation) || @annotation(logAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logAnnotation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logPointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logPointcut(logAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 方法上有注解并且指定不输出, 则不打印&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 获取切点处的方法签名&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// 获取切点的传入参数&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;void&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// toShotString, 有参数形如 Hello.hello(..); 无参数形如: Hello.hello()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;requestString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}的请求参数为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;void&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// toString, 形如 void com.test.Hello.test(); String com.test.Hello.hello(String)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;void&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;returnString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}返回结果为:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toShortString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;获取参数的流程解释&lt;/h2&gt;

&lt;p&gt;示例通知方法的写法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;args(param) &amp;amp;&amp;amp; target(bean) &amp;amp;&amp;amp; @annotation(logAnnotation)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jp, param, bean, logAnnotation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersonService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogAnnotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;图片解释:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/joinPoint.png&quot; alt=&quot;获取通知参数流程&quot; title=&quot;获取通知参数流程&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-01-AOP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-06-01-AOP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>各种还款方式详解</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;等额本金&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;等额本息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;信用卡分期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;等额本金&lt;/h2&gt;

&lt;p&gt;等额本金的特点是每个月还款总金额(本金+利息)是不一样的, 还款总额的本金部分是固定的, 由于已经还了一部分本金, 相当于借银行的钱变少了, 因此利息部分是逐渐减少的。所以每个月的还款总金额也是逐渐减少的, 第一个月最多, 最后一个月最少。&lt;/p&gt;

&lt;p&gt;等额本金还款方式的公式可以这么来推算:&lt;br /&gt;
设贷款金额为&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, 年利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;, 还款总月数为&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, 第&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;个月剩余贷款本金为&lt;code class=&quot;highlighter-rouge&quot;&gt;an&lt;/code&gt;, 则每个月还款本金为&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;, 详情见下表:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;第n个月&lt;/th&gt;
      &lt;th&gt;已还本金&lt;/th&gt;
      &lt;th&gt;剩余贷款本金(an)&lt;/th&gt;
      &lt;th&gt;当月应还本金&lt;/th&gt;
      &lt;th&gt;当月应还利息&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a1*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a2*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m)*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2*a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a3&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m*2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a3*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m*2)*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(n-1)*a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;an&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m*(n-1)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;an*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m*(n-1))*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(m-1)*a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;am&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a-a/m*(m-1)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a/m&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;am*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-a/m*(m-1))*i&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;总利息&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a1+a2+..+am)*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(ma-a/m*(m(m-1)/2))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(m+1)*a*i/2 &lt;/code&gt;, 等同于:总利息=&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;贷款总额*m-月供本金*[m*(m-1)/2]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*贷款利率&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;等额本息&lt;/h2&gt;

&lt;p&gt;等额本息的特点是每个月还款总金额一样, 每个月还一样多的钱, 其中的本金比例越来越大, 利息比例越来越小&lt;/p&gt;

&lt;p&gt;设贷款金额为&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, 还款总月数为&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, 每月还款额为&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;(包括本息), 还款总利息为&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;, 推导方法如下:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每月还款&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;共还&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;个月结束, 扣掉贷款本金&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 则总利息&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;应有:&lt;code class=&quot;highlighter-rouge&quot;&gt;Y=m*b-a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;每个月还款的利息累加得到的利息总和&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;应该与上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;相等, 每个月利息如下:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;第一个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第二个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-(b-a*i))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a+a*i-b)*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;第三个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;(a-(b-a*i)-(b-(b+(a*i－b)*(1＋i))))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;(a+a*i-b + (a*i-b)*(1+i))*i&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)^2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第四个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)^3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;个月利息为:&lt;code class=&quot;highlighter-rouge&quot;&gt;b+(a*i－b)*(1＋i)^(m-1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;个月的利息总和:&lt;code class=&quot;highlighter-rouge&quot;&gt;Y = m*b + (a*i－b)*((1＋i)^m-1)/i)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;两种方式计算出来的总利息应该一样,即有等式:&lt;code class=&quot;highlighter-rouge&quot;&gt;m*b-a = m*b + (a*i－b)*((1＋i)^m-1)/i)&lt;/code&gt;, 化简为:&lt;code class=&quot;highlighter-rouge&quot;&gt;1-a = (a*i－b)*(1＋i)^m&lt;/code&gt;求得:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;月均还款:&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;＝&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i*(1＋i)^m/((1+i)^m－1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;总利息:&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;＝ &lt;code class=&quot;highlighter-rouge&quot;&gt;m*a*i*(1＋i)^m/((1＋i)^m－1)－a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;信用卡分期&lt;/h2&gt;

&lt;p&gt;最具欺骗性的就是信用卡分期了. 信用卡分期是直接按照借款总额和利率一次性计算出利息, 平均到每个月还款. 但实际上占用的银行本金随着每个月的还款已经逐渐变少了, 所以还一开始计算出的利息对于借款人来说并不划算.&lt;/p&gt;

&lt;p&gt;举个例子, 比如信用卡月利率是&lt;code class=&quot;highlighter-rouge&quot;&gt;0.6%&lt;/code&gt;, 即年利率&lt;code class=&quot;highlighter-rouge&quot;&gt;7.2%&lt;/code&gt;, 借了10w, 分12个月还, 则每个月还款为: &lt;code class=&quot;highlighter-rouge&quot;&gt;10000*(1+0.072)/12=8933.33&lt;/code&gt;,
其中利息有&lt;code class=&quot;highlighter-rouge&quot;&gt;10000*0.6%=600&lt;/code&gt;, 本金有&lt;code class=&quot;highlighter-rouge&quot;&gt;10000/12=8333.33&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;实际年利率应该这么计算, 第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;用了一个月, 第二个&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;用了2个月, … , 第十二个&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;用了12个月, 相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;8333.33&lt;/code&gt;总共借用了78个月, 实际月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;100000*7.2%/78/8333.33=1.1%&lt;/code&gt;, 实际年利率大约为:&lt;code class=&quot;highlighter-rouge&quot;&gt;13.29%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;设信用卡分期总金额为&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, 月利率为&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, 分期期数为&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, 则:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;还款总利息&lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i*n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;每月还款额(包括本息)&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a/n+a*i&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;实际月利率&lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a*i*n/(n*(n+1)/2)/(a/n)&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;2*n*i/(n+1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;实际年利率&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;12*r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 25 May 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E6%B1%82%E7%9F%A5%E6%84%9F%E6%82%9F/2016-05-25-%E5%90%84%E7%A7%8D%E8%BF%98%E6%AC%BE%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E6%B1%82%E7%9F%A5%E6%84%9F%E6%82%9F/2016-05-25-%E5%90%84%E7%A7%8D%E8%BF%98%E6%AC%BE%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3.html</guid>
        
        <category>理财</category>
        
        
        <category>求知感悟</category>
        
      </item>
    
      <item>
        <title>HBase Shell命令总结</title>
        <description>&lt;p&gt;HBase Shell命令总结, 便于查阅&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#namespace&quot;&gt;namespace&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;常用命令&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#namespace-1&quot;&gt;基于namespace的授权操作&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shell-&quot;&gt;shell 命令总结表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;namespace&quot;&gt;namespace&lt;/h2&gt;

&lt;p&gt;表名&lt;code class=&quot;highlighter-rouge&quot;&gt;ns:table1&lt;/code&gt;中冒号前面的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;, 它可以在逻辑上隔离数据, 也可以对不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;进行不同授权&lt;br /&gt;
HBase系统默认定义了两个缺省的namespace&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hbase&lt;/code&gt;: 系统命名空间, 用于包含hbase的内部表, 包括namespace和meta表&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;: 用户建表时未指定namespace的表都创建在此&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;常用命令&lt;/h3&gt;

&lt;p&gt;下面是对于&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;的一些操作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建: &lt;code class=&quot;highlighter-rouge&quot;&gt;create_namespace &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除: &lt;code class=&quot;highlighter-rouge&quot;&gt;drop_namespace &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;查看所有: &lt;code class=&quot;highlighter-rouge&quot;&gt;list_namespace&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;查看某个: &lt;code class=&quot;highlighter-rouge&quot;&gt;describe_namespace &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;查看namespace下的表: &lt;code class=&quot;highlighter-rouge&quot;&gt;list_namespace_tables &#39;ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在namespace下创建表: &lt;code class=&quot;highlighter-rouge&quot;&gt;create &#39;ns:testtable&#39;, &#39;fm1&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改属性: &lt;code class=&quot;highlighter-rouge&quot;&gt;alter_namespace &#39;ns&#39;, {METHOD =&amp;gt; &#39;set&#39;, &#39;PROPERTY_NAME&#39; =&amp;gt; &#39;PROPERTY_VALUE&#39;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;namespace-1&quot;&gt;基于namespace的授权操作&lt;/h3&gt;

&lt;p&gt;具备Create权限的namespace Admin可以对表创建和删除、生成和恢复快照&lt;br /&gt;
具备Admin权限的namespace Admin可以对表splits或major compactions&lt;br /&gt;
RWXCA&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;授权&lt;code class=&quot;highlighter-rouge&quot;&gt;userA&lt;/code&gt;用户对&lt;code class=&quot;highlighter-rouge&quot;&gt;test_ns&lt;/code&gt;的写权限: &lt;code class=&quot;highlighter-rouge&quot;&gt;grant &#39;userA&#39; &#39;W&#39; &#39;@test_ns&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;回收&lt;code class=&quot;highlighter-rouge&quot;&gt;userA&lt;/code&gt;用户对&lt;code class=&quot;highlighter-rouge&quot;&gt;test_ns&lt;/code&gt;的所有权限: &lt;code class=&quot;highlighter-rouge&quot;&gt;revoke &#39;userA&#39;&#39;@test_ns&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;hbase-site.xml&lt;/code&gt;在HBase中启用授权机制:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.security.authorization&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.coprocessor.master.classes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.apache.hadoop.hbase.security.access.AccessController&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.coprocessor.region.classes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.AccessController&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;shell-&quot;&gt;shell 命令总结表&lt;/h2&gt;

&lt;p&gt;在hbase shell中直接敲命令会给出说明，并有很多例子, 一看就知道怎么用了&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;shell 命令&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看所有表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;describe&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;描述表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;count&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;统计表中行数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;create&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;alter&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;修改列族模式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;drop&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exists&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;测试表是否存在&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;disable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;使表无效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;enable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;使表有效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;put&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;插入数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;incr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;增加表、行或列的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;get&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;scan&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看批量数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delete&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除表行列对应的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;deleteall&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除指定行的所有元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;shutdown&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;关闭HBase集群(不同于exit)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;truncate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;重新创建指定表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tools&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列出HBase支持的工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;status&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;返回HBase集群状态&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;version&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查看hbase版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;推出HBase shell&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-04-12-HBase-Shell%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AF/2016-04-12-HBase-Shell%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html</guid>
        
        <category>HBase</category>
        
        
        <category>点滴积累</category>
        
      </item>
    
  </channel>
</rss>
