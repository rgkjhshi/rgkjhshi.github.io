<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆水行舟</title>
    <description>Michael King&#39;s Blog</description>
    <link>http://loveshisong.cn/</link>
    <atom:link href="http://loveshisong.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Nov 2016 18:12:50 +0800</pubDate>
    <lastBuildDate>Thu, 03 Nov 2016 18:12:50 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Spring Boot中的日志</title>
        <description>&lt;p&gt;这里所说的配置是指&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件这样的配置&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;日志的配置&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;日志配置文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;输出到日志文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;日志级别&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;日志格式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;如何写自己的日志配置文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;日志的配置&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;支持各种日志工具, 最常用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Logback&lt;/code&gt;. 我们可以对日志进行配置, 由于日志是在&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;创建之前初始化的, 所以对日志的配置不能通过在&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;配置类上使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySources&lt;/code&gt;注解加载进来. 可以使用系统变量或者外部配置&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;来加载.  配置文件中可以指定这些属性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.config=&lt;/code&gt;: 配置文件的位置, 比如:&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:logback.xml&lt;/code&gt;(logback的配置文件)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file=&lt;/code&gt;: 日志文件名, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.log&lt;/code&gt;, 输出日志到当前目录的&lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.log&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path=&lt;/code&gt;: 日志文件位置, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log&lt;/code&gt;, 输出日志到&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/spring.log&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.level.*=&lt;/code&gt;: 日志等级, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.level.org.springframework=DEBUG&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.console=&lt;/code&gt;: 输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;的日志格式, 只有logback有效&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.file=&lt;/code&gt;: 输出到文件的日志格式, 只有logback有效&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.level=&lt;/code&gt;: 日志级别的格式, 默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;%5p&lt;/code&gt;. 只有logback有效&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.exception-conversion-word=%wEx&lt;/code&gt;: log异常时使用哪个格式转换器(&lt;code class=&quot;highlighter-rouge&quot;&gt;base.xml&lt;/code&gt;中定义了三个&lt;code class=&quot;highlighter-rouge&quot;&gt;conversionRule&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.register-shutdown-hook=false&lt;/code&gt; # Register a shutdown hook for the logging system when it is initialized(没用过)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面这些属性配置, 一般写在&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中, 这样会被加载到&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Environment&lt;/code&gt;中, 为了方便其他地方使用, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Environment&lt;/code&gt;中的一些属性也被转换到了系统属性(&lt;code class=&quot;highlighter-rouge&quot;&gt;System property&lt;/code&gt;)里, 下面是这些属性于系统属性的对应关系:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Spring Environment&lt;/th&gt;
      &lt;th&gt;System Property&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.exception-conversion-word&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_EXCEPTION_CONVERSION_WORD&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_FILE&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_PATH&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.console&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONSOLE_LOG_PATTERN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FILE_LOG_PATTERN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.level&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_LEVEL_PATTERN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PID&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PID&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-1&quot;&gt;日志配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.config&lt;/code&gt;属性用于指定日志配置文件的位置, 以&lt;code class=&quot;highlighter-rouge&quot;&gt;logback&lt;/code&gt;为例.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果不指定该属性, &lt;code class=&quot;highlighter-rouge&quot;&gt;logback&lt;/code&gt;本身会默认寻找&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下的配置文件, 寻找顺序为:
&lt;code class=&quot;highlighter-rouge&quot;&gt;logback.groovy &amp;gt; logback-test.xml &amp;gt; logback.xml&lt;/code&gt;;  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;又加了俩默认的配置文件:&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-spring.groovy &amp;gt; logback-spring.xml&lt;/code&gt;, 这俩优先级低于上面的那三个. 推荐指定使用&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-spring.xml&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;不指定配置文件时, 寻找上面的配置文件, 制定了则加载指定的配置文件. 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.config=classpath:logback-abc.xml&lt;/code&gt;, 则会加载&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-abc.xml&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy&lt;/code&gt;需要添加&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy&lt;/code&gt;的包依赖:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.groovy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;groovy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4.7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;输出到日志文件&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;这俩属性用于指定日志文件输出的位置. 默认情况下&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;只会把日志输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;, 添加了这两个属性(任意一个即可), 才会把日志输出到文件里.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;两个属性都不指定, 只输出到控制台, 不输出到文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;指定文件, 可以是相对路径, 可以是绝对路径.  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;指定目录, 若制定了目录, 则会输出日志到指定目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.log&lt;/code&gt;文件中&lt;/li&gt;
  &lt;li&gt;两个同时指定, 以&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;为准&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包里关于&lt;code class=&quot;highlighter-rouge&quot;&gt;logback&lt;/code&gt;的配置&lt;code class=&quot;highlighter-rouge&quot;&gt;file-appender.xml&lt;/code&gt;中定义了文件输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;${LOG_FILE}&lt;/code&gt;, 在同一包下的&lt;code class=&quot;highlighter-rouge&quot;&gt;base.xml&lt;/code&gt;文件里有这么一句:&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&amp;gt;&lt;/code&gt;. 稍微分析下就知道为什么以&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;为主, 指定&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;时会输出到该目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.log&lt;/code&gt;文件里了.&lt;br /&gt;
注意上面语句中多次嵌套使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;${key:-defaultVlaue}&lt;/code&gt;形式&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;日志级别&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.level.*&lt;/code&gt;用于指定日志级别, 比如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意: 该属性配置的日志级别优先级要高于日志配置文件(如&lt;code class=&quot;highlighter-rouge&quot;&gt;logback.xml&lt;/code&gt;), 即日志配置文件中与该属性定义的日志级别不一致时, 以该属性定义的级别为准.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;日志格式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ogging.pattern.console&lt;/code&gt;指定在控制台输出的日志格式;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ogging.pattern.file&lt;/code&gt;指定在文件输出的日志格式;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ogging.pattern.level&lt;/code&gt;指定日之级别(&lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG, INFO, ERROR&lt;/code&gt;等)的格式, 默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;%5p&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些属性不指定时, 默认的格式在&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包中的&lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultLogbackConfiguration&lt;/code&gt;类里有定义, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults.xml&lt;/code&gt;里也有定义&lt;br /&gt;
格式大致为:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-11-02 21:59:11.366  INFO 11969 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat&lt;/code&gt;&lt;br /&gt;
依次为: &lt;code class=&quot;highlighter-rouge&quot;&gt;时间 日志级别 PID --- [线程名] 日志名 : 日志内容&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;如何写自己的日志配置文件&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包里有四个相关的&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;文件:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console-appender.xml&lt;/code&gt;: 定义了控制台输出的日志格式&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;file-appender.xml&lt;/code&gt;: 定义了一个日志的文件输出格式(指定每个文件&lt;code class=&quot;highlighter-rouge&quot;&gt;10M&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults.xml&lt;/code&gt;: 定义了一些日志级别&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base.xml&lt;/code&gt;: 包含了上面3个文件, 并指定了&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;的输出级别和输出方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们的日志配置线上不需要输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;, 日志文件的大小一般也不会是&lt;code class=&quot;highlighter-rouge&quot;&gt;10M&lt;/code&gt;, 所以上面那几个文件, 我们可以参考.&lt;/p&gt;

&lt;p&gt;比如我们可以这样定义&lt;code class=&quot;highlighter-rouge&quot;&gt;logback.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 这里面定义了 CONSOLE_LOG_PATTERN, FILE_LOG_PATTERN 等日志格式, 还定义了一些日志级别 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;include&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org/springframework/boot/logging/logback/defaults.xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 命令行输出, 一般线上不用 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CONSOLE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;${CONSOLE_LOG_PATTERN}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LOG_FILE_NAME&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myLog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 定义一个属性, 下面用 --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 输出格式 appender --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 可自己定义 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;${FILE_LOG_PATTERN}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 输出格式也可自己定义 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- error 日志 appender --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR_FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}_error.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;level&amp;gt;&lt;/span&gt;ERROR&lt;span class=&quot;nt&quot;&gt;&amp;lt;/level&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;${FILE_LOG_PATTERN}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}_error.%d{yyyy-MM-dd}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 定义日志级别, 也可在应用配置中指定 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.project&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INFO&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.web&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CONSOLE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 线上不需要输出到 CONSOLE --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR_FILE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;上例中, 日志会输出到文件&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX.log&lt;/code&gt;, 错误日志单独输出到一个&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_error.log&lt;/code&gt;文件, 日志文件并每天打包一次.  &lt;/li&gt;
  &lt;li&gt;上例中, 应用配置(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;)里用于指定日志文件名文件位置的属性(&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;)将不起作用, 因为例子里没有用到这些属性, 其他配置(比如日志级别)仍有作用.&lt;/li&gt;
  &lt;li&gt;上例中的哪个&lt;code class=&quot;highlighter-rouge&quot;&gt;${catalina.base}&lt;/code&gt;算是一个系统变量, 表示应用所在目录, 文件名(位置)完全可以自己指定, 也可参考&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包里的使用方式.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 03 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-03-Spring-Boot%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-03-Spring-Boot%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring Boot中的配置</title>
        <description>&lt;p&gt;这里所说的配置是指&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件这样的配置&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;配置的方式及优先级&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;优先级举例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;命令行参数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#springapplicationjson&quot;&gt;SPRING_APPLICATION_JSON&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#applicationproperties&quot;&gt;配置文件:&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;随机变量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;变量引用&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;多环境配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;自定义配置&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;传统的配置加载方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;类型安全的配置加载方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#configurationproperties&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;的优缺点&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#yaml&quot;&gt;使用YAML配置&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#applicationyml&quot;&gt;加载&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#yaml-1&quot;&gt;加载自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;配置的方式及优先级&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;允许通过&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件, &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;文件, &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;变量, 命令行参数等进行配置. 属性值可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;注入到bean中并通过Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;访问, 或通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;直接绑定到对象上.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;所提供的配置优先级从高到低如下所示:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;devtools&lt;/code&gt;的全局配置(&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.spring-boot-devtools.properties&lt;/code&gt;文件)(当使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;devtools&lt;/code&gt;时)&lt;/li&gt;
  &lt;li&gt;Test类上通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@TestPropertySource&lt;/code&gt;声明的属性文件&lt;/li&gt;
  &lt;li&gt;Test类上通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest#properties&lt;/code&gt;声明的属性&lt;/li&gt;
  &lt;li&gt;命令行参数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SPRING_APPLICATION_JSON&lt;/code&gt;属性, 环境变量或系统属性中的JSON&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletConfig&lt;/code&gt;初始化参数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;初始化参数&lt;/li&gt;
  &lt;li&gt;来自于&lt;code class=&quot;highlighter-rouge&quot;&gt;java:comp/env&lt;/code&gt;的JNDI属性&lt;/li&gt;
  &lt;li&gt;Java系统属性(&lt;code class=&quot;highlighter-rouge&quot;&gt;System.getProperties()&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;操作系统环境变量&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;RandomValuePropertySource&lt;/code&gt;生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;random.*&lt;/code&gt;属性&lt;/li&gt;
  &lt;li&gt;jar包外的&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application-{profile}.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;jar包内的&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application-{profile}.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;jar包外的应用程序配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;jar包内的应用程序配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;配置类(&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;类)上的通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource&lt;/code&gt;注解声明的属性文件&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication.setDefaultProperties&lt;/code&gt;声明的默认属性&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;优先级举例&lt;/h3&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:application.properties&lt;/code&gt;文件里有个&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;变量(假设将它打成了jar包), 当在一个新的环境中运行时,
可以通过在jar包外(即新环境的的&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下)提供一个&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;文件, 重新设置&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;变量的值.
甚至在测试的时候,可以通过优先级更高的命令行参数指定&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;的值(&lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar app.jar --name=&quot;Spring&quot;&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;命令行参数&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;会把所有的命令行参数(以&lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt;开头, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;--server.port=9000&lt;/code&gt;)转化为属性加载到Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 命令行参数的优先级高于配置文件&lt;/p&gt;

&lt;p&gt;如果不想让命令行参数添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication.setAddCommandLineProperties(false)&lt;/code&gt;设置&lt;/p&gt;

&lt;h3 id=&quot;springapplicationjson&quot;&gt;SPRING_APPLICATION_JSON&lt;/h3&gt;
&lt;p&gt;上面第5条中说的&lt;code class=&quot;highlighter-rouge&quot;&gt;SPRING_APPLICATION_JSON&lt;/code&gt;属性, 可以在命令行中指定&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ SPRING_APPLICATION_JSON=&#39;{&quot;foo&quot;:{&quot;bar&quot;:&quot;spam&quot;}}&#39; java -jar myapp.jar  // 环境变量形式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这样就相当于在Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中添加了&lt;code class=&quot;highlighter-rouge&quot;&gt;foo.bar=spam&lt;/code&gt;.&lt;br /&gt;
也可以像下面这些方式提供:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -Dspring.application.json=&#39;{&quot;foo&quot;:&quot;bar&quot;}&#39; -jar myapp.jar   // 系统变量
$ java -jar myapp.jar --spring.application.json=&#39;{&quot;foo&quot;:&quot;bar&quot;}&#39;   // 命令行参数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或以JNDI变量&lt;code class=&quot;highlighter-rouge&quot;&gt;java:comp/env/spring.application.json&lt;/code&gt;提供&lt;/p&gt;

&lt;p&gt;其实上面介绍的这几条优先级比较高的配置, 实际并不太常用. 命令行在测试的时候用的还算比较多&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;applicationproperties&quot;&gt;配置文件:&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;默认会加载配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中的配置并加到Spring &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 该文件的加载有个优先级: &lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:/config/application.properties&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:/application.properties&lt;/code&gt;即在&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:/config/&lt;/code&gt;下的配置文件优先级比较高. 也可以使用YAML文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;)来替代properties文件.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;被称为&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;的外露配置, 文件中有很多属性可用来配置整个应用, 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;server.port=8080&lt;/code&gt;等; 你可以通过指定这些属性值来配置应用.&lt;/p&gt;

&lt;p&gt;配置文件的名字和位置, 也可自定义, 可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.name&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.location&lt;/code&gt;环境属性来指定, 这两个属性使用的时期非常早, 所以一般会在命令行或者系统属性或环境变量中来指定, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar myproject.jar --spring.config.name=myproject
$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;若&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.location&lt;/code&gt;指定的是一个目录, 则应该以&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;结尾, 并且使用该目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.name&lt;/code&gt;指定的配置文件&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;随机变量&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RandomValuePropertySource&lt;/code&gt;可以注入一些随机变量, 可产生&lt;code class=&quot;highlighter-rouge&quot;&gt;integer, long, string, uuid&lt;/code&gt;等类型的随机值, 例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my.secret=${random.value}
my.number=${random.int}
my.bignumber=${random.long}
my.uuid=${random.uuid}
my.number.less.than.ten=${random.int(10)}
my.number.in.range=${random.int[1024,65536]}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;random.int*&lt;/code&gt;的语法为&lt;code class=&quot;highlighter-rouge&quot;&gt;OPEN value (,max) CLOSE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPEN,CLOSE&lt;/code&gt;是字符, &lt;code class=&quot;highlighter-rouge&quot;&gt;value,max&lt;/code&gt;是整数. 如果有&lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;则最小值是&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;最大值是&lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;(不包括max).&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;变量引用&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中定义的变量已经被&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;过滤, 所以可以引用前面定义过的变量, 比如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.name=MyApp
app.description=${app.name} is a Spring Boot application
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;多环境配置&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;从配置的优先级的第12~15条可以看出, &lt;code class=&quot;highlighter-rouge&quot;&gt;application-{profile}.properties&lt;/code&gt;的优先级要高于&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;这个&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;就用于区分是&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;环境还是&lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;环境还是&lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt;环境. 如果没有被指定, 默认会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;application-default.properties&lt;/code&gt;配置.&lt;/li&gt;
  &lt;li&gt;至于到底启用哪个&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;, 可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中通过属性&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.profiles.active=profile&lt;/code&gt;来指定, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;配置文件中指定该属性不起作用.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子, &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中有个默认属性&lt;code class=&quot;highlighter-rouge&quot;&gt;server.port=8080&lt;/code&gt;用于指定服务的端口. 假设有下面的文件, 文件内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// application.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;profiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// application-default.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8081&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// application-dev.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8082&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// application-prod.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8083&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;假设&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中不指定&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.profiles.active&lt;/code&gt;属性, 则&lt;code class=&quot;highlighter-rouge&quot;&gt;application-default.properties&lt;/code&gt;中的8081端口生效, 若指定&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.profiles.active=prod&lt;/code&gt;, 则8083端口生效. 访问8080端口都会找不到服务&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-6&quot;&gt;自定义配置&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;默认加载&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中的配置, 这个文件中的默认属性相当多…&lt;br /&gt;
如果我们要加载自己的配置, 比如下面的数据库配置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.driver=MySQL
db.username=username
db.password=123456
db.tables[0]=table1
db.tables[1]=table2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以把这些属性直接放到&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中, 但极力不推荐这样.&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;传统的配置加载方式&lt;/h3&gt;
&lt;p&gt;我们一般都是定义自己的配置文件, 比如把这些属性放到&lt;code class=&quot;highlighter-rouge&quot;&gt;db.properties&lt;/code&gt;文件. 然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource&lt;/code&gt;加载配置文件, 然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@Value(&quot;${key:defaultVlaue}&quot;)&lt;/code&gt;的形式进行配置, 如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PropertySource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DBConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.driver}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.username}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.password}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.tables[0]}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.tables[1]}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注: &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件默认是按照unicode加载, 若有中文, 一定要指定编码&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource(value = &quot;db.properties&quot;, encoding = &quot;UTF-8&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;类型安全的配置加载方式&lt;/h3&gt;
&lt;p&gt;上面这种方式在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Framework&lt;/code&gt;普遍使用, 但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;提供了更高级的使用配置的方式,类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;DataBinder&lt;/code&gt;工具. 还是&lt;code class=&quot;highlighter-rouge&quot;&gt;db.properties&lt;/code&gt;文件, 我们可以这样进行数据绑定:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:db.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DBConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;最上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;@Data&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Lombok&lt;/code&gt;包中用于生成&lt;code class=&quot;highlighter-rouge&quot;&gt;getter, setter&lt;/code&gt;等的注解, pom依赖为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.16.10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不用这个包也可以, 那就需要自己写 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt;方法了&lt;/p&gt;

&lt;p&gt;另外注意此时该类上是加了&lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt;注解的, 这样才会被当作Spring的Bean.&lt;/p&gt;

&lt;p&gt;其实不在&lt;code class=&quot;highlighter-rouge&quot;&gt;DBConfig&lt;/code&gt;上加&lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt;注解也有办法, 通常&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;是和&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableConfigurationProperties&lt;/code&gt;一起使用的, &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableConfigurationProperties&lt;/code&gt;注解需要加到配置类上.
像下面这样使用:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 配置类&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 代码&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 加载属性的类(主意这个类没有加 @Component 注解)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:db.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DBConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 代码&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种形式, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;bean将会以名字&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;prefix&amp;gt;-&amp;lt;fqn&amp;gt;&lt;/code&gt;注册, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt;就是注解中指定的前缀, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fqn&amp;gt;&lt;/code&gt;是该类的全类名. 上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;DBConfig&lt;/code&gt;将会被注册成名字为&lt;code class=&quot;highlighter-rouge&quot;&gt;db-com.example.myproject.config.DBConfig&lt;/code&gt;的bean&lt;/p&gt;

&lt;h3 id=&quot;configurationproperties&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;的优缺点&lt;/h3&gt;
&lt;p&gt;优点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;结构化, 对于结构化的配置, 优势明显&lt;/li&gt;
  &lt;li&gt;松散绑定, &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;属性名和&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties Beans&lt;/code&gt;属性名不需要精确匹配, 比如驼峰&lt;code class=&quot;highlighter-rouge&quot;&gt;person.firstName&lt;/code&gt;, 虚线&lt;code class=&quot;highlighter-rouge&quot;&gt;pserson.first-name&lt;/code&gt;, 下划线&lt;code class=&quot;highlighter-rouge&quot;&gt;person.first_name&lt;/code&gt;, 大写&lt;code class=&quot;highlighter-rouge&quot;&gt;PERSON_FIRST_NAME&lt;/code&gt;都能正确区分绑定&lt;/li&gt;
  &lt;li&gt;可校验, 可以在属性上添加&lt;code class=&quot;highlighter-rouge&quot;&gt;@NotNull&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@NotEmpty&lt;/code&gt;等(JSR-303)注解进行校验&lt;/li&gt;
  &lt;li&gt;可生成&lt;code class=&quot;highlighter-rouge&quot;&gt;meta-data&lt;/code&gt;文件(可被IDE使用)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不支持&lt;code class=&quot;highlighter-rouge&quot;&gt;SpEL&lt;/code&gt;表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;yaml&quot;&gt;使用YAML配置&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;的超集, 有一定的结构, &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;提供了对&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;的支持.
使用&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置文件需要确保在classpath中引入了&lt;code class=&quot;highlighter-rouge&quot;&gt;SnakeYAML&lt;/code&gt;包, &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter&lt;/code&gt;中已经包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;SnakeYAML&lt;/code&gt;包, 也可以主动显式地添加pom依赖:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.yaml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;snakeyaml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.17&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;applicationyml&quot;&gt;加载&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;会自动加载这个配置, 因此效果跟&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;一样。&lt;br /&gt;
Spring 提供了两个方便的类加载&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;YamlPropertiesFactoryBean&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;Properties&lt;/code&gt;加载, &lt;code class=&quot;highlighter-rouge&quot;&gt;YamlMapFactoryBean&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt;加载;&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;YamlPropertySourceLoader&lt;/code&gt;可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;PropertySource&lt;/code&gt;加到Spring &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 这样就可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;的方式进行注入了.&lt;/p&gt;

&lt;p&gt;比如下面的写法是一样的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// yml文件
environments:
    dev:
        url: http://dev.bar.com
        name: Developer Setup
    prod:
        url: http://foo.bar.com
        name: My Cool App
my:
    servers:
        - dev.bar.com
        - foo.bar.com
// properties文件
environments.dev.url=http://dev.bar.com
environments.dev.name=Developer Setup
environments.prod.url=http://foo.bar.com
environments.prod.name=My Cool App
my.servers[0]=dev.bar.com
my.servers[1]=foo.bar.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;yaml-1&quot;&gt;加载自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置&lt;/h3&gt;
&lt;p&gt;遗憾的是, &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;不能像&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件一样使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource&lt;/code&gt;注解的方式加载.&lt;br /&gt;
加载自定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;文件可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;注解来加载, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties(prefix=&quot;db&quot;, locations = &quot;classpath:db.yml&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-02-Spring-Boot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-02-Spring-Boot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>使用Spring Boot快速构建应用</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;于2014年4月发布1.0.0版本, 用于创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring 4.0&lt;/code&gt;项目, 简化了Spring中繁琐的配置, 提高了开发效率&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot&quot;&gt;Spring Boot简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cligroovy&quot;&gt;CLI和Groovy示例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;快速创建一个应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;运行容器的方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;依赖管理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;目录结构及配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot简介&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;致力于快速构建应用, 去掉了&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;的繁琐配置, 使创建Spring应用就像写一个&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;函数一样方便.&lt;/li&gt;
  &lt;li&gt;直接嵌入&lt;code class=&quot;highlighter-rouge&quot;&gt;Tomcat&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;Jetty&lt;/code&gt;服务器, 不需要部署 WAR 文件, 可以直接&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;无&lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;配置(也支持导入XML配置)&lt;/li&gt;
  &lt;li&gt;构建&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring4&lt;/code&gt;应用, 最好使用高版本环境(&lt;code class=&quot;highlighter-rouge&quot;&gt;JDK8&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Maven3.2+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet3.0+&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;提供了maven插件, 可把应用及所需要的所有依赖包内嵌到一个jar包中&lt;/li&gt;
  &lt;li&gt;提供了一个命令行工具&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot CLI&lt;/code&gt;(&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/1.4.1.RELEASE/reference/htmlsingle/#getting-started-installing-spring-boot&quot;&gt;安装方法&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy&lt;/code&gt;编程语言&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cligroovy&quot;&gt;CLI和Groovy示例&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot CLI&lt;/code&gt;是一个命令行工具, 可以快速搭建Spring原型, 支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy&lt;/code&gt;脚本.&lt;br /&gt;
我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CLI&lt;/code&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy&lt;/code&gt;脚本创建一个最简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;应用, 创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;app.groovy&lt;/code&gt;文件, 内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThisWillActuallyRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后在shell中运行下面命令:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ spring run app.groovy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;则已经运行了一个Spring web应用(首次运行需要下载依赖包, 比较慢), 访问&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:8080&lt;/code&gt;就会看到输出内容&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;快速创建一个应用&lt;/h2&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Maven&lt;/code&gt;创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;应用, &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.example.project&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring_boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 继承spring-boot-starter-parent是最快的方式, 后面有不继承该怎么写 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 这一个依赖就够了 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn dependency:tree&lt;/code&gt;来看看都用到了哪些jar包  &lt;/p&gt;

&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java/&lt;/code&gt;目录下创建一个类&lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java/Example.java&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;到此整个应用就创建完毕, 可以直接运行&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;方法启动容器, 访问&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:8080&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;运行容器的方式&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;像上面那样直接运行&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;方法&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn spring-boot:run&lt;/code&gt;命令运行&lt;/li&gt;
  &lt;li&gt;创建可执行&lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt;包运行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过插件&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-maven-plugin&lt;/code&gt;可将应用及依赖打成&lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt;包, 如果没有继承&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-parent&lt;/code&gt;则需要主动添加一下这个插件, 并且parent中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;executions&amp;gt;&lt;/code&gt;需要自己进行配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;repackage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过命令&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn package&lt;/code&gt;打包, 将会得到&lt;code class=&quot;highlighter-rouge&quot;&gt;target/spring_boot-1.0.jar&lt;/code&gt;文件, 可通过命令&lt;code class=&quot;highlighter-rouge&quot;&gt;jar tvf target/myproject-1.0.jar&lt;/code&gt;查看该jar包的结构. 除此之外, 还有个文件&lt;code class=&quot;highlighter-rouge&quot;&gt;target/spring_boot-1.0.jar.original&lt;/code&gt;, 这是&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;重新打包之前, &lt;code class=&quot;highlighter-rouge&quot;&gt;Maven&lt;/code&gt;创建的原始jar文件&lt;/p&gt;

&lt;p&gt;使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar target/spring_boot-1.0.jar&lt;/code&gt;即可运行&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;依赖管理&lt;/h2&gt;
&lt;p&gt;上面都是以继承&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-parent&lt;/code&gt;的形式进行一来管理, 这个&lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt;里有如下内容:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;指定了Java的版本, 和编码(不继承parent可自己指定)&lt;/li&gt;
  &lt;li&gt;
    &lt;resource.delimiter&gt;配置, 除了接受原有的Spring形式的`${…​}`, 还支持了Maven的`@..@`形式(不继承parent可自己指定)
&lt;/resource.delimiter&gt;
  &lt;/li&gt;
  &lt;li&gt;包依赖管理, 继承自&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-dependencies&lt;/code&gt;(不继承parent的形式就是引入这个pom)&lt;/li&gt;
  &lt;li&gt;插件配置(不继承parent需要自己配置)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此, 如果不继承&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-parent&lt;/code&gt;, 我们的pom文件可以这么写:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;resource.delimiter&amp;gt;&lt;/span&gt;@&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource.delimiter&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- delimiter that doesn&#39;t clash with Spring ${} placeholders --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;${java.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;${java.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;tomcat.version&amp;gt;&lt;/span&gt;7.0.57&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tomcat.version&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 配置你的tomcat版本 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-dependencies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 如果是通过parent方式继承spring-boot-starter-parent则不用配置此插件 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;repackage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;目录结构及配置&lt;/h2&gt;
&lt;p&gt;官方建议项目有一个标准的目录结构, 就像其他Spring项目一样, 包名采用一个反转的域名, 结构类似于下面这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;com.example.myproject
         +- Application.java
         |
         +- service
         |   +- CustomerService.java
         |
         +- controller
             +- CustomerController.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;Application.java&lt;/code&gt;的内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;该项目中&lt;code class=&quot;highlighter-rouge&quot;&gt;Application.java&lt;/code&gt;为main类, 将main类放到其他类所在包的顶层(&lt;code class=&quot;highlighter-rouge&quot;&gt;root package&lt;/code&gt;), 并将&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAutoConfiguration&lt;/code&gt;注解加main类上, 这样就隐式地定义了一个基础包扫描路径, 所以采用&lt;code class=&quot;highlighter-rouge&quot;&gt;root package&lt;/code&gt;时, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt;注解就不需要添加&lt;code class=&quot;highlighter-rouge&quot;&gt;basePackage&lt;/code&gt;属性了&lt;/p&gt;

&lt;p&gt;解释下这几个注解的意思:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;: 表示一个配置类, 类似于原来的一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAutoConfiguration&lt;/code&gt;: Spring Boot的自动配置会根据所添加的jar包依赖自动配置Spring应用, 通常项目中只有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAutoConfiguration&lt;/code&gt;注解, 并建议将它加到主配置类(&lt;code class=&quot;highlighter-rouge&quot;&gt;primary @Configuration&lt;/code&gt;)上&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt;: 包扫描路径, 采用&lt;code class=&quot;highlighter-rouge&quot;&gt;root package&lt;/code&gt;形式会自动收集&lt;code class=&quot;highlighter-rouge&quot;&gt;root package&lt;/code&gt;包下所有组件, 包括配置类(&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;类)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于平时配置&lt;code class=&quot;highlighter-rouge&quot;&gt;main类&lt;/code&gt;时, 频繁的一起使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration、@EnableAutoConfiguration、@ComponentScan&lt;/code&gt;这三个注解, 因此Spring Boot提供了一个简单的注解&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootApplication&lt;/code&gt;来代替这三个注解, 其效果与这三个注解一起使用的效果完全一样&lt;/p&gt;

&lt;p&gt;另外, 还有几个有用的用法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Import&lt;/code&gt;: 导入其他配置类&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ImportResource&lt;/code&gt;: 引入&lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;形式的配置&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAutoConfiguration(exclude={XXXConfiguration.class})&lt;/code&gt;排除某些配置, 若配置类不在&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;中, 可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;excludeName&lt;/code&gt;属性指定全限定名&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 30 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-10-30-%E4%BD%BF%E7%94%A8Spring-Boot%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-10-30-%E4%BD%BF%E7%94%A8Spring-Boot%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>动态代理</title>
        <description>&lt;p&gt;之前在&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-01-14-java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84.html&quot;&gt;java中的反射&lt;/a&gt; 一文中讲到&lt;code class=&quot;highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt;时就涉及到的JDK的动态代理, 后来在Spring中使用AOP的时候, 发现有的方法拦截不到, 才意识到, Spring的AOP默认是使用JDK动态代理实现的, 必须实现接口才可以拦截到, 因此又写了这边文章&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jdk&quot;&gt;JDK动态代理使用示例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cglib&quot;&gt;CGLib动态代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jdk&quot;&gt;JDK动态代理使用示例&lt;/h2&gt;
&lt;p&gt;JDK的动态代理是依赖于接口实现的,因此要先定义接口,然后在定义接口的实现类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Hello.java 定义接口&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// HelloImpl.java 接口的实现类&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 注意这里调用了另一个方法&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这个方法没有实现任何接口&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用JDK的动态代理, 还需要一个&lt;code class=&quot;highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt;接口的实现类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// JDKProxy.java 定义接口&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JDKProxy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InvocationHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 被代理对象&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JDKProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;before invoke&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;after invoke&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 获取通过JDK动态代理出来的对象&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInterfaces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;最后是测试类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// JDKProxyTest.java 定义接口&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JDKProxyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HelloImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JDKProxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JDKProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloProxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 无法把代理对象转换成 HelloImpl&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 调用代理对象的方法, 打印出before和after&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helloProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
         * 只会打印一次before和after
         * 虽然hello方法中调用了sayHello方法, 但调用的是被代理对象(target)的方法, 而不是代理对象(proxy)的方法
         * 所以写AOP拦截的时候要特别注意这里
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helloProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        proxy.test(); // proxy是无法调用test方法的, 因为接口中没有该方法, AOP拦截的时候也需要注意&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;cglib&quot;&gt;CGLib动态代理&lt;/h2&gt;
&lt;p&gt;JDK动态代理与CGLib动态代理均是实现Spring AOP的基础, CGLib使用的是字节码增强技术, 原理是创建被代理对象的一个子类, 并在子类中采用方法拦截的技术拦截所有父类方法的调用, 所以它不依赖于接口. 跟JDK动态代理对比, 被代理对象&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;在CGLib中相当于一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SuperClass&lt;/code&gt;, 而代理对象&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy&lt;/code&gt;相当于这个&lt;code class=&quot;highlighter-rouge&quot;&gt;SuperClass&lt;/code&gt;的一个子类.&lt;/p&gt;

&lt;p&gt;使用CGLib动态代理要用到的类有:&lt;code class=&quot;highlighter-rouge&quot;&gt;MethodInterceptor&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Enhancer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodProxy&lt;/code&gt;, 在之前&lt;a href=&quot;/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015-11-26-Spring%E7%9A%84AOP.html&quot;&gt;Spring的AOP&lt;/a&gt; 中已经提到过, Spring3.2以后已经把&lt;code class=&quot;highlighter-rouge&quot;&gt;cglib.jar&lt;/code&gt;包包含进了&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-core.jar&lt;/code&gt;. 所以这几个类可以直接使用Spring中提供的.&lt;/p&gt;

&lt;p&gt;代理类可以这样写:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// CGLibProxy.java 定义接口&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CGLibProxy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enhancer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * @param clazz 被代理对象对应的Class
     * @return 代理对象 proxy
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置需要被代理的类(被代理对象的类型)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSuperclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过字节码技术动态创建子类实例(代理对象)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodProxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//通过代理类调用父类中的方法&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invokeSuper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;after&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面是测试类:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// CGLibProxyTest.java 定义接口&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CGLibProxyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CGLibProxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGLibProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HelloImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloProxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 调用代理对象的方法, 打印出before和after&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helloProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
         * 打印两次before和after
         * hello方法中调用了sayHello方法, 两个方法都会被拦截到而执行代理对象的方法
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helloProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 调用代理对象的方法, 打印出before和after&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helloProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;JDK的动态代理是通过接口实现机制, CGLib的动态代理是利用字节码增强技术通过父类方法拦截机制.
CGLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高, 但是CGLib在创建代理对象时所花费的时间却比JDK多得多, 所以对于单例的对象, 无需频繁创建对象, 用CGLib合适, 反之, 使用JDK方式要更为合适一些. 同时, 由于CGLib由于是采用动态创建子类的方法, 对于&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;方法, 无法进行代理.&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-31-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-31-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html</guid>
        
        <category>Java</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Drools简单使用示例</title>
        <description>&lt;p&gt;本文不涉及&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;的原理和介绍, 仅通过简单例子演示怎么使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;.&lt;br /&gt;
另外, 各版本的文档可查看&lt;a href=&quot;http://docs.jboss.org/drools/release/&quot;&gt;官方资料&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;包依赖和目录结构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;简单示例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kmodulexml&quot;&gt;kmodule.xml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kie&quot;&gt;KIE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kmodule&quot;&gt;编码方式实现kmodule定义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;包依赖和目录结构&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;也提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;bom&lt;/code&gt;文件进行相关的包管理, 在maven项目中, &lt;code class=&quot;highlighter-rouge&quot;&gt;pom&lt;/code&gt;文件可以这样写:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.drools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;drools-bom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.kie&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;kie-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.drools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;drools-compiler&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;项目的目录结构是下面这样子的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    src
    |--com.test.drools
    |  |--DroolsTest.java
    resources
    |--META-INF
    |  |--kmodule.xml
    |--rules
    |  |--test.drl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;默认会加载&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;路径下的&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/kmodule.xml&lt;/code&gt;文件(稍后详述)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt;下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;rules/test.drl&lt;/code&gt;是规则文件, 也支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Excel&lt;/code&gt;即&lt;code class=&quot;highlighter-rouge&quot;&gt;xsl&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;简单示例&lt;/h2&gt;
&lt;p&gt;下面是一个简单的例子&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DroolsTest.java&lt;/code&gt;内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DroolsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 获取 drools 实现的 KieServices 实例&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieServices&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// kieServices 默认加载 classpath:META-INF/kmodule.xml 得到 KieContainer&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieContainer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKieClasspathContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过 kContainer 获取 kmodule.xml 中定义的 ksession&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ksession-rules&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 向 workingMemory 中加入一个对象&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kieSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通知规则引擎执行规则&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kieSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fireAllRules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/kmodule.xml&lt;/code&gt;内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;kmodule&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://jboss.org/kie/6.0.0/kmodule&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;kbase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kbase-rules&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;packages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ksession&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ksession-rules&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/kbase&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;kbase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kbase-process&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;packages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;process&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 这个没用到 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ksession&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ksession-process&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/kbase&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/kmodule&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rules/test.drl&lt;/code&gt;内容如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-drl&quot;&gt;package com.test.drools

rule &quot;hello&quot;
    when
        $name:String()
    then
        System.out.println(&quot;hello &quot; + $name);
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子运行的结果为在控制台输入:&lt;code class=&quot;highlighter-rouge&quot;&gt;hello Tom&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;kmodulexml&quot;&gt;kmodule.xml&lt;/h2&gt;
&lt;p&gt;这个&lt;code class=&quot;highlighter-rouge&quot;&gt;kmodule.xml&lt;/code&gt;的文件的定义非常简单, 下面解释下里面的内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kmodule&lt;/code&gt;: 里面可以包含多个&lt;code class=&quot;highlighter-rouge&quot;&gt;kbase&lt;/code&gt;, 例子中只包含了2个&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kbase&lt;/code&gt;: 有个&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;属性, 全局不能重名; &lt;code class=&quot;highlighter-rouge&quot;&gt;packages&lt;/code&gt;指定规则所在的包,对应&lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt;下面的文件夹名. 多个包可以用逗号分开;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kbase&lt;/code&gt;下面可以有多个&lt;code class=&quot;highlighter-rouge&quot;&gt;ksession&lt;/code&gt;子节点&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ksession&lt;/code&gt;: 有个&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;属性, 全局不能重名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kbase&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ksession&lt;/code&gt;还有其他属性, 不太常用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文件体现了&lt;code class=&quot;highlighter-rouge&quot;&gt;kmodule&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;kbase&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ksession&lt;/code&gt;的定义和从上到下的包含关系. 项目会根据&lt;code class=&quot;highlighter-rouge&quot;&gt;kmodule.xml&lt;/code&gt;的定义将其解析成&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModuleModel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieBaseModel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieSessionModel&lt;/code&gt;对象, 在运行时&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;会根据&lt;code class=&quot;highlighter-rouge&quot;&gt;XXModel&lt;/code&gt;来创建&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;对象, 其中&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;只会创建一次, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;则有可能创建多次, 因为&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;的创建成本很低, 同时&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;包含了运行时的数据, 所以可以销毁、创建若干次.&lt;/p&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kmodule.xml&lt;/code&gt;文件来定义&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;, 项目会自动解析&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下面的所有&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/kmodule.xml&lt;/code&gt;文件，然后解析成&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;对象供&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;引擎使用; 我们也可以不定义&lt;code class=&quot;highlighter-rouge&quot;&gt;kmodule.xml&lt;/code&gt;, 直接通过编码的方式来创建&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;等对象, 后面将会介绍.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;kie&quot;&gt;KIE&lt;/h2&gt;
&lt;p&gt;我们发现在&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;中经常接触到&lt;code class=&quot;highlighter-rouge&quot;&gt;KIE&lt;/code&gt;, 这个&lt;code class=&quot;highlighter-rouge&quot;&gt;KIE&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;JBoss&lt;/code&gt;里面一些相关项目的统称, 可以理解为, &lt;code class=&quot;highlighter-rouge&quot;&gt;JBoss&lt;/code&gt;有很多项目, 使用方式比较统一, 都可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KIE API&lt;/code&gt;来使用. 这些通用的API一般都会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Kie&lt;/code&gt;作为前缀, 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;KieServices&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;等这些类都是KIE的公共API.&lt;/p&gt;

&lt;p&gt;比较熟悉的&lt;code class=&quot;highlighter-rouge&quot;&gt;JBoss&lt;/code&gt;项目&lt;code class=&quot;highlighter-rouge&quot;&gt;jBPM&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;等, 通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KIE&lt;/code&gt;统一了他们的使用方式, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;中这么用, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;jBPM&lt;/code&gt;也这么用. 下面是来自官网的一张关于KIE的图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/kie.png&quot; alt=&quot;KIE API&quot; title=&quot;KIE API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;KIE API有一些常用的类, 比如上例中, 我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KieServices&lt;/code&gt;对象得到一个&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;, 然后&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;根据&lt;code class=&quot;highlighter-rouge&quot;&gt;session name&lt;/code&gt;来新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;, 最后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;来运行规则&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;: 该接口提供了很多方法, 可以通过这些方法访问KIE关于构建和运行的相关对象, 比如可以获取&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;, 利用&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;来访问&lt;code class=&quot;highlighter-rouge&quot;&gt;KBase&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;KSession&lt;/code&gt;等信息; 可以获取&lt;code class=&quot;highlighter-rouge&quot;&gt;KieRepository&lt;/code&gt;对象, 利用&lt;code class=&quot;highlighter-rouge&quot;&gt;KieRepository&lt;/code&gt;来管理&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;等. &lt;code class=&quot;highlighter-rouge&quot;&gt;KieServices&lt;/code&gt;就是一个中心, 通过它来获取的各种对象来完成规则构建、管理和执行等操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;: 就是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;的容器&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;: 一个知识仓库, 包含了若干的规则、流程、方法等, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;中主要就是规则和方法, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;不包含运行时的数据, 如果需要执行规则&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;中的规则, 就需要根据&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;. 一般创建&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;成本较高, 只会创建一次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;: 一个跟&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;引擎交互的会话, 基于&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;创建, 它会包含运行时数据(事实&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;). 我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;是一种较为方便的做法, 其实他本质上是从&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;中创建出来的&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KieRepository&lt;/code&gt;: 一个单例对象, 它是一个存放&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;的仓库, &lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;可以由&lt;code class=&quot;highlighter-rouge&quot;&gt;kmodule.xml&lt;/code&gt;文件定义&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KieProject&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KieProject&lt;/code&gt;来创建&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;, 并将&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;放到&lt;code class=&quot;highlighter-rouge&quot;&gt;KieRepository&lt;/code&gt;中, 然后&lt;code class=&quot;highlighter-rouge&quot;&gt;KieContainer&lt;/code&gt;可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KieProject&lt;/code&gt;来查找&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;定义的信息, 并根据这些信息构造&lt;code class=&quot;highlighter-rouge&quot;&gt;KieBase&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;KieSession&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClasspathKieProject&lt;/code&gt;: 它实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;KieProject&lt;/code&gt;接口, 它提供了根据类路径中的&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/kmodule.xml&lt;/code&gt;文件构造&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;的能力, 也就是我们能够基于Maven构造Drools组件的基本保障之一&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外, KIE也提供了一种策略, 能够让应用程序在运行时, 动态监测&lt;code class=&quot;highlighter-rouge&quot;&gt;Maven&lt;/code&gt;仓库中&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;项目&lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt;组件的版本更新情况, 然后可以根据配置动态更新&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;发布包, 实现热插拔功能, 这个是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KieScanner API&lt;/code&gt;实现的&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;kmodule&quot;&gt;编码方式实现kmodule定义&lt;/h2&gt;
&lt;p&gt;前面的例子都是默认读取&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/kmodule.xml&lt;/code&gt;文件的, 接下来我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KieFileSystem&lt;/code&gt;定义&lt;code class=&quot;highlighter-rouge&quot;&gt;KieModule&lt;/code&gt;, 这样就不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/kmodule.xml&lt;/code&gt;配置文件了.&lt;/p&gt;

&lt;p&gt;还是类似的例子, 目录结构将变为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    src
    |--com.test.drools
    |  |--KieFileSystemTest.java
    resources
    |--rules
    |  |--test.drl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;KKieFileSystemTest.java&lt;/code&gt;内容为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KieFileSystemTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 获取 drools 实现的 KieServices 实例&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieServices&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 创建一个 KieFileSystem&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieFileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 创建一个 KieResources 对象&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieResources&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 1. 先创建 KieModuleModel, 类似于xml中的 kmodule 节点&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieModuleModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieModuleModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieModuleModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 2. 再创建 KieBaseModel, 类似于xml中的 kbase节点, name=kbase-rules, package=rules&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieBaseModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieModuleModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieBaseModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kbase-rules&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 3. 再创建 KieSessionModel, 类似于xml中的 ksession 节点, name=ksession-rules&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;baseModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieSessionModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ksession-rules&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 4. 生产一个xml文件，就是kmodule.xml文件&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieModuleModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toXML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 打印出来看看内容&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 5. 将这个xml文件写入到KieFileSystem中&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeKModuleXML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 6. 然后将规则文件等写入到 KieFileSystem 中&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// fileSystem.write(&quot;src/main/resources/rules/test.drl&quot;, resources.newClassPathResource(&quot;rules/test.drl&quot;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newClassPathResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rules/test.drl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 跟上面等效&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 7. 最后通过 KieBuilder 进行构建就将该 kmodule 加入到 KieRepository 中, 这样就将自定义的kmodule加入到引擎中了&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 编译&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 下面就可以向原来一样使用了&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 得到 KieContainer&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieContainer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kieServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultReleaseId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过 kContainer 获取 kmodule.xml 中定义的 ksession&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KieSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kieContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newKieSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ksession-rules&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 向 workingMemory 中加入一个对象&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kieSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通知规则引擎执行规则&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kieSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fireAllRules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 14 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-14-Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-14-Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html</guid>
        
        <category>Drools</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Drools语法详解</title>
        <description>&lt;p&gt;本文仅包含&lt;code class=&quot;highlighter-rouge&quot;&gt;Drools&lt;/code&gt;的语法介绍, 不涉及如何使用,规则引擎介绍,算法介绍等方面.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;语法全貌概览&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#package&quot;&gt;package&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#import&quot;&gt;import&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#global&quot;&gt;global&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#functon&quot;&gt;functon&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rule&quot;&gt;rule&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;规则属性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when&quot;&gt;when&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#then&quot;&gt;then&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;语法全貌概览&lt;/h2&gt;

&lt;p&gt;规则文件一般都是&lt;code class=&quot;highlighter-rouge&quot;&gt;.drl&lt;/code&gt;文件, 也可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;文件. 我们默认都是用&lt;code class=&quot;highlighter-rouge&quot;&gt;.drl&lt;/code&gt;文件. 一个规则文件大致会有这样的结构:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 包名, 必须, 逻辑上的管理, 不对应物理位置 */&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 导入类或方法, 与java中的import类似 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 全局变量 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 定义函数 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 查询 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* 规则, 可以由多个; 这是规则文件的主要部分 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;来个具体的规则文件的例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;我是&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rule1&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello drools&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;package&quot;&gt;package&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;有以下几点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;是必须的, 且必须放在规则文件第一行;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;的名字是随意的, 不必对应物理路径;&lt;/li&gt;
  &lt;li&gt;跟&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;的概念不同,这里只是逻辑上的一种区分,同样的&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;下定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;等可以直接使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;import&quot;&gt;import&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;跟&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;中类似, 可以导入类, 也可以直接导入静态方法&lt;/p&gt;

&lt;h3 id=&quot;global&quot;&gt;global&lt;/h3&gt;

&lt;p&gt;定义全局变量,通常用于返回数据和提供服务; 全局变量与fact不通,引擎不能知道全局变量的改变,必须在插入fact之前,设置global变量&lt;/p&gt;

&lt;h3 id=&quot;functon&quot;&gt;functon&lt;/h3&gt;

&lt;p&gt;定义函数, 为了提高代码复用, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;语法书写&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rule&quot;&gt;rule&lt;/h2&gt;

&lt;p&gt;定义一个规则, 格式大致为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;规则名&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;属性&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;值&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;条件&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;也叫&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hand&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Side&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;简称&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;结果&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;也叫&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hand&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Side&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;简称&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;主要包含三部分:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;属性部分: 定义当前规则执行的一些属性等,比如是否可被重复执行、过期时间、生效时间等&lt;/li&gt;
  &lt;li&gt;条件部分: 即&lt;code class=&quot;highlighter-rouge&quot;&gt;LHS&lt;/code&gt;, 定义当前规则的条件; 如 &lt;code class=&quot;highlighter-rouge&quot;&gt;when Message();&lt;/code&gt; 判断当前&lt;code class=&quot;highlighter-rouge&quot;&gt;workingMemory&lt;/code&gt;中是否存在&lt;code class=&quot;highlighter-rouge&quot;&gt;Message&lt;/code&gt;对象&lt;/li&gt;
  &lt;li&gt;结果部分: 即&lt;code class=&quot;highlighter-rouge&quot;&gt;RHS&lt;/code&gt;, 即当前规则条件满足后执行的操作,可以直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;对象的方法来操作应用,可写java代码&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;规则属性&lt;/h2&gt;
&lt;p&gt;属性有这些内容: &lt;code class=&quot;highlighter-rouge&quot;&gt;activation-group&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;agenda-group&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;auto-focus&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;date-effective&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;date-expires&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dialect&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;duration&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;duration-value&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;enabled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lock-on-active&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;no-loop&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ruleflow-group&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;salience&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下面挨个解释:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;salience&lt;/code&gt;: 优先级, 属性值是一个数字, 数值越大越先执行, 可以是负数, 默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. 这个可以控制规则的执行顺序&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date-effective&lt;/code&gt;: 设置规则的生效时间, &lt;code class=&quot;highlighter-rouge&quot;&gt;当前系统时间&amp;gt;=date-effective&lt;/code&gt;时才会触发执行, 值是一个日期格式的字符串, 推荐用法是手动在java代码中设置当前系统的时间格式, 然后按照格式指定时间. 比如: &lt;code class=&quot;highlighter-rouge&quot;&gt;date-expires &quot;2016-01-31 23:59:59&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date-expires&lt;/code&gt;: 设置规则的过期时间, 跟上面正好相反.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enabled&lt;/code&gt;: 表示该规则是否可用, 值为布尔类型, 默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, 设置成&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;则该规则就不会被执行了&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dialect&lt;/code&gt;: 设置语言类型, 值为字符串, 一般有两种语言,&lt;code class=&quot;highlighter-rouge&quot;&gt;mvel&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;, 默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;duration&lt;/code&gt;: 规则定时, 值为长整型, 单位为毫秒, 如 &lt;code class=&quot;highlighter-rouge&quot;&gt;duration 3000&lt;/code&gt;, 表示规则在3秒后执行(另外的线程中执行)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;no-loop&lt;/code&gt;: 是否允许规则多次执行, 值为布尔类型, 默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, 即当前的规则只要满足条件, 可以无限次执行; 对当前传入&lt;code class=&quot;highlighter-rouge&quot;&gt;workingMemory&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;对象进行修改或者个数的增减时, 就会触发规则重新匹配执行; 设置属性&lt;code class=&quot;highlighter-rouge&quot;&gt;no-loop true&lt;/code&gt;, 表示当前规则只执行一次, 即使&lt;code class=&quot;highlighter-rouge&quot;&gt;RHS&lt;/code&gt;中更新了当前&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;对象也不会再次执行该规则了. 不过当其他规则里更新了&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;对象时, 即使有&lt;code class=&quot;highlighter-rouge&quot;&gt;no-loop true&lt;/code&gt;也会触发, 即&lt;code class=&quot;highlighter-rouge&quot;&gt;no-loop true&lt;/code&gt;仅表示本规的&lt;code class=&quot;highlighter-rouge&quot;&gt;RHS&lt;/code&gt;中有更新时不重复执行.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lock-on-active&lt;/code&gt;: 是&lt;code class=&quot;highlighter-rouge&quot;&gt;no-loop&lt;/code&gt;的增强版, 与其他属性配合使用;规则的重复执行不一定是本身触发的, 也可能是其他规则触发的, 当在规则上使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ruleflow-group&lt;/code&gt;属性或&lt;code class=&quot;highlighter-rouge&quot;&gt;agenda-group&lt;/code&gt;属性时, 将&lt;code class=&quot;highlighter-rouge&quot;&gt;lock-on-active&lt;/code&gt;属性值设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，可避免因某些&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;对象被修改而使已经执行过的规则再次被激活执行.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;activation-group&lt;/code&gt;: 作用是将规则分组, 值为字符串表示组名,这样在执行的时候,具有相同&lt;code class=&quot;highlighter-rouge&quot;&gt;activation-group&lt;/code&gt;属性的规则中只要有一个会被执行,其它的规则都将不再执行。即在具有相同&lt;code class=&quot;highlighter-rouge&quot;&gt;activation-group&lt;/code&gt;属性的规则当中,只有一个规则会被执行,其它规则都将不会被执行.相同&lt;code class=&quot;highlighter-rouge&quot;&gt;activation-group&lt;/code&gt;属性的规则中哪一个会先执行,则可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;salience&lt;/code&gt;之类的属性来实现&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;agenda-group&lt;/code&gt;: 将规则分成若干个&lt;code class=&quot;highlighter-rouge&quot;&gt;Agenda Group&lt;/code&gt;, 默认情况下, 引擎在调用这些设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;agenda-group&lt;/code&gt;属性的规则时需要显示的指定某个&lt;code class=&quot;highlighter-rouge&quot;&gt;Agenda Group&lt;/code&gt;得到&lt;code class=&quot;highlighter-rouge&quot;&gt;Focus(焦点)&lt;/code&gt;,这样位于该&lt;code class=&quot;highlighter-rouge&quot;&gt;Agenda Group&lt;/code&gt;中的规则才会触发执行,否则将不执行&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruleflow-group&lt;/code&gt;: 使用规则流的时候会用到该属性, 作用是将规则分组，然后在规则流当中通过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ruleflow-group&lt;/code&gt;属性的值，从而使用对应的规则&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;when&quot;&gt;when&lt;/h2&gt;
&lt;p&gt;条件部分(Conditions/LHS)用于匹配条件, 也叫匹配模式(Pattern)  &lt;/p&gt;

&lt;p&gt;条件可以是单个, 也可以有多个, 下面是一些例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 是一个默认的api, 类似于 while(true)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 当前的 workingMemory 中存在 Pserson 类型的 Fact 对象&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 同上, $person 是给对象起的名字&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;$bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 字段绑定, 存在 Person 类型且属性 name 值为bob的对象&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 与上面类似, 只是把名字放到了 $name 变量里&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 与上面类似, 只是把名字放到了 $name 变量里&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;$tom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tom&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 条件组合&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 上面起的变量这里可以直接使用&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上例中的&lt;code class=&quot;highlighter-rouge&quot;&gt;$person&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$bob&lt;/code&gt;等代表着符合条件的变量的引用, 在后面的条件部分和&lt;code class=&quot;highlighter-rouge&quot;&gt;RHS&lt;/code&gt;部分中可直接使用&lt;/li&gt;
  &lt;li&gt;条件可以有组合, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;Person(age == 18 &amp;amp;&amp;amp; (name == &quot;tom&quot; || name == &quot;Tom&quot;))&lt;/code&gt;, 若条件全是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;关系, 可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;代替, 但两者不能混用.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;对象(即输入的数据,类似于java bean)的private属性, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;LHS&lt;/code&gt;中必须用&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;引用, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;($person.name == &quot;tom&quot;)&lt;/code&gt;, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;RHS&lt;/code&gt;中必须使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外&lt;code class=&quot;highlighter-rouge&quot;&gt;drools&lt;/code&gt;提供了十二种比较操作符, 有:&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;not contains&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;memberOf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;not memberOf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;not matches&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt;: 是否包含, 被比较对象可以是一个复杂对象也可以是一个简单的值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;memberOf&lt;/code&gt;: 是否在某个集合中, 与&lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt;不同的是他被比较的对象是一个集合, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt;被比较的对象是单个值或者对象&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt;: 正则表达式匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;then&quot;&gt;then&lt;/h2&gt;
&lt;p&gt;RHS, 这部分是普通的&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;代码, 记得加&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;.&lt;br /&gt;
另外&lt;code class=&quot;highlighter-rouge&quot;&gt;drools&lt;/code&gt;提供了几个方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;: 往当前&lt;code class=&quot;highlighter-rouge&quot;&gt;workingMemory&lt;/code&gt;中插入一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;Fact&lt;/code&gt;对象, 会触发规则的再次执行,除非使用no-loop限定&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;: 更新&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;modify&lt;/code&gt;: 修改, 与&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;语法不同, 效果一样, 结果都是更新操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;retract&lt;/code&gt;: 删除&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Fri, 12 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-12-Drools%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-12-Drools%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3.html</guid>
        
        <category>Drools</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring的EL表达式</title>
        <description>&lt;p&gt;在学习Spring的EL表达式时参考了&lt;a href=&quot;http://iyiguo.net/blog/2011/06/19/spring-expression-language/&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spel&quot;&gt;SpEL简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;文本表达式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;变量&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;属性和方法调用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;类型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;操作符&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;避免空指针&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#this&lt;/code&gt;变量&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;集合选择&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;模板表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spel&quot;&gt;SpEL简介&lt;/h2&gt;
&lt;p&gt;在Spring3中就已经支持EL表达式了, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Expression Language(SpEL)&lt;/code&gt;是类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;OGNL&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;JSF EL&lt;/code&gt;的表达式语言, 能够在运行时构建复杂表达式, 存取对象属性、调用对象方法等, 而且所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;SpEL&lt;/code&gt;都支持&lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation&lt;/code&gt;两种方式, 使用的格式均为:&lt;code class=&quot;highlighter-rouge&quot;&gt;#{SpEL expression}&lt;/code&gt;. 比如在&lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;中使用的例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloBean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.***.Hello&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{otherBean}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 把otherBean注入到helloBean的item属性中 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;itemName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{otherBean.name}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 把otherBean的name注入到helloBean的itemName属性中 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation&lt;/code&gt;中使用的例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{&#39;Tom&#39;.toUpperCase()}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的例子可以看出, 在使用Spring时, 我们已经在不知不觉中使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;SpEL&lt;/code&gt;表达式了. 另外我们自己使用&lt;code class=&quot;highlighter-rouge&quot;&gt;SpEL&lt;/code&gt;表达式时, 大体可分三个步骤:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. 构建解析器&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ExpressionParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpelExpressionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2. 解析表达式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpEl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3. 获取结果&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这就是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;SpEL&lt;/code&gt;的基本方式, 还有许多功能, 下文将举例列举&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;文本表达式&lt;/h2&gt;
&lt;p&gt;文本表达式支持: 字符串(需要用单引号声明)、日期、数字、布尔类型及&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;,对数字支持负数、指数及小数, 默认情况下实数使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Double.parseDouble()&lt;/code&gt;进行表达式类型转换.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#39;hello&#39;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// hello , 注意单引号&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.024E+3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1024  , 指数形式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0xFFFF&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 65535 , 十六进制&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;变量&lt;/h2&gt;
&lt;p&gt;变量可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;StandardEvaluationContext&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;setVariable&lt;/code&gt;方法设置到上下文中, 表达式中可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;#变量名&lt;/code&gt;使用变量;&lt;br /&gt;
另外, 还可以直接使用构造方法创建对象.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 定义变量&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EvaluationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEvaluationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 表达式的上下文,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                        &lt;span class=&quot;c1&quot;&gt;// 为了让表达式可以访问该对象, 先把对象放到上下文中&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ExpressionParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpelExpressionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 访问变量&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#myName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Tom , 使用变量&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 直接使用构造方法创建对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new String(&#39;aaa&#39;)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// aaa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;属性和方法调用&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;属性可直接使用属性名,属性名首字母大小写均可(只有首字母可不区分大小写);  &lt;/li&gt;
  &lt;li&gt;数组、列表可直接通过下表形式(&lt;code class=&quot;highlighter-rouge&quot;&gt;list[index]&lt;/code&gt;)访问;  &lt;/li&gt;
  &lt;li&gt;map可以直接把key当成索引来访问(&lt;code class=&quot;highlighter-rouge&quot;&gt;map[key]&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;方法可以直接访问;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 准备工作&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 一个普通的POJO&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EvaluationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEvaluationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 表达式的上下文,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                        &lt;span class=&quot;c1&quot;&gt;// 为了让表达式可以访问该对象, 先把对象放到上下文中&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ExpressionParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpelExpressionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 属性&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#person.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Tom , 属性访问&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#person.Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Tom , 属性访问, 但是首字母大写了&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 列表&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#list[0]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// a , 下标&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// map&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#map[A]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 1 , key&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#person.getAge()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 18 , 方法访问&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外列表可以直接写在表达式中, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;表示一个空列表, 比如:&lt;code class=&quot;highlighter-rouge&quot;&gt;parser.parseExpression(&quot;{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;}[0]&quot;).getValue(String.class)&lt;/code&gt;跟上面效果一样, 同样会访问列表的第一个元素, 得到&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;类型&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;操作符可以获取类型, 可以调用对象的静态方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 获取类型&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;T(java.util.Date)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// class java.util.Date&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 访问静态成员(方法或属性)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;T(Math).abs(-1)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 判断类型&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#39;asdf&#39; instanceof T(String)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;操作符&lt;/h2&gt;
&lt;p&gt;Spring EL 支持大多数的数学操作符、逻辑操作符、关系操作符.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;关系操作符, 包括: &lt;code class=&quot;highlighter-rouge&quot;&gt;eq(==)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ne(!=)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lt()&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;le(&amp;lt;=)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gt(&amp;gt;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ge(&amp;gt;=)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;逻辑运算符, 包括: &lt;code class=&quot;highlighter-rouge&quot;&gt;and(&amp;amp;&amp;amp;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;or(||)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;not(!)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;数学操作符, 包括: 加(&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;), 减(&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;), 乘(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;), 除(&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;), 取模(&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;), 幂指数(&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;其他操作符, 如: 三元操作符, &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;, 赋值(&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;), 正则匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外三元操作符有个特殊的用法, 一般用于赋默认值, 比如: &lt;code class=&quot;highlighter-rouge&quot;&gt;parseExpression(&quot;#name?:&#39;defaultName&#39;&quot;)&lt;/code&gt;, 如果变量&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;为空时设置默认值.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1 &amp;gt; -1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1 gt -1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true or true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true || true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2 ^ 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true ? true : false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#name ?: &#39;default&#39;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// default&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1 instanceof T(Integer)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#39;5.00&#39; matches &#39;^-?\\d+(\\.\\d{2})?$&#39;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#person.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Tom , 原来的值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#person.name = &#39;Jim&#39;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Jim , 赋值之后&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#person.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Jim, 赋值起了作用&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;避免空指针&lt;/h2&gt;
&lt;p&gt;当访问一个对象的属性或方法时, 若该对象为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, 就会出现空指针异常. 安全导航会判断对象是否为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;,如果是的话, 就返回&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;而不是抛出空指针异常. 使用方式就是在对象后面加个&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;. 如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 使用这种表达式可以避免抛出空指针异常&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#name?.toUpperCase()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;this&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#this&lt;/code&gt;变量&lt;/h2&gt;
&lt;p&gt;有个特殊的变量&lt;code class=&quot;highlighter-rouge&quot;&gt;#this&lt;/code&gt;来表示当前的对象. 常用于集合的过滤&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// this 使用示例&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{1, 3, 5, 7}.?[#this &amp;gt; 3]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [5, 7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-6&quot;&gt;集合选择&lt;/h2&gt;
&lt;p&gt;可以使用选择表达式对集合进行过滤或一些操作，从而生成一个新的符合选择条件的集合, 有如下一些形式:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?[expression]&lt;/code&gt;: 选择符合条件的元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^[expression]&lt;/code&gt;: 选择符合条件的第一个元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$[expression]&lt;/code&gt;: 选择符合条件的最后一个元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;![expression]&lt;/code&gt;: 可对集合中的元素挨个进行处理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于集合可以配合&lt;code class=&quot;highlighter-rouge&quot;&gt;#this&lt;/code&gt;变量进行过滤, 对于map, 可分别对&lt;code class=&quot;highlighter-rouge&quot;&gt;keySet&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;valueSet&lt;/code&gt;分别使用&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;关键字;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 集合&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{1, 3, 5, 7}.?[#this &amp;gt; 3]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [5, 7] , 选择元素&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{1, 3, 5, 7}.^[#this &amp;gt; 3]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5 , 第一个&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{1, 3, 5, 7}.$[#this &amp;gt; 3]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 7 , 最后一个&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{1, 3, 5, 7}.![#this + 1]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [2, 4, 6, 8] ,每个元素都加1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// map&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EvaluationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEvaluationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#map.?[key &amp;gt; 3]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// {4=D}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#map.?[value == &#39;A&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// {1=A}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#map.?[key &amp;gt; 2 and key &amp;lt; 4]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {3=C}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-7&quot;&gt;模板表达式&lt;/h2&gt;
&lt;p&gt;模板表达式允许文字和表达式混合使用, 一般选择使用&lt;code class=&quot;highlighter-rouge&quot;&gt;#{}&lt;/code&gt;作为一个定界符:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;他的名字为#{#person.name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TemplateParserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 他的名字为Tom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 08 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-08-Spring%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-08-08-Spring%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Docker学习笔记(三):网络和数据卷</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;网络&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;列出网络&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;查看网络信息&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;断开网络&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;创建网络&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;使用自定义网络创建容器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;数据卷&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;添加数据卷&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;挂载本地目录&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot;&gt;挂载文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot;&gt;挂载容器中的数据卷&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot;&gt;查看删除数据卷&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#volume&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;的其他用法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;网络&lt;/h2&gt;

&lt;p&gt;之前有个web程序的例子已经介绍过了端口, 这里说下网络&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;列出网络&lt;/h3&gt;

&lt;p&gt;每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;引擎默认都会包含三个默认的网络, 我们可以这样查看:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
5fa52100eeb6        bridge              bridge              local
e3b7da4f14e9        host                host                local
6ddc3eda6788        none                null                local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NAME&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;的网络比较特殊, 新运行的容器默认都是在这个网络中, 除非指定是用别的网络&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;查看网络信息&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -itd --name=networktest ubuntu
408cf6d9f25b9757c5d5fdfcd8c9a7133c7b888095c02b7b85d46f8df404b847
$ docker network inspect bridge
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们会得到类似于下面的描述&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;5fa52100eeb64d58d5ec97b2f2267c78d700265d310030b0bc61e203367172d2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;EnableIPv6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;IPAM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;Subnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.0/16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;Gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.1&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Internal&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Containers&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;408cf6d9f25b9757c5d5fdfcd8c9a7133c7b888095c02b7b85d46f8df404b847&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;networktest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;EndpointID&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;87625c710a97b0e40dd79119d5002edd4c44f162ff1c2d4b85d9c87b0f43968e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;MacAddress&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;02:42:ac:11:00:02&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;IPv4Address&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.2/16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;IPv6Address&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Options&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.default_bridge&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.enable_icc&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.enable_ip_masquerade&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.host_binding_ipv4&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.bridge.name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;com.docker.network.driver.mtu&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1500&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Labels&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们可以这样检查容器的信息, 其中就有网络信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;花括号之间没有空格!!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看网络信息&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {json .NetworkSettings.Networks}}&#39;&lt;/span&gt; networktest
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IPAMConfig&quot;&lt;/span&gt;:null,&lt;span class=&quot;s2&quot;&gt;&quot;Links&quot;&lt;/span&gt;:null,&lt;span class=&quot;s2&quot;&gt;&quot;Aliases&quot;&lt;/span&gt;:null,&lt;span class=&quot;s2&quot;&gt;&quot;NetworkID&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;5fa52100eeb64d58d5ec97b2f2267c78d700265d310030b0bc61e203367172d2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;EndpointID&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;87625c710a97b0e40dd79119d5002edd4c44f162ff1c2d4b85d9c87b0f43968e&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Gateway&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.2&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;IPPrefixLen&quot;&lt;/span&gt;:16,&lt;span class=&quot;s2&quot;&gt;&quot;IPv6Gateway&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;GlobalIPv6Address&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;GlobalIPv6PrefixLen&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;MacAddress&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;02:42:ac:11:00:02&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 直接查看IP地址&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;&lt;/span&gt; networktest
172.17.0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;断开网络&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network disconnect bridge networktest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;networktest&lt;/code&gt;这个容器从&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;网络中断开, 再次查看IP地址就没没有ip了&lt;/p&gt;

&lt;p&gt;当然也可以重新连接&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network connect bridge networktest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;创建网络&lt;/h3&gt;
&lt;p&gt;我们可以这样创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;网络&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network create -d bridge my-bridge
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;: driver value, 可以不写, 默认就是&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;; 最后面跟自己的driver名字&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;使用自定义网络创建容器&lt;/h3&gt;

&lt;p&gt;在运行容器的时候可以通过传递参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--network=my-bridge&lt;/code&gt;来指定使用那个网络, 不传默认使用&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;花括号之间没有空格!!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --network&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-bridge --name db training/postgres
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --name web training/webapp python app.py
&lt;span class=&quot;c&quot;&gt;# db 使用的网络是 my-bridge&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;&lt;/span&gt; db
172.18.0.2
&lt;span class=&quot;c&quot;&gt;# web 使用的网络是 bridge&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;shisong$ &lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;&lt;/span&gt; web
172.17.0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们可以打开容器&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;的终端, &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt;一下看看网是否通&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker exec -it db bash
root@822d3512fe8d:/# ping 172.17.0.2
PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.
64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.114 ms
64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.070 ms
^C
--- 172.18.0.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1006ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果我们把&lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt;容器也连接到&lt;code class=&quot;highlighter-rouge&quot;&gt;my-bridge&lt;/code&gt;网络中, 则网络就通了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker network connect my-bridge web
&lt;span class=&quot;c&quot;&gt;# 查看新的IP地址, 刚才的网络没断开, 所以会看到有两个网络, 两个IP地址(新的是172.18.0.3)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect web
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -it db bash
&lt;span class=&quot;gp&quot;&gt;root@822d3512fe8d:/# &lt;/span&gt;ping 172.18.0.3
PING 172.18.0.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;172.18.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 172.18.0.3: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.298 ms
64 bytes from 172.18.0.3: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.112 ms
^C
--- 172.18.0.3 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;999ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;数据卷&lt;/h2&gt;
&lt;p&gt;数据卷(&lt;code class=&quot;highlighter-rouge&quot;&gt;data volume&lt;/code&gt;)类似于linux系统中的挂载点&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;添加数据卷&lt;/h3&gt;
&lt;p&gt;我们在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker create&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;时可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; flag来添加数据卷, 甚至可以多次使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;来添加多个数据卷&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P --name web -v /webapp training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面是挂载了一个数据卷到容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/webapp&lt;/code&gt;目录(必须是绝对路径), &lt;code class=&quot;highlighter-rouge&quot;&gt;/webapp&lt;/code&gt;不存在则创建, 存在则覆盖(但不会删除原有的, 卸载时恢复原有的)&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect web&lt;/code&gt;命令来查看添加数据卷的信息, 会有一段如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;Mounts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e30f9d5c1c8ffe1d02c8f1d758c5b0663c73ba46e8469e1e6ee14a9e5ee1784a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/docker/volumes/e30f9d5c1c8ffe1d02c8f1d758c5b0663c73ba46e8469e1e6ee14a9e5ee1784a/_data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/webapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;RW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Propagation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;就是我们挂载的数据卷,&lt;code class=&quot;highlighter-rouge&quot;&gt;Destination&lt;/code&gt;是我们挂载到容器中的位置,&lt;code class=&quot;highlighter-rouge&quot;&gt;RW&lt;/code&gt;是否可读写, 默认就是可读写&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;挂载本地目录&lt;/h3&gt;
&lt;p&gt;我们可以挂载本地目录, 也可以指定是只读还是可读写模式, &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;后面的格式为&lt;code class=&quot;highlighter-rouge&quot;&gt;[local_path:]container-dir[:ro]&lt;/code&gt;, 除了上面的那种形式, 还可以像下面这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py
$ docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不过在&lt;code class=&quot;highlighter-rouge&quot;&gt;OS X&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;windows&lt;/code&gt;中, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Engine&lt;/code&gt;只有&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users (OS X)&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users (Windows)&lt;/code&gt;的访问权限, 所以只能这样使用了:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# os x&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -v /Users/&amp;lt;path&amp;gt;:/&amp;lt;container path&amp;gt; ...
&lt;span class=&quot;c&quot;&gt;# windows&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -v /c/Users/&amp;lt;path&amp;gt;:/&amp;lt;container path&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外, 还可以挂载某个名字的数据卷, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;会创建一个给定名字的数据卷, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P --name web -v foo:/opt/webapp:ro training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect web&lt;/code&gt;得到的描述如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;Mounts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/docker/volumes/foo/_data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/opt/webapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ro&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;RW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Propagation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rprivate&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;挂载文件&lt;/h3&gt;

&lt;p&gt;我们可以挂载某个文件到容器中:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -it -v ~/.bash_history:/root/.bash_history ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;: 容器退出时自动删除容器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面就挂载了&lt;code class=&quot;highlighter-rouge&quot;&gt;bash_history&lt;/code&gt;到容器中, 在容器里查看到原来本地机上的历史命令, 当退出容器的时候, 本地机会有刚才在容器里使用过的命令的历史.&lt;br /&gt;
不过需要注意的是, 若是挂在了文件, 在容器里使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt;等编辑该挂在文件时, 会引起错误. 因此挂载这个文件的父目录是更好的选择.&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;挂载容器中的数据卷&lt;/h3&gt;
&lt;p&gt;挂载数据卷, 可以是匿名的也可以是命名的, 可以挂载本地目录也可以挂载本地文件, 还能挂载另一个容器中的数据卷. 我们可以通过参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--volumes-from&lt;/code&gt;指定数据卷来自于哪个容器, 可以多次使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--volumes-from&lt;/code&gt;来挂载多个数据卷&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 先创建一个叫 dbstore 的容器, 这个容器添加了数据卷&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker create -v /dbdata --name dbstore training/postgres /bin/true
&lt;span class=&quot;c&quot;&gt;# 创建容器 db1, 指明数据卷来自于 dbstore&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --volumes-from dbstore --name db1 training/postgres
&lt;span class=&quot;c&quot;&gt;# 创建容器 db2, 指明数据卷来自于 db1&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --volumes-from db1 --name db2 training/postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-11&quot;&gt;查看删除数据卷&lt;/h3&gt;
&lt;p&gt;上面例子中, 删除挂载数据卷的容器, 并不会删除挂载的数据卷, 除非在删除最后一个引用该数据卷的容器时指定&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;标记&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 删除容器不会删除数据卷&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rm db1
&lt;span class=&quot;c&quot;&gt;# 添加 -v 由于不是最后一个引用数据卷的容器, 所以数据卷仍没被删除&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rm -v dbstore
&lt;span class=&quot;c&quot;&gt;# 删除最后一个引用数据卷的容器时,添加 -v , 数据卷被删除&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rm -v db2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果删除了最后一个引用数据卷的容器时没有加&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;, 将会出现&lt;code class=&quot;highlighter-rouge&quot;&gt;dangling&lt;/code&gt;状态(悬挂,没人用了)的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;有匿名和命名之分, 我们可以在创建容器时通过参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;指定, 当容器删除时, 对应的所有匿名&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;也随着删除&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -v /foo -v awesome:/bar --name test ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;指定了一个匿名&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;, 挂载到容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/foo&lt;/code&gt;下, 还指定了一个命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;awesome&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;挂在到了&lt;code class=&quot;highlighter-rouge&quot;&gt;/bar&lt;/code&gt;下, 容器运行完自动删除镜像(&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;)时, 匿名数据卷会被删除,而&lt;code class=&quot;highlighter-rouge&quot;&gt;awesome&lt;/code&gt;并没有被删除.&lt;/p&gt;

&lt;p&gt;另外我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume&lt;/code&gt;命令来查看管理所有的数据卷&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有 volume&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker volume ls
&lt;span class=&quot;c&quot;&gt;# 查看 dangling 的 volume&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker volume ls -f &lt;span class=&quot;nv&quot;&gt;dangling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 删除 volume&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker volume rm &amp;lt;volume name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;volume&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;的其他用法&lt;/h3&gt;
&lt;p&gt;我们可以使用数据卷进行数据的备份、存储以及迁移等工作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;dbstore&lt;/code&gt;挂载了一个数据卷, 并且把本地目录挂在到了&lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt;下, 最后传递了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt;命令, 把&lt;code class=&quot;highlighter-rouge&quot;&gt;dbdata volume&lt;/code&gt;备份到&lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt;目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;backup.tar&lt;/code&gt;文件里. 命令执行完, 容器停止并被自动移除了, 但是&lt;code class=&quot;highlighter-rouge&quot;&gt;dbdata volume&lt;/code&gt;的数据被备份了.&lt;/p&gt;

&lt;p&gt;然后我们可以创建一个新容器, 添加了一个匿名的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;在容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/dbdata&lt;/code&gt;目录下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -v /dbdata --name dbstore2 ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;下面我们可以把刚才的备份文件解压到&lt;code class=&quot;highlighter-rouge&quot;&gt;dbstore2&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt;中, 从而达到转移的目的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c &quot;cd /dbdata &amp;amp;&amp;amp; tar xvf /backup/backup.tar --strip 1&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-21-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E7%BD%91%E7%BB%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8D%B7.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-21-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E7%BD%91%E7%BB%9C%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8D%B7.html</guid>
        
        <category>Docker</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Docker学习笔记(二):简单使用</title>
        <description>&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;命令行客户端使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;的一些例子&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;命令格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;简单使用&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hello-world&quot;&gt;hello world&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;交互式运行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;后台运行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;查看容器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;容器命名&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;查看容器的输出&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;停止/启动容器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;删除容器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web&quot;&gt;运行web程序(使用端口)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot;&gt;查看端口&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot;&gt;查看程序日志&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot;&gt;检查容器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-12&quot;&gt;镜像操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot;&gt;显示本地镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-14&quot;&gt;获取镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot;&gt;搜索镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot;&gt;制作镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tag&quot;&gt;镜像的tag&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-17&quot;&gt;提交镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-18&quot;&gt;删除镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#image-digests&quot;&gt;Image Digests&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;命令格式&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;安装过程参考&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官网&lt;/a&gt;, 安装成功后我们可以通过命令行接口(CLI)来使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;, 每个命令都可能会包含一些标记(&lt;code class=&quot;highlighter-rouge&quot;&gt;flags&lt;/code&gt;)和参数(&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;), 命令的格式大致如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;比如刚安装完成可以查看&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;的版本信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;标记来获取帮助, 比如列出&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;命令的所有选项(子命令)和用法、查看子命令的用法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker --help
&lt;span class=&quot;c&quot;&gt;# 查看 attach 子命令的用法&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker attach --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;简单使用&lt;/h2&gt;

&lt;p&gt;常用的命令使用方式示例以及一些解释&lt;/p&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;hello world&lt;/h3&gt;

&lt;p&gt;镜像好比类, 容器好比实例, 镜像被&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;就形成了容器, 运行容器可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;命令&lt;/p&gt;

&lt;p&gt;先来个简单例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;当运行镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world&lt;/code&gt;时, 会先检查本地是否有这个镜像, 没有则会去仓库(默认是docker hub)下载&lt;/p&gt;

&lt;p&gt;其他例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run ubuntu /bin/echo &#39;Hello world&#39;
Hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;交互式运行&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -t -i ubuntu /bin/bash
root@a98895ac1616:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt; flag: 给容器分配一个tty终端&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; flag: 可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;STDIN&lt;/code&gt;与容器交互&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;: 在容器里运行的&lt;code class=&quot;highlighter-rouge&quot;&gt;bash shell&lt;/code&gt;, 可用shell命令&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;退出容器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;后台运行&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d ubuntu /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;
28f3adccbae408573bbe6ecc03ad621d4257fbf1a79c672cc8d83ad327266807
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; flag: 后台运行容器(daemonize)&lt;/li&gt;
  &lt;li&gt;输出的那一长串是&lt;code class=&quot;highlighter-rouge&quot;&gt;container ID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;查看容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
28f3adccbae4        ubuntu              &quot;/bin/sh -c &#39;while tr&quot;   4 minutes ago       Up 4 minutes                            zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;container ID&lt;/code&gt;: 前面那一长串的缩写&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NAMES&lt;/code&gt;: 自动给容器起的名字, 每个容器的名字都是不一样的
另外:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;: 仅查看运行中的容器&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -l&lt;/code&gt;: 查看最后一次运行的容器(last)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt;: 查看所有运行过的容器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;容器命名&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --name hello ubuntu /bin/echo &#39;Hello world&#39;
Hello world
$ docker ps -l
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
c4c79c82eb6c        ubuntu              &quot;/bin/echo &#39;Hello wor&quot;   48 minutes ago      Exited (0) 2 seconds ago                       hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;容器的名字已经变成了&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;而不再是自动起的名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-6&quot;&gt;查看容器的输出&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker logs zen_curran
hello world
hello world
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;停止/启动容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stop zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以再次运行某个容器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker start zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;删除容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker rm zen_curran
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;web&quot;&gt;运行web程序(使用端口)&lt;/h2&gt;
&lt;p&gt;新下载一个镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;training/webapp&lt;/code&gt;, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;python app.py&lt;/code&gt;可运行python写的web程序, 通过下面的命令运行容器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;查看该容器的信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
9b32553a8272        training/webapp     &quot;python app.py&quot;     12 minutes ago      Up 12 minutes       0.0.0.0:32768-&amp;gt;5000/tcp   admiring_mayer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中有个与其他程序不一样的地方:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PORTS
0.0.0.0:32768-&amp;gt;5000/tcp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这就是&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;的作用, 上面描述的意思是&lt;code class=&quot;highlighter-rouge&quot;&gt;Dcoker&lt;/code&gt;容器里的端口是&lt;code class=&quot;highlighter-rouge&quot;&gt;5000(Python Flask的默认端口)&lt;/code&gt;暴露到了属主机的&lt;code class=&quot;highlighter-rouge&quot;&gt;32768&lt;/code&gt;端口.&lt;br /&gt;
上面&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;的作用等同于&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 5000&lt;/code&gt;, 将暴露容器中的端口&lt;code class=&quot;highlighter-rouge&quot;&gt;5000&lt;/code&gt;到一个更大的宿主机端口上(临时端口映射范围一般为&lt;code class=&quot;highlighter-rouge&quot;&gt;32768~61000&lt;/code&gt;).&lt;br /&gt;
也可以自己指定使用某个具体的端口:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -p 80:5000 training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;访问容器运行起来的web程序地址为:&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:80&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;查看端口&lt;/h3&gt;
&lt;p&gt;上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;可以看到容器的端口信息, 还有个更简单的命令&lt;code class=&quot;highlighter-rouge&quot;&gt;docker port&lt;/code&gt;, 指定要查看的容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt;即可:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker port 9b32553a8272
5000/tcp -&amp;gt; 0.0.0.0:32768
$ docker port admiring_mayer 5000
0.0.0.0:32768
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-10&quot;&gt;查看程序日志&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker logs -f admiring_mayer
 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
172.17.0.1 - - [19/Jul/2016 09:10:49] &quot;GET / HTTP/1.1&quot; 200 -
172.17.0.1 - - [19/Jul/2016 09:10:49] &quot;GET /favicon.ico HTTP/1.1&quot; 404 -
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;: 类似与&lt;code class=&quot;highlighter-rouge&quot;&gt;tail -f&lt;/code&gt;的形式查看&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-11&quot;&gt;检查容器&lt;/h3&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt;命令可以获取一些信息, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker inspect admiring_mayer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以看到一些json格式的信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;9b32553a82729a012b33b157abefb7639f1a59007042454f7ea543982a888466&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2016-07-19T08:40:01.882402323Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;app.py&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;State&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-12&quot;&gt;镜像操作&lt;/h2&gt;

&lt;h3 id=&quot;section-13&quot;&gt;显示本地镜像&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              cf62323fa025        11 days ago         125 MB
hello-world         latest              c54a2cc56cbb        2 weeks ago         1.848 kB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REPOSITORY&lt;/code&gt;: 镜像来自哪个仓库, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TAG&lt;/code&gt;: 镜像的版本, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;14.04&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt;表示最新版本&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IMAGE ID&lt;/code&gt;: 镜像的id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个镜像都有很多版本, 你可以指定某个版本, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -t -i ubuntu:14.04 /bin/bash&lt;/code&gt;, 当不指定时, 默认都是&lt;code class=&quot;highlighter-rouge&quot;&gt;latest&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;获取镜像&lt;/h3&gt;
&lt;p&gt;之前都是直接&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;的, 会自动获取镜像, 也可以仅获取, 不运行:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull ubuntu:14.04
$ docker pull centos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-15&quot;&gt;搜索镜像&lt;/h3&gt;
&lt;p&gt;可以去&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;搜索镜像, 也可以在命令行搜索&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker search ubuntu
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu                            Ubuntu is a Debian-based Linux operating s...   4293      [OK]       
ubuntu-upstart                    Upstart is an event-based replacement for ...   65        [OK]       
rastasheep/ubuntu-sshd            Dockerized SSH service, built on top of of...   29                   [OK]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STARS&lt;/code&gt;: 表示该镜像的受欢迎程度&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OFFICIAL&lt;/code&gt;: 表示是官方制作的镜像&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUTOMATED&lt;/code&gt;: 表示是用户制作的镜像,&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;前面就是用户名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-16&quot;&gt;制作镜像&lt;/h3&gt;
&lt;p&gt;我们可以通过两种方式来制作镜像&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;可以更新镜像运行起来的容器, 在运行的容器中做修改, 然后提交这个修改得到新的镜像&lt;/li&gt;
  &lt;li&gt;可以写&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;来指定具体如何创建某个镜像.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先来看看第一种方法.&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;training/sinatra&lt;/code&gt;镜像运行起来一个容器:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -t -i training/sinatra /bin/bash
root@0b2616b0e5a8:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;记住这个容器的id:&lt;code class=&quot;highlighter-rouge&quot;&gt;0b2616b0e5a8&lt;/code&gt;,一会儿会用. 然后通过bash在容器中安装&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; gem&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@0b2616b0e5a8:/# gem install json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;完成之后退出容器就可以了&lt;/p&gt;

&lt;p&gt;最后我们用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker commit&lt;/code&gt;命令, 把刚才已经改变了的容器提交一个副本制作成镜像&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker commit -m &quot;Added json gem&quot; -a &quot;Kate Smith&quot; 0b2616b0e5a8 ouruser/sinatra:v2
4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;: 添加描述信息, 类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;: 作者信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0b2616b0e5a8&lt;/code&gt;: 要制作成镜像的拿个容器的id&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ouruser/sinatra:v2&lt;/code&gt;: 目标镜像, 用户为&lt;code class=&quot;highlighter-rouge&quot;&gt;ouruser&lt;/code&gt;, 镜像名为&lt;code class=&quot;highlighter-rouge&quot;&gt;sinatra&lt;/code&gt;, 版本(tag)为&lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种方法比较麻烦而且不利于团队间的合作分享, 下面看看第二种方法:&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;命令编译&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;来制作镜像, 首先创建一个目录和一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir sinatra
$ cd sinatra
$ touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件里添加类似于下面的内容:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is a comment&lt;/span&gt;
FROM ubuntu:14.04
MAINTAINER Kate Smith &amp;lt;ksmith@example.com&amp;gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y ruby ruby-dev
RUN gem install sinatra
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;开头的是注释, 下面是指令, 指令的格式类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;INSTRUCTION statement&lt;/code&gt;, 每条指令都会创建镜像的一层&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;: 告诉&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;源镜像, 即我们是基于哪个镜像进行修改的&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAINTAINER&lt;/code&gt;: 用来说明是谁维护的这个镜像&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;: 要在源镜像上做那些修改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后我们编译&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t ouruser/sinatra:v2 .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;: 来指定一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;, 形式为:&lt;code class=&quot;highlighter-rouge&quot;&gt;name:tag&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;: 注意后面有个&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, 用来表示编译当前目录里的&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件, 也可以自己指定&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tag&quot;&gt;镜像的tag&lt;/h3&gt;
&lt;p&gt;我们可以给已经存在的镜像添加新的&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker tag ubuntu:14.04 rgkjhshi/ubuntu:newtag
docker tag b2f1fdd93175 rgkjhshi/ubuntu:newtag2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-17&quot;&gt;提交镜像&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker push rgkjhshi/ubuntu:newtag
&lt;span class=&quot;c&quot;&gt;# 提交所有tag&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker push rgkjhshi/ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-18&quot;&gt;删除镜像&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rmi rgkjhshi/ubuntu:newtag2
&lt;span class=&quot;c&quot;&gt;# 不写tag 默认删除 latest&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker rmi rgkjhshi/ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;image-digests&quot;&gt;Image Digests&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt;或之后的格式的镜像, 有个唯一标识符叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;, 如果用于生成镜像的输入没有变,则&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;值也是一样的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images --digests
REPOSITORY          TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE
rgkjhshi/ubuntu     newtag              sha256:8d0f6d13291273ad6271c3c55b222ad08e28ff71a40c27487c79dbe80cce184f   b2f1fdd93175        40 hours ago        188.4 MB
rgkjhshi/ubuntu     newtag2             sha256:8d0f6d13291273ad6271c3c55b222ad08e28ff71a40c27487c79dbe80cce184f   b2f1fdd93175        40 hours ago        188.4 MB
ubuntu              14.04               sha256:b2c8a4d46473ab082200880391ddf8c06f2a67da4fa905ce2747dcd95d8d7af7   b2f1fdd93175        40 hours ago        188.4 MB
ubuntu              latest              sha256:ba1688fec34f66d8a7ff5b42e6971625d8232c72bf0e38ad06dda10cad157293   cf62323fa025        11 days ago         125 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0&lt;/code&gt;的仓库使用&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;命令时都会显示镜像的&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;, 我们也可以直接像这样使用&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull rgkjhshi/ubuntu@sha256:8d0f6d13291273ad6271c3c55b222ad08e28ff71a40c27487c79dbe80cce184f
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;若同一个&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;有不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;, 则&lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;下来的镜像没有&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;(显示的是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;none&amp;gt;&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;rmi&lt;/code&gt;命令甚至&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;都可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;digest&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 19 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-19-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-19-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
        
        <category>Docker</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Docker学习笔记(一):初步了解</title>
        <description>&lt;p&gt;本文是学习Docker的过程记录, 有些内容是自己的理解, 所以可能理解的不到位甚至不正确, 随着学习的深入我会慢慢更正。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;写在最前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker&quot;&gt;初识Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-1&quot;&gt;Docker与传统虚拟机技术的对比&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-engine&quot;&gt;Docker Engine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-&quot;&gt;Docker 架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;写在最前面&lt;/h2&gt;

&lt;p&gt;学习&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;最好的方式就是看官方文档, 不过有时候官网的解释非常官方, 所以我把学习中用到的资料全都列在下面&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.docker.org.cn/index.html&quot;&gt;docker中文社区&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/list/docker/&quot;&gt;极客学院教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;docker&quot;&gt;初识Docker&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是什么其实不太好定义, 它是个新的东西, 原来没有. 官方是这么说的, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是一个开发、装载、运行程序的开源的平台, 致力于快速发布你的程序, 缩短了从写代码到发布上线之间的这个周期.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;容器可以把程序运行所需要的一切软件, 包括代码、运行时环境、系统工具、系统库等直接打包进一个完整的文件系统里. 容器运行时可保证程序运行的环境都是一致的.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是一个开源项目, Go语言实现, 遵从&lt;code class=&quot;highlighter-rouge&quot;&gt;Apache 2.0&lt;/code&gt;协议. &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Linux容器技术(LXC)&lt;/code&gt;上进一步封装, 使用户操作更简单, 像是操作一个轻量级的虚拟机.&lt;/p&gt;

&lt;h2 id=&quot;docker-1&quot;&gt;Docker与传统虚拟机技术的对比&lt;/h2&gt;

&lt;p&gt;一般都会拿&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;跟传统的虚拟机技术做比较, 下图是官网上的对比图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/docker_VM.png&quot; alt=&quot;Virtural Machine&quot; title=&quot;Virtural Machine&quot; /&gt;
&lt;img src=&quot;/static/images/docker_container.png&quot; alt=&quot;Container&quot; title=&quot;Container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;infrastructure(硬件)&lt;/code&gt;之上是我们的宿主机的操作系统, 传统虚拟机需要通过一层&lt;code class=&quot;highlighter-rouge&quot;&gt;HyperVisor&lt;/code&gt;进行模拟硬件, 然后再安装虚拟机操你工作系统, 在虚拟机中跑各种程序; &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;是在宿主机的操作系统上直接装了&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;引擎(硬件模拟Docker帮我们屏蔽了,虚拟机也不需要了), 直接在Docker引擎上可以跑各种程序.&lt;/p&gt;

&lt;h2 id=&quot;docker-engine&quot;&gt;Docker Engine&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Engine&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker platform&lt;/code&gt;中最核心的部分. &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Engine&lt;/code&gt;是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;client-server&lt;/code&gt;形式的程序, 它包括三部分:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;server : 一个一直运行的进程, 可叫做守护进程(daemon process)&lt;/li&gt;
  &lt;li&gt;REST API : 跟&lt;code class=&quot;highlighter-rouge&quot;&gt;daemon&lt;/code&gt;进行交互的API&lt;/li&gt;
  &lt;li&gt;client: 客户端工具, 给用户使用的命令行接口, &lt;code class=&quot;highlighter-rouge&quot;&gt;command line interface(CLI)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/docker_engine.png&quot; alt=&quot;docker_engine&quot; title=&quot;docker_engine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命令行脚本或命令通过&lt;code class=&quot;highlighter-rouge&quot;&gt;REST API&lt;/code&gt;跟&lt;code class=&quot;highlighter-rouge&quot;&gt;demon&lt;/code&gt;进行交互, 许多其他的docker组件, 也使用&lt;code class=&quot;highlighter-rouge&quot;&gt;REST API&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;CLI&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;docker-&quot;&gt;Docker 架构&lt;/h2&gt;

&lt;p&gt;Docker是&lt;code class=&quot;highlighter-rouge&quot;&gt;client-server&lt;/code&gt;架构, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker client&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker daemon&lt;/code&gt;交互来控制编译、运行、发布容器. &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;daemon&lt;/code&gt;运行在同一个系统里, 也可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;连接到远程的&lt;code class=&quot;highlighter-rouge&quot;&gt;daemon&lt;/code&gt;上, 它们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;交互&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/docker_architecture.png&quot; alt=&quot;docker_architecture&quot; title=&quot;docker_architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中有三个新内容: &lt;code class=&quot;highlighter-rouge&quot;&gt;image registry container&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker image&lt;/code&gt; : 一个只读模板, 比如, Ubuntu的操作系统上装了apache, 上面放了你自己的web应用, 这整个被创建成了一个镜像文件. 你可以自己制作镜像, 也可以下载别人的镜像.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker registry&lt;/code&gt;: registry用于保存&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;. 存储镜像的形式可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;的也可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;的. 官方提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker registry&lt;/code&gt;, 叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt;是官方提供的, 最大的一个镜像仓库.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker container&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;来创建的. 容器里面包含了程序运行的所有东西. 容器可以被&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;started&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stopped&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;moved&lt;/code&gt;, 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;deleted&lt;/code&gt;, 每个容器都是相互独立的.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些基本上就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;经常用到的东西了. 上面的大部分内容都来自官网,更多内容可以去官网看看.&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-11-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)-%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-07-11-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)-%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</guid>
        
        <category>Docker</category>
        
        
        <category>编程技术</category>
        
      </item>
    
  </channel>
</rss>
