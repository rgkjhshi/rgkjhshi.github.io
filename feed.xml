<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆水行舟</title>
    <description>Michael King&#39;s Blog</description>
    <link>http://loveshisong.cn/</link>
    <atom:link href="http://loveshisong.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 25 Nov 2016 11:06:13 +0800</pubDate>
    <lastBuildDate>Fri, 25 Nov 2016 11:06:13 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Spring的扩展点</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#beanfactorypostprocessor&quot;&gt;BeanFactoryPostProcessor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#beandefinitionregistrypostprocessor&quot;&gt;BeanDefinitionRegistryPostProcessor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#beanpostprocessor&quot;&gt;BeanPostProcessor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;一些例子&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#initializingbean&quot;&gt;InitializingBean&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#applicationcontextaware&quot;&gt;ApplicationContextAware&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#applicationlistener&quot;&gt;ApplicationListener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;启动的过程中, 会自动调用一些方法, 我们通过这些方法可以做一些特殊的操作. &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;中提供了几个常用的&lt;code class=&quot;highlighter-rouge&quot;&gt;Hook&lt;/code&gt;类, 我们只需要实现这些类并覆盖其方法, 并注入到&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;中, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;就会在恰当的时机调用我们定义的这些类. 下面就介绍几个常用的接口.&lt;/p&gt;

&lt;h2 id=&quot;beanfactorypostprocessor&quot;&gt;BeanFactoryPostProcessor&lt;/h2&gt;
&lt;p&gt;从名字上看, 它是&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;的后处理类, 我们先了解下&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;的地位相当高, 它是各种&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;的工厂, 提供了一系列的&lt;code class=&quot;highlighter-rouge&quot;&gt;getBean&lt;/code&gt;方法. 常用的&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;就继承了它.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryPostProcessor&lt;/code&gt;就是&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;的后处理类, 我们可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;初始化之后做一些操作. 它提供了个&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessBeanFactory()&lt;/code&gt;方法, 这个方法被调用的时候, 所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;已经被创建, 但是还没有被初始化.
也就是说, 通过它我们可以在初始化任何&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;之前, 做各种操作, 甚至读取并修改&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinition&lt;/code&gt;(bean定义的元数据).&lt;/p&gt;

&lt;h2 id=&quot;beandefinitionregistrypostprocessor&quot;&gt;BeanDefinitionRegistryPostProcessor&lt;/h2&gt;
&lt;p&gt;这个接口继承了&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryPostProcessor&lt;/code&gt;. 从名字上来看, 这个接口是&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinitionRegistry&lt;/code&gt;的后处理器, 我们先介绍下&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinitionRegistry&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinitionRegistry&lt;/code&gt;是用来注册&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinition&lt;/code&gt;的. &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinition&lt;/code&gt;就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;的配置元数据或&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;的描述信息, 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;的属性值, 构造方法的参数值等. 上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinition&lt;/code&gt;也是由它注册的.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryPostProcessor&lt;/code&gt;的扩展, 允许在&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryPostProcessor&lt;/code&gt;被调用之前对&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinition&lt;/code&gt;做一些操作, 尤其是它可以注册&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryPostProcessor&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinition&lt;/code&gt;. 它提供了一个方法&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessBeanDefinitionRegistry()&lt;/code&gt;, 这个方法被调用的时候, 所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinition&lt;/code&gt;已经被加载了, 但是所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;还没被创建.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;生成都有个顺序: &lt;code class=&quot;highlighter-rouge&quot;&gt;定义 --&amp;gt; 创建 --&amp;gt; 初始化&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessBeanDefinitionRegistry&lt;/code&gt;方法在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;被&lt;code class=&quot;highlighter-rouge&quot;&gt;定义&lt;/code&gt;但还没被&lt;code class=&quot;highlighter-rouge&quot;&gt;创建&lt;/code&gt;的时候执行.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryPostProcessor&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessBeanFactory&lt;/code&gt;方法在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;被&lt;code class=&quot;highlighter-rouge&quot;&gt;创建&lt;/code&gt;但还没被&lt;code class=&quot;highlighter-rouge&quot;&gt;初始化&lt;/code&gt;的时候执行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;beanpostprocessor&quot;&gt;BeanPostProcessor&lt;/h2&gt;
&lt;p&gt;从名字上来看, 这个接口是&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;的后处理器, 通过它我们可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;初始化前后做一些操作. 它提供了两个方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessBeforeInitialization&lt;/code&gt;: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;初始化之 &lt;strong&gt;前&lt;/strong&gt; 做一些操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessAfterInitialization&lt;/code&gt;: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;初始化之 &lt;strong&gt;后&lt;/strong&gt; 做一些操作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意这两个方法都有两个参数: &lt;code class=&quot;highlighter-rouge&quot;&gt;bean&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;beanName&lt;/code&gt;, 并需要返回一个对象. 所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;在被初始化前后都会调用这两个方法, 我们可以过滤出所关心的&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;对其进行一些操作, 比如把某个&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;替换成代理对象等.&lt;/p&gt;

&lt;p&gt;另外, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;中可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@PostConstruct&lt;/code&gt;注解来指定在被&lt;code class=&quot;highlighter-rouge&quot;&gt;Construct&lt;/code&gt;之后紧接着做一些初始化操作, 上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessAfterInitialization&lt;/code&gt;方法是在&lt;code class=&quot;highlighter-rouge&quot;&gt;@PostConstruct&lt;/code&gt;之后被调用的.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一些例子&lt;/h2&gt;
&lt;p&gt;我们通过一些简单例子来熟悉下上面的几个接口:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 一个普通的 Bean&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TestA PostConstruct&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 另一个普通的 Bean. 没看错, 就是循环依赖.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TestB PostConstruct&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 后处理器&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBeanDefinitionRegistryPostProcessor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionRegistryPostProcessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 这个方法来自 BeanDefinitionRegistryPostProcessor&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postProcessBeanDefinitionRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeanDefinitionRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postProcessBeanDefinitionRegistry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 这个方法来自 BeanFactoryPostProcessor&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postProcessBeanFactory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Bean后处理器&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;TestB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;beforeInitialization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;TestB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;afterInitialization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;用法就类似于上面, 那几条数据语句的顺序如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postProcessBeanDefinitionRegistry
postProcessBeanFactory
beforeInitialization
TestB PostConstruct
afterInitialization
beforeInitialization
TestA PostConstruct
afterInitialization
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;initializingbean&quot;&gt;InitializingBean&lt;/h2&gt;
&lt;p&gt;这个接口有一个方法:&lt;code class=&quot;highlighter-rouge&quot;&gt;afterPropertiesSet&lt;/code&gt;, 该方法在所有的属性都被赋值后调用. 属性被赋值是在初始化的时候做的, 与&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanPostProcessor&lt;/code&gt;结合来看, &lt;code class=&quot;highlighter-rouge&quot;&gt;afterPropertiesSet&lt;/code&gt;方法将在&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessBeforeInitialization&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;postProcessAfterInitialization&lt;/code&gt;之间被调用.&lt;/p&gt;

&lt;h2 id=&quot;applicationcontextaware&quot;&gt;ApplicationContextAware&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;提供了很多&lt;code class=&quot;highlighter-rouge&quot;&gt;Aware&lt;/code&gt;接口, 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryAware&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContextAware&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceLoaderAware&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContextAware&lt;/code&gt;等等. 这些接口一般都有个&lt;code class=&quot;highlighter-rouge&quot;&gt;setXXX&lt;/code&gt;来设置对应的组件. 如果我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;实现了这些&lt;code class=&quot;highlighter-rouge&quot;&gt;Aware的时候&lt;/code&gt;就可以获取对应的资源.&lt;/p&gt;

&lt;h2 id=&quot;applicationlistener&quot;&gt;ApplicationListener&lt;/h2&gt;
&lt;p&gt;这跟&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;中的监听器一样, 采用了观察者模式. 监听器往往都是监听某些事件源, 下面是配合&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContextAware&lt;/code&gt;一起使用的例子.&lt;/p&gt;

&lt;p&gt;我们定义一个事件, 在实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContextAware&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;中触发事件, 在实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationListener&lt;/code&gt;的类中对事件做出反应.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 自定义事件&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyEvent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 自定义 Bean 实现 ApplicationContextAware 接口&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloBean&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContextAware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 当调用 setName 时, 触发事件&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;publishEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这行代码执行完会立即被监听到&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 自定义监听器, 监听上面的事件&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApplicationListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onApplicationEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-22-Spring%E7%9A%84%E6%89%A9%E5%B1%95%E7%82%B9.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-22-Spring%E7%9A%84%E6%89%A9%E5%B1%95%E7%82%B9.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring boot在外部tomcat的部署</title>
        <description>&lt;hr /&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sprign boot&lt;/code&gt;提供了内嵌的&lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat&lt;/code&gt;, 允许我们直接把项目打包成&lt;code class=&quot;highlighter-rouge&quot;&gt;fat jar&lt;/code&gt;来运行. 但有时候我们仍想像之前一样,使用外部的&lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat&lt;/code&gt;, 将项目打成&lt;code class=&quot;highlighter-rouge&quot;&gt;war&lt;/code&gt;包来发布. &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring boot&lt;/code&gt;同样提供了非常简单的解决方案&lt;/p&gt;

&lt;p&gt;第一步, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;pom&lt;/code&gt;中添加&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;&lt;/code&gt;标签&lt;/p&gt;

&lt;p&gt;第二步, 主配置类&lt;code class=&quot;highlighter-rouge&quot;&gt;Application.java&lt;/code&gt;继承&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootServletInitializer&lt;/code&gt;并重写&lt;code class=&quot;highlighter-rouge&quot;&gt;configure&lt;/code&gt;方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringBootServletInitializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;springApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第三步, 修改pom, 把内嵌tomcat改成&lt;code class=&quot;highlighter-rouge&quot;&gt;provided&lt;/code&gt;. 这样我们可以很方便的切换成在本地通过&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;方法来启动应用(去掉&lt;code class=&quot;highlighter-rouge&quot;&gt;provided&lt;/code&gt;就可以了).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这三步就可以像原来一样打包部署到外部&lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat&lt;/code&gt;了&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-21-Spring-boot%E5%9C%A8%E5%A4%96%E9%83%A8tomcat%E7%9A%84%E9%83%A8%E7%BD%B2.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-21-Spring-boot%E5%9C%A8%E5%A4%96%E9%83%A8tomcat%E7%9A%84%E9%83%A8%E7%BD%B2.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring boot与Servlet组件</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#servlet&quot;&gt;Servlet组件注册&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#filter&quot;&gt;注册Filter&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;方式一&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;方式二&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;方式三&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listener&quot;&gt;注册Listener&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#servlet-1&quot;&gt;注册Servlet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;servlet&quot;&gt;Servlet组件注册&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的组件包括&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Listener&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;, 具体详情可参考&lt;a href=&quot;http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-16-Servlet%E8%AF%A6%E8%A7%A3.html&quot;&gt;Servlet详解&lt;/a&gt;.&lt;br /&gt;
普通的web项目都是从&lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;中配置, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring boot&lt;/code&gt;中为我们提供了很多注册的方式. 我们先以&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;举例, 然后再介绍&lt;code class=&quot;highlighter-rouge&quot;&gt;Listener&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的注册, 他们的注册方式基本一致.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;filter&quot;&gt;注册Filter&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;方式一&lt;/h3&gt;
&lt;p&gt;直接作为一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;注册.&lt;br /&gt;
自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;通常可以实现&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;接口, 或者可以继承&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;提供的&lt;code class=&quot;highlighter-rouge&quot;&gt;GenericFilterBean&lt;/code&gt;.&lt;br /&gt;
当&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;监测到有&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.servlet.Filter&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;bean&lt;/code&gt;时就会自动加入过滤器调用链.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点: 简单&lt;/li&gt;
  &lt;li&gt;缺点: 不可控(比如无法配置要过滤的URL等), 所以这种方式基本不用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericFilterBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//  some code&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;方式二&lt;/h3&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;FilterRegistrationBean&lt;/code&gt;注册, 这个类实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContextInitializer&lt;/code&gt;接口&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点: 简单, 可控&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如还是注册上面写的那个&lt;code class=&quot;highlighter-rouge&quot;&gt;MyFilter&lt;/code&gt;, 注册及配置的代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterRegistrationBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registMyFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FilterRegistrationBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterRegistrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myFilter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUrlPatterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;方式三&lt;/h3&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@ServletComponentScan&lt;/code&gt;扫描&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebFilter&lt;/code&gt;注解自动注册&lt;/p&gt;

&lt;p&gt;这种方式需要在 &lt;strong&gt;主配置类&lt;/strong&gt; 上加&lt;code class=&quot;highlighter-rouge&quot;&gt;@ServletComponentScan&lt;/code&gt;注解, 在我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;MyFilter&lt;/code&gt;类上加&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebFilter&lt;/code&gt;注解. 代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 主配置类&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ServletComponentScan&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 自定义的过滤器类&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;myFilter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlPatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericFilterBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//  some code&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;listener&quot;&gt;注册Listener&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Listener&lt;/code&gt;的注册方式跟&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;一样, 只是继承或实现的接口, 添加的注解不一样.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;比如实现&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContextListener&lt;/code&gt;接口&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletListenerRegistrationBean&lt;/code&gt;注册&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebServlet&lt;/code&gt;注解注册.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;servlet-1&quot;&gt;注册Servlet&lt;/h2&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;项目中, 都是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherServlet&lt;/code&gt;分发, 基本不需要自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;. 下面仅介绍使用方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注意不要使用方式一, 一定要指定相应的URL&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletRegistrationBean&lt;/code&gt;注册&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebServlet(name = &quot;myServlet&quot;, urlPatterns = &quot;/abc/*&quot;)&lt;/code&gt;注解注册.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sat, 19 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-19-Spring-boot%E4%B8%8EServlet%E7%BB%84%E4%BB%B6.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-19-Spring-boot%E4%B8%8EServlet%E7%BB%84%E4%BB%B6.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring boot与HandlerInterceptor</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#handlerinterceptor&quot;&gt;HandlerInterceptor&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;拦截器中的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot--interceptor&quot;&gt;Spring boot 定制 Interceptor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;handlerinterceptor&quot;&gt;HandlerInterceptor&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;提供的拦截器&lt;code class=&quot;highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;不同的是, &lt;code class=&quot;highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt;采用&lt;code class=&quot;highlighter-rouge&quot;&gt;AOP&lt;/code&gt;的方式在&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;方法执行之前进行拦截, 可以进行更精细的控制.&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;中定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt;只需要实现&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerInterceptor&lt;/code&gt;接口, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;已经为我们提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerInterceptorAdapter&lt;/code&gt;, 我们只需要继承它, 覆盖想要重写的方法.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;拦截器中的方法&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt;中有如下方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;preHandle&lt;/code&gt;: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;处理之前调用, 返回&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;时整个请求结束&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postHandle&lt;/code&gt;: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;调用之后执行, 但它会在&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherServlet&lt;/code&gt;进行视图的渲染之前执行, 也就是说在这个方法中你可以对&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAndView&lt;/code&gt;进行操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;afterCompletion&lt;/code&gt;: 在整个请求完成之后执行, 也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherServlet&lt;/code&gt;已经渲染了视图之后执行; 这个方法的主要作用是用于清理资源的&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;afterConcurrentHandlingStarted&lt;/code&gt;: 这个方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncHandlerInterceptor&lt;/code&gt;接口中添加的. 当&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;中有异步请求方法的时候会触发该方法, 异步请求先支持&lt;code class=&quot;highlighter-rouge&quot;&gt;preHandle&lt;/code&gt;、然后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;afterConcurrentHandlingStarted&lt;/code&gt;, 异步线程完成之后执行会再执行&lt;code class=&quot;highlighter-rouge&quot;&gt;preHandle、postHandle、afterCompletion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于最后那个方法, 举个列子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DeferredResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DeferredResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeferredResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;成功&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;上面这样的&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;里面有个异步结果, 则拦截器的执行顺序将是: &lt;code class=&quot;highlighter-rouge&quot;&gt;preHandle -&amp;gt; afterConcurrentHandlingStarted -&amp;gt; preHandle -&amp;gt; postHandle -&amp;gt; afterCompletion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;如果把&lt;code class=&quot;highlighter-rouge&quot;&gt;dr.setResult(&quot;成功&quot;);&lt;/code&gt; 这句删掉, 将只执行&lt;code class=&quot;highlighter-rouge&quot;&gt;preHandle -&amp;gt; afterConcurrentHandlingStarted&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以认为, &lt;code class=&quot;highlighter-rouge&quot;&gt;afterConcurrentHandlingStarted&lt;/code&gt;是返回异步结果时调用(此时异步结果里不需要有数据), 而&lt;code class=&quot;highlighter-rouge&quot;&gt;postHandle&lt;/code&gt;必须是返回的结果执行完, 异步结果中有数据了(&lt;code class=&quot;highlighter-rouge&quot;&gt;dr.setResult&lt;/code&gt;)才调用.&lt;/p&gt;

&lt;h2 id=&quot;spring-boot--interceptor&quot;&gt;Spring boot 定制 Interceptor&lt;/h2&gt;

&lt;p&gt;首先我们先定义我们自己的拦截器, 方式还是继承&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerInterceptorAdapter&lt;/code&gt;, 覆盖想要的方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;像这样我们把&lt;code class=&quot;highlighter-rouge&quot;&gt;MyInterceptor&lt;/code&gt;作为一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring boot&lt;/code&gt;并不会帮我们注册到拦截器列表中. 就像添加消息转换器一样, 我们可以在继承&lt;code class=&quot;highlighter-rouge&quot;&gt;WebMvcConfigurerAdapter&lt;/code&gt;的配置类里, 通过覆盖方法来添加:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 拦截器需要手动加入到调用链中&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterceptorRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Fri, 18 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-18-Spring-boot%E4%B8%8EHandlerInterceptor.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-18-Spring-boot%E4%B8%8EHandlerInterceptor.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring boot与HttpMessageConverter</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#httpmessageconverter&quot;&gt;默认的HttpMessageConverter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#httpmessageconverter-1&quot;&gt;自定义HttpMessageConverter&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;方式一&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;方式二&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;方式三&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;httpmessageconverter&quot;&gt;默认的HttpMessageConverter&lt;/h2&gt;
&lt;p&gt;在构建&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;服务时, 我们常常会把一个对象直接转换成&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;对象, 就像下面这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;中文&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;提供了多种&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageConverter&lt;/code&gt;让我们对结果进行转换, 像上面那样, 把对象转换成&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;格式输出, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring boot&lt;/code&gt;默认使用&lt;code class=&quot;highlighter-rouge&quot;&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;进行转换. 如果我们想要使用另一个工具进行&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;转换, 或者想添加自己的&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageConverter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring boot&lt;/code&gt;提供了多种不通的方式来实现.&lt;/p&gt;

&lt;h2 id=&quot;httpmessageconverter-1&quot;&gt;自定义HttpMessageConverter&lt;/h2&gt;
&lt;p&gt;我们以&lt;code class=&quot;highlighter-rouge&quot;&gt;GsonHttpMessageConverter&lt;/code&gt;为例, 除了主配置类之外, 我们添加另一个配置类, 从这个类中添加自己的&lt;code class=&quot;highlighter-rouge&quot;&gt;Converter&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;方式一&lt;/h3&gt;
&lt;p&gt;直接添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt;, 它将添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;Converter&lt;/code&gt;列表的最前面&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点: 简单, 无需继承其他类&lt;/li&gt;
  &lt;li&gt;缺点: 不容易直观地看出, 有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Converter&lt;/code&gt;列表&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonHttpMessageConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gsonHttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serializeNulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// null 也序列化&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 时间转化为特定格式 yyyy-MM-dd HH:mm:ss&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsonHttpMessageConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonHttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setGson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;方式二&lt;/h3&gt;
&lt;p&gt;继承&lt;code class=&quot;highlighter-rouge&quot;&gt;WebMvcConfigurerAdapter&lt;/code&gt;, 覆盖&lt;code class=&quot;highlighter-rouge&quot;&gt;configureMessageConverters&lt;/code&gt;方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点: 直观看到有个&lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;, 断点调试会发现, 这是向列表中添加的第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Converter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;缺点: 要是有多个配置也以同样的方式添加了其他&lt;code class=&quot;highlighter-rouge&quot;&gt;Converter&lt;/code&gt;, 就无法保证以固定的顺序添加到列表中了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configureMessageConverters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serializeNulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// null 也序列化&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 时间转化为特定格式 yyyy-MM-dd HH:mm:ss&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsonHttpMessageConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonHttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setGson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;方式三&lt;/h3&gt;
&lt;p&gt;继承&lt;code class=&quot;highlighter-rouge&quot;&gt;WebMvcConfigurerAdapter&lt;/code&gt;, 覆盖&lt;code class=&quot;highlighter-rouge&quot;&gt;extendMessageConverters&lt;/code&gt;方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点: 这个方法在其他&lt;code class=&quot;highlighter-rouge&quot;&gt;Converter&lt;/code&gt;加入列表之后执行, 可以进行精确控制, 如顺序等&lt;/li&gt;
  &lt;li&gt;缺点: 同样有可能, 别的配置里也以相同方式重写了这个方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configureMessageConverters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 把其他 converter 清除掉&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serializeNulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// null 也序列化&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 时间转化为特定格式 yyyy-MM-dd HH:mm:ss&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsonHttpMessageConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonHttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setGson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-17-Spring-boot%E4%B8%8EHttpMessageConverter.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-17-Spring-boot%E4%B8%8EHttpMessageConverter.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Servlet详解</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#servlet&quot;&gt;Servlet&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#servlet-1&quot;&gt;Servlet生命周期&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#servlet-2&quot;&gt;Servlet配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#servletconfig&quot;&gt;ServletConfig&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#servletcontext&quot;&gt;ServletContext&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#filter&quot;&gt;Filter&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#filter-1&quot;&gt;Filter生命周期&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#decorator&quot;&gt;装饰器模式(decorator)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listener&quot;&gt;Listener&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#servlet-3&quot;&gt;Servlet监听器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;servlet&quot;&gt;Servlet&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;是Sun公司提供的用于web开发的接口, 我们一般把实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;接口的程序称为&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;程序&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;应该由web服务器调用(比如通过配置&lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;), 自己不能独立运行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;接口有两个实现类&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServlet --&amp;gt; GenericServlet&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServlet&lt;/code&gt;重写了&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;方法, 根据请求方式自动调用&lt;code class=&quot;highlighter-rouge&quot;&gt;doGet&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;doPost&lt;/code&gt;方法, 我们一般继承这个类, 重写&lt;code class=&quot;highlighter-rouge&quot;&gt;doGet、doPost&lt;/code&gt;即可.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;servlet-1&quot;&gt;Servlet生命周期&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/servlet.png&quot; alt=&quot;Servlet生命周期&quot; title=&quot;Servlet生命周期&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图中画出的是第一次请求&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的情况, 若对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;对象还没被创建, 则创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;对象&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;对象只初始化一次, 只会执行一次&lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt;方法, &lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;初始化好之后, 新请求将直接到第5步&lt;/li&gt;
  &lt;li&gt;第2步中解析出的应用对应&lt;code class=&quot;highlighter-rouge&quot;&gt;getContextPath&lt;/code&gt;, 资源对应&lt;code class=&quot;highlighter-rouge&quot;&gt;getServletPath&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;图中没画出&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的消亡, &lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;对象被创建后常驻内存, 继续为其他请求服务; web应用停止前调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;destroy()&lt;/code&gt;方法, &lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;生命周期才结束&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;servlet-2&quot;&gt;Servlet配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;是有第一个请求时被创建, 可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;中通过&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/code&gt;元素指定在web容器启动时就直接初始化&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;所映射的URL由&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/code&gt;里的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt;指定, 它只有两个固定格式:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*.扩展名&lt;/code&gt;, 如: &lt;code class=&quot;highlighter-rouge&quot;&gt;*.do&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;以&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;开头(并以&lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt;结尾), 如: &lt;code class=&quot;highlighter-rouge&quot;&gt;/abc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/abc/*&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;URL映射以最精确的为准, 请求&lt;code class=&quot;highlighter-rouge&quot;&gt;/abc&lt;/code&gt;时, 映射&lt;code class=&quot;highlighter-rouge&quot;&gt;/abc&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;/abc/*&lt;/code&gt;都可以匹配, 但优先选择&lt;code class=&quot;highlighter-rouge&quot;&gt;/abc&lt;/code&gt;; 请求&lt;code class=&quot;highlighter-rouge&quot;&gt;/a.do&lt;/code&gt;时,
&lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;*.do&lt;/code&gt;都可以匹配, 但优先选择&lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt;(即&lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt;优先级高于&lt;code class=&quot;highlighter-rouge&quot;&gt;*.do&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;servletconfig&quot;&gt;ServletConfig&lt;/h3&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;中可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/code&gt;标签为&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;配置一些参数. &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServlet&lt;/code&gt;类也实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletConfig&lt;/code&gt;接口, 在创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;对象时先把参数封装到&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletConfig&lt;/code&gt;对象中, 在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;方法时把&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletConfig&lt;/code&gt;对象传给&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;类中, 我们可以获取&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletConfig&lt;/code&gt;中的参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ServletConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这个方法继承自GenericServlet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;charset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这可获取我们配置的参数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;servletcontext&quot;&gt;ServletContext&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;表示应用的上下文, 在Web容器在启动时, 会为每个Web应用程序都创建一个对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;对象, 一个应用只有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;对象, 被所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;共享.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;的属性可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/code&gt;标签来指定, 在程序中可以这样获取这些属性:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ServletConfig 里维护了 ServletContext 对象的引用&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 因为 Servlet类实现了 ServletConfig 接口, 所以也可以直接获取&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 获取属性&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 获取 &amp;lt;display-name&amp;gt; 标签配置的应用名&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContextName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;filter&quot;&gt;Filter&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet API&lt;/code&gt;中提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;接口, 称为过滤器, 所有的请求要先经过过滤器. web服务器在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;service()&lt;/code&gt;方法之前会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;doFilter()&lt;/code&gt;方法.&lt;/p&gt;

&lt;p&gt;web服务器把所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;按注册顺序组成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;filterChain&lt;/code&gt;, 在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;doFilter()&lt;/code&gt;方法时, 会传递&lt;code class=&quot;highlighter-rouge&quot;&gt;filterChain&lt;/code&gt;对象进来. &lt;code class=&quot;highlighter-rouge&quot;&gt;filterChain&lt;/code&gt;也有个&lt;code class=&quot;highlighter-rouge&quot;&gt;doFilter&lt;/code&gt;方法, 当调用&lt;code class=&quot;highlighter-rouge&quot;&gt;filterChain.doFilter()&lt;/code&gt;时, web服务器会检查&lt;code class=&quot;highlighter-rouge&quot;&gt;filterChain&lt;/code&gt;中是否还有&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, 如果有, 则调用下一个&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;filter-1&quot;&gt;Filter生命周期&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;的创建和销毁由web服务器负责. web服务器启动时创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;实例对象, 并调用其&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;方法, 完成对象的初始化, 为用户请求作好拦截的准备. &lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;对象只创建一次, &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;方法只执行一次. &lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;也有初始化参数, 被封装到&lt;code class=&quot;highlighter-rouge&quot;&gt;FilterConfig&lt;/code&gt;中, 它有个方法&lt;code class=&quot;highlighter-rouge&quot;&gt;getServletContext()&lt;/code&gt;可获取&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;decorator&quot;&gt;装饰器模式(decorator)&lt;/h3&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet API&lt;/code&gt;中体现了一种设计模式: 装饰器模式&lt;/p&gt;

&lt;p&gt;装饰器模式的实现步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先看需要被增强对象实现了什么接口或继承了什么父类, 编写一个类也去继承这些接口或父类&lt;/li&gt;
  &lt;li&gt;内部定义一个变量, 类型为被包装类的类型, 并提供一个构造函数用于接收被包装对象&lt;/li&gt;
  &lt;li&gt;覆盖需要增强的方法, 添加增强内容&lt;/li&gt;
  &lt;li&gt;实现接口中其他方法, 调用被包装对象的对应方法.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet API&lt;/code&gt; 提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServletRequestWrapper&lt;/code&gt;类, 该类就是采用装饰器模式对&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServletRequest&lt;/code&gt;进行了增强(实际上在内部仅调用了一下所包装的对象的对应方法).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;listener&quot;&gt;Listener&lt;/h2&gt;
&lt;p&gt;全称是事件监听器&lt;code class=&quot;highlighter-rouge&quot;&gt;EventListener&lt;/code&gt;, 全类名是&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.EventListener&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet API&lt;/code&gt;中的监听器也是继承这个接口.&lt;/p&gt;

&lt;p&gt;监听器是典型的 &lt;strong&gt;观察者模式&lt;/strong&gt; , 使用监听器要了解三个概念:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;事件源: 就是被监听的对象&lt;/li&gt;
  &lt;li&gt;事件对象: 就是被监听的对象发生的动作, 封装成了一个事件对象. 比如增加了一个属性&lt;/li&gt;
  &lt;li&gt;监听器: 对事件源发生的动作做出反应的对象. 由开发人员编写, 在事件监听器中, 可通过事件对象拿到事件源, 从而对事件源上的操作进行处理.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;servlet-3&quot;&gt;Servlet监听器&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;中的监听器不是直接注册在事件源上的, 而是由由WEB容器负责注册.&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;规范中定义了多种类型的监听器, 它们用于监听的事件源分别为&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpSession&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletRequest&lt;/code&gt;这三个对象.&lt;/p&gt;

&lt;p&gt;根据监听的类型不同, 又可分为:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;监听事件源对象创建和销毁的事件监听器, 如: &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContextListener, HttpSessionListener, ServletRequestListener&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;监听事件源对象属性添加和删除的事件监听器, 如: &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContextAttributeListener, HttpSessionAttributeListener, ServletRequestAttributeListener&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;监听绑定到&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpSession&lt;/code&gt;中的对象的状态的事件监听器, 如: &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpSessionBindingListener, HttpSessionActivationListener&lt;/code&gt;, 这俩监听器比较特殊, 不需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;中进行注册&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 16 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-16-Servlet%E8%AF%A6%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-16-Servlet%E8%AF%A6%E8%A7%A3.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>关于单元测试</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;前言&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;关于测试工具&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#junit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Junit&lt;/code&gt;使用详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mockito&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito&lt;/code&gt;使用详解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;参数匹配器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot-test&quot;&gt;Spring Boot Test&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;模仿和侦查&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;测试是开发过程中必不可少的, 但是实际工作中严格按照标准, 测试用例能够覆盖大部分业务逻辑的, 估计连一半都不到.&lt;/p&gt;

&lt;p&gt;每天的工作流程应该是这样的:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;上把代码更新到本地, 跑通所有单元测试, 确保代码修改前是正确的&lt;/li&gt;
  &lt;li&gt;新增代码&lt;/li&gt;
  &lt;li&gt;对新增代码进行单元测试, 保证新增代码没有问题&lt;/li&gt;
  &lt;li&gt;提交到&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;关于测试工具&lt;/h3&gt;
&lt;p&gt;单元测试主要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Junit&lt;/code&gt;工具, 已经是很古老的技术了, 现在的&lt;code class=&quot;highlighter-rouge&quot;&gt;Junit4&lt;/code&gt;直接通过注解就可以实现, 特别方便.&lt;/p&gt;

&lt;p&gt;另一个测试的必备利器就是数据模拟工具&lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito&lt;/code&gt;. 假设我们在代码中有如下的调用关系:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/unit_test_01.png&quot; alt=&quot;类调用关系&quot; title=&quot;类调用关系&quot; /&gt;
我们要对&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;进行单元测试的时候需要整个调用树都构建出来, 即&lt;code class=&quot;highlighter-rouge&quot;&gt;BCDE&lt;/code&gt;的示例都需要, 但是显然我们只关心&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, 这个时候我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito&lt;/code&gt;模拟&lt;code class=&quot;highlighter-rouge&quot;&gt;BC&lt;/code&gt;的返回, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;mock对象&lt;/code&gt;来代替&lt;code class=&quot;highlighter-rouge&quot;&gt;BC&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;junit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Junit&lt;/code&gt;使用详解&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Junit4&lt;/code&gt;使用方式特别简单, 只需要加一些注解就可以. 下面对一些常用的注解进行简单说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Test&lt;/code&gt;: 标识一个普通的测试方法, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Test(timeout = 1000)&lt;/code&gt;表示测试方法执行超过1000毫秒后算超时, 测试将失败; &lt;code class=&quot;highlighter-rouge&quot;&gt;@Test(expected = Exception.class)&lt;/code&gt;表示测试方法期望得到的异常类, 如果方法执行没有抛出指定的异常, 则测试失败&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Before&lt;/code&gt;: 初始化方法, 对每一个方法都执行一次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@BeforeClass&lt;/code&gt;: 在所有测试方法前执行一次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@After&lt;/code&gt;: 在每个测试方法后执行一次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@AfterClass&lt;/code&gt;: 在所有测试方法后执行一次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Ignore(&quot;not ready yet&quot;)&lt;/code&gt;: 表示暂时不执行该测试方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RunWith&lt;/code&gt;: 在JUnit中有很多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Runner&lt;/code&gt;, 他们负责调用你的测试代码, 该注解用于指定一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Runner&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Suite.SuiteClasses&lt;/code&gt;: 打包测试, 需要与&lt;code class=&quot;highlighter-rouge&quot;&gt;@RunWith(Suite.class)&lt;/code&gt;联合使用, 比如下面的例子:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SuiteClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ATest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ABCSuite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 类中不需要编写代码&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Parameterized.Parameters&lt;/code&gt;: 参数化测试, 这个稍微复杂一些, 一般有这么几个条件:
    &lt;ul&gt;
      &lt;li&gt;该类被注解为&lt;code class=&quot;highlighter-rouge&quot;&gt;@RunWith(Parameterized.class)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;这个类有一个构造函数, 存储测试数据&lt;/li&gt;
      &lt;li&gt;这个类有一个静态方法生成并返回测试数据, 并注明&lt;code class=&quot;highlighter-rouge&quot;&gt;@Parameters&lt;/code&gt;注解&lt;/li&gt;
      &lt;li&gt;这个类有一个测试, 它需要注解&lt;code class=&quot;highlighter-rouge&quot;&gt;@Test&lt;/code&gt;到方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是参数化测试的一个例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameterized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 该构造方法的参数与下面@Parameters注解的方法中的Object数组中值的顺序对应
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParameterTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 将对参数构建出的每个对象都执行一遍, 即本例中将会执行三遍&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;小&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 相当于通过不通参数构建出了三个对象
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Parameterized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Parameters&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Object 数组中值的顺序注意要和上面的构造方法ParameterTest的参数对应&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;小明2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;坏&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;莉莉&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外单测中还常用到一些断言方法, 比较简单, 不再介绍.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mockito&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito&lt;/code&gt;使用详解&lt;/h2&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito&lt;/code&gt;可以设定当调用哪个对象的哪个方法时, 返回什么数据; 还可以验证调用了某对象的某方法几次.&lt;br /&gt;
创建mock对象不能对&lt;code class=&quot;highlighter-rouge&quot;&gt;final, Anonymous, primitive类&lt;/code&gt;进行mock&lt;/p&gt;

&lt;p&gt;下面是一个简单的例子及相关说明&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 创建mock对象，参数可以是类，也可以是接口&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置方法的预期返回值&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 当调用 list.get(0) 时, 将返回之前设置的值&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// junit 测试&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 设定方法返回某异常&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test excpetion&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// stubbing 形式, doXXX 返回的是一个 Stubber 对象&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 效果与最上面那个when一样&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;void exception&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 返回 void 的方法&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/**
         * 验证方法调用, 不关心返回值, 只关心调用了几次
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 验证是否调用了 list.get(0)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 默认调用一次,times(1)可以省略&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 验证调用三次&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 一次也没调用&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 一次也没调用, 同上&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atLeastOnce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 至少一次&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atLeast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 至少两次&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atMost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 最多5次&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;参数匹配器&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito&lt;/code&gt;类继承于&lt;code class=&quot;highlighter-rouge&quot;&gt;Matchers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Matchers&lt;/code&gt;类中有许多参数匹配器用于匹配一种类型, 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;anyInt, anyString, anyMap...&lt;/code&gt;  &lt;/li&gt;
  &lt;li&gt;如果使用参数匹配器, 那么所有的参数都要使用参数匹配器, 不能即有&lt;code class=&quot;highlighter-rouge&quot;&gt;get(0)&lt;/code&gt;又有&lt;code class=&quot;highlighter-rouge&quot;&gt;get(anyInt())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 再这么用, 就会报错&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-boot-test&quot;&gt;Spring Boot Test&lt;/h2&gt;
&lt;p&gt;与单元测试不通, 在Spring中需要初始化完整的应用程序上下文, 因此这种测试常称为集成测试.&lt;br /&gt;
Spring Boot提供了一个测试相关的starter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们在之前的Spring项目中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;JUnit&lt;/code&gt;测试时, 测试类是这样写的:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Spring JUnit支持&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 指定启动类&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebAppConfiguration&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 如果是Web项目, Junit需要模拟ServletContext, 因此需要加上这个注解&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleServiceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot 1.4&lt;/code&gt;已经做了优化, 变成了这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleServiceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringRunner&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringJUnit4ClassRunner&lt;/code&gt;的新名字, 这个名字只是让名字看起来简单些.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootTest&lt;/code&gt;将使用你的&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;来创建&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;classes&lt;/code&gt;属性可以不指定,会自动发现, 另外还有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;webEnvironment&lt;/code&gt;属性用于指定web的测试环境&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot 1.3&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringApplicationConfiguration&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebIntegrationTest&lt;/code&gt;已经被废弃掉了, 被&lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt;替代了&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;模仿和侦查&lt;/h3&gt;
&lt;p&gt;在Spring项目中做测试的时候会发现大部分情况下都需要模拟特定的bean, 使某个bean的特定方法返回你想要的数据. 在Spring Boot中变的特别简单, 比如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这个bean是被mock出来的, 会替换掉spring中的那个bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reverser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这个bean是spring中的&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exampleTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// RemoteService 已经被注入到了 reverser bean里了&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mock&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverseSomeCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;是把原来的bean用mock的bean整个替换掉了, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;@SpyBean&lt;/code&gt;还会执行原来bean的方法, 但是后面可以mock想要的方法&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-09-%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-09-%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring Boot集成MyBatis</title>
        <description>&lt;p&gt;本文先介绍&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;的数据源的配置, 然后介绍如何集成&lt;code class=&quot;highlighter-rouge&quot;&gt;MyBatis&lt;/code&gt;(有两种方式)&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;配置数据源&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;连接池&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mybatis&quot;&gt;集成MyBatis&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mybatis-spring&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring&lt;/code&gt;方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mybatis-spring-boot-starter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring-boot-starter&lt;/code&gt;方式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;配置数据源&lt;/h2&gt;

&lt;p&gt;Java的&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.sql.DataSource&lt;/code&gt;接口提供了标准的使用数据库连接的方法. 建立数据库连接只需要提供&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;等相关参数, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;就可以创建数据源. 当然我们必须提供相应的包:&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-data-jpa&lt;/code&gt;, 这个包已经把&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-jdbc&lt;/code&gt;包含进来了.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;提供了内嵌数据库的支持(包括&lt;code class=&quot;highlighter-rouge&quot;&gt;H2, HSQL, Derby&lt;/code&gt;), 当我们使用内嵌数据库的时候, 连&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;等这些配置都不需要了, 直接导入相应的数据库依赖包就可以, 比如使用&lt;code class=&quot;highlighter-rouge&quot;&gt;HSQL&lt;/code&gt;, 只需添加pom依赖:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.hsqldb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hsqldb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果不用内嵌数据库, 而是用&lt;code class=&quot;highlighter-rouge&quot;&gt;Mysql&lt;/code&gt;的话, 就需要&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;等配置, 然后在把&lt;code class=&quot;highlighter-rouge&quot;&gt;Mysql&lt;/code&gt;相关的包依赖添加进来:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;连接池&lt;/h3&gt;
&lt;p&gt;线上使用数据库通常都会通过数据库连接池, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;会按照下面的策略选取一个:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tomcat 连接池性能较高, &lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat-jdbc&lt;/code&gt;可用时优先选择(&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-jdbc&lt;/code&gt;里已经包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat-jdbc&lt;/code&gt;包)&lt;/li&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;HikariCP&lt;/code&gt;可用则选择它&lt;/li&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;Commons DBCP&lt;/code&gt;可用则使用它, 但不推荐&lt;/li&gt;
  &lt;li&gt;最后, 如果&lt;code class=&quot;highlighter-rouge&quot;&gt;Commons DBCP2&lt;/code&gt;可用, 则使用它&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以通过在应用配置的参数&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.datasource.type&lt;/code&gt;指定一个连接池, 比如使用阿里的德鲁伊(&lt;code class=&quot;highlighter-rouge&quot;&gt;Druid&lt;/code&gt;):&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.datasource.type=com.alibaba.druid.pool.DruidDataSource&lt;/code&gt;, 这个需要添加依赖:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;druid&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.18&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于数据源的配置, 可在应用配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中进行配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.datasource.url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jdbc:mysql://localhost/test
spring.datasource.username&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dbuser
spring.datasource.password&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dbpass
spring.datasource.driver-class-name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;com.mysql.jdbc.Drive
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对于不同连接池还有一些其他参数(&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.datasource.tomcat.*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.datasource.hikari.*&lt;/code&gt;), 比如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Number of ms to wait before throwing an exception if no connection is available.&lt;/span&gt;
spring.datasource.tomcat.max-wait&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10000
&lt;span class=&quot;c&quot;&gt;# Maximum number of active connections that can be allocated from this pool at the same time.&lt;/span&gt;
spring.datasource.tomcat.max-active&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50
&lt;span class=&quot;c&quot;&gt;# Validate the connection before borrowing it from the pool.&lt;/span&gt;
spring.datasource.tomcat.test-on-borrow&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于数据源, 我们仅需要配置一下参数, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;已经自动帮我们配置了, 使用的时候直接注入就可以.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mybatis&quot;&gt;集成MyBatis&lt;/h2&gt;

&lt;p&gt;我们可以使用传统的&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring&lt;/code&gt;的方式, 引入&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring&lt;/code&gt;包, 手动配置&lt;code class=&quot;highlighter-rouge&quot;&gt;MyBatis&lt;/code&gt;, 这种方式跟原来使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;框架时比较类似, 比较灵活, 可自行配置&lt;code class=&quot;highlighter-rouge&quot;&gt;SqlSessionFactoryBean&lt;/code&gt;. 这是我们将用的第一种方式.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyBatis&lt;/code&gt;官方也提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;starter&lt;/code&gt;形式的包(&lt;a href=&quot;https://github.com/mybatis/spring-boot-starter&quot;&gt;GitHub地址&lt;/a&gt;), 这个&lt;code class=&quot;highlighter-rouge&quot;&gt;starter&lt;/code&gt;里已经包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring&lt;/code&gt;. 这是第二种方式, 这种方式更简单, 只需要在应用配置&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;中添加配置即可.&lt;/p&gt;

&lt;p&gt;不管哪种方式, 包依赖和数据源的配置少不了, 因此先把数据源配置(在&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;中)贴出来:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 数据库配置&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jdbc:mysql://10.90.187.120:3306/test?useUnicode=true&amp;amp;characterEncoding=UTF-8&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dbname&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dbpass&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;driver-class-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mysql.jdbc.Driver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;包依赖(第一种方式只要包含&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring&lt;/code&gt;即可):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mybatis-spring&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring&lt;/code&gt;方式&lt;/h3&gt;
&lt;p&gt;这种方式不再需要额外的配置, 主配置类该怎么写还是怎么写, 另外我们专门为&lt;code class=&quot;highlighter-rouge&quot;&gt;MyBatis&lt;/code&gt;添加两个配置类:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// com.example.project.config.MyBatisConfig.java 这个类是MyBatis的配置类&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 不要忘记加配置注解&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableTransactionManagement&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 事务管理&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBatisConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionManagementConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBatisConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这个数据源, Spring boot 会自动注入&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlSessionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlSessionFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SqlSessionFactoryBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlSessionFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置数据源&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 自动重命名&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTypeAliasesPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.project.entity&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置 typeHandler&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTypeHandlersPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.project.typeHandler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 添加拦截器插件 (如果有的话, 分页插件, 分表插件等)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        sqlSessionFactory.setPlugins(new Interceptor[]{pageHelper});&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置 mapper 文件&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ResourcePatternResolver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathMatchingResourcePatternResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMapperLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:sqlmaps/*.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;初始化SqlSessionFactory失败&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlSessionTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlSessionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlSessionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlSessionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotationDrivenTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSourceTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// com.example.project.config.MyBatisMapperScannerConfig.java 这个类用来设置自动扫描的路径&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// MapperScannerConfigurer 执行的比较早, 所以要加下面这个注释, 不然其他 bean 还没初始化&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureAfter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBatisConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 确保在 MyBatisConfig 初始化之后初始化&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBatisMapperScannerConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapperScannerConfigurer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapperScannerConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MapperScannerConfigurer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapperScannerConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapperScannerConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置自动扫描包, 该包下的Mapper(Dao)将会被mybatis自动注册, 不用写实现类&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mapperScannerConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBasePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.project.dao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mapperScannerConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSqlSessionFactoryBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapperScannerConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种方式, &lt;code class=&quot;highlighter-rouge&quot;&gt;MyBatis&lt;/code&gt;就配置完了, 剩下的就是写实体和对应的Mapper(&lt;code class=&quot;highlighter-rouge&quot;&gt;Dao&lt;/code&gt;)了.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// com.example.project.entity.User.java&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserCreditRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// com.example.project.dao.UserDao.java&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select * from user where id = #{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当实体跟数据库中字段名字一致的时候没啥问题, 但实体字段跟数据库字段不一致时(比如一个驼峰, 一个用下划线)就比较麻烦了, 这种情况我们可以不使用注解形式, 而使用&lt;code class=&quot;highlighter-rouge&quot;&gt;User.xml&lt;/code&gt;文件, 在文件中可以&lt;code class=&quot;highlighter-rouge&quot;&gt;select user_name as userName&lt;/code&gt;也可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;resultMap&lt;/code&gt;来制定数据库字段名&lt;code class=&quot;highlighter-rouge&quot;&gt;column&lt;/code&gt;与实体属性名&lt;code class=&quot;highlighter-rouge&quot;&gt;property&lt;/code&gt;的映射关系;&lt;/p&gt;

&lt;p&gt;还有一个第三方&lt;code class=&quot;highlighter-rouge&quot;&gt;Mapper&lt;/code&gt;插件, 可以完美解决这个问题, 参考&lt;a href=&quot;https://github.com/abel533/Mapper&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;mybatis-spring-boot-starter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis-spring-boot-starter&lt;/code&gt;方式&lt;/h3&gt;
&lt;p&gt;这种方式就更简单了, 仅仅需要在应用配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;添加一些配置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# mybatis 配置&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;mybatis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;typeAliasesPackage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.example.project.entity&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;typeHandlersPackage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.example.project.handler&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 如果有 typeHandler&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;mapperLocations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;classpath:sqlmaps/*.xml&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# mapper 文件&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;configLocation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;classpath:mybatis-config.xml&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# 可以不设置&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后从 main类 上添加注解:&lt;code class=&quot;highlighter-rouge&quot;&gt;@MapperScan(&quot;com.example.project.dao&quot;)&lt;/code&gt;, 扫描Mapper(&lt;code class=&quot;highlighter-rouge&quot;&gt;Dao&lt;/code&gt;)的位置即可. 其他的&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;都帮我们做了, 接下来就专注于写&lt;code class=&quot;highlighter-rouge&quot;&gt;Dao&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;entity&lt;/code&gt;就可以了.&lt;/p&gt;

&lt;p&gt;注意上面的mybatis的配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:mybatis-config.xml&lt;/code&gt;, 如果没有这个文件就不要配置, 要是配置了就保证存在, 网上找了个例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 这个配置使全局的映射器启用或禁用缓存。系统默认值是true --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cacheEnabled&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 系统默认值是true --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lazyLoadingEnabled&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 允许或不允许多种结果集从一个单独的语句中返回(需要适合的驱动)。 系统默认值是true --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;multipleResultSetsEnabled&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动。 系统默认值是true --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;useColumnLabel&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如Derby）。 系统默认值是false --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;useGeneratedKeys&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用预处理语句。BATCH 执行器重用语句和批量更新 系统默认值是SIMPLE --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;defaultExecutorType&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SIMPLE&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--设置超时时间，它决定驱动等待一个数据库响应的时间。 系统默认值是null --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;defaultStatementTimeout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;25000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 设置插件 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;interceptor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.github.pagehelper.PageHelper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 这是一个第三方的分页插件 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reasonable&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;offsetAsPageNum&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rowBoundsWithCount&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pageSizeZero&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 06 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-06-Spring-Boot%E9%9B%86%E6%88%90MyBatis.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-06-Spring-Boot%E9%9B%86%E6%88%90MyBatis.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring Boot中的日志</title>
        <description>&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;日志的配置&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;日志配置文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;输出到日志文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;日志级别&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;日志格式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;如何写自己的日志配置文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;日志的配置&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;支持各种日志工具, 最常用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Logback&lt;/code&gt;. 我们可以对日志进行配置, 由于日志是在&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;创建之前初始化的, 所以对日志的配置不能通过在&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;配置类上使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySources&lt;/code&gt;注解加载进来. 可以使用系统变量或者外部配置&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;来加载.  配置文件中可以指定这些属性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.config=&lt;/code&gt;: 配置文件的位置, 比如:&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:logback.xml&lt;/code&gt;(logback的配置文件)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file=&lt;/code&gt;: 日志文件名, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.log&lt;/code&gt;, 输出日志到当前目录的&lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.log&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path=&lt;/code&gt;: 日志文件位置, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log&lt;/code&gt;, 输出日志到&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/spring.log&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.level.*=&lt;/code&gt;: 日志等级, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.level.org.springframework=DEBUG&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.console=&lt;/code&gt;: 输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;的日志格式, 只有logback有效&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.file=&lt;/code&gt;: 输出到文件的日志格式, 只有logback有效&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.level=&lt;/code&gt;: 日志级别的格式, 默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;%5p&lt;/code&gt;. 只有logback有效&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.exception-conversion-word=%wEx&lt;/code&gt;: log异常时使用哪个格式转换器(&lt;code class=&quot;highlighter-rouge&quot;&gt;base.xml&lt;/code&gt;中定义了三个&lt;code class=&quot;highlighter-rouge&quot;&gt;conversionRule&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.register-shutdown-hook=false&lt;/code&gt; # Register a shutdown hook for the logging system when it is initialized(没用过)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面这些属性配置, 一般写在&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中, 这样会被加载到&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Environment&lt;/code&gt;中, 为了方便其他地方使用, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Environment&lt;/code&gt;中的一些属性也被转换到了系统属性(&lt;code class=&quot;highlighter-rouge&quot;&gt;System property&lt;/code&gt;)里, 下面是这些属性于系统属性的对应关系:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Spring Environment&lt;/th&gt;
      &lt;th&gt;System Property&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.exception-conversion-word&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_EXCEPTION_CONVERSION_WORD&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_FILE&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_PATH&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.console&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONSOLE_LOG_PATTERN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FILE_LOG_PATTERN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.pattern.level&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_LEVEL_PATTERN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PID&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PID&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-1&quot;&gt;日志配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.config&lt;/code&gt;属性用于指定日志配置文件的位置, 以&lt;code class=&quot;highlighter-rouge&quot;&gt;logback&lt;/code&gt;为例.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果不指定该属性, &lt;code class=&quot;highlighter-rouge&quot;&gt;logback&lt;/code&gt;本身会默认寻找&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下的配置文件, 寻找顺序为:
&lt;code class=&quot;highlighter-rouge&quot;&gt;logback.groovy &amp;gt; logback-test.xml &amp;gt; logback.xml&lt;/code&gt;;  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;又加了俩默认的配置文件:&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-spring.groovy &amp;gt; logback-spring.xml&lt;/code&gt;, 这俩优先级低于上面的那三个. 推荐指定使用&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-spring.xml&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;不指定配置文件时, 寻找上面的配置文件, 制定了则加载指定的配置文件. 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.config=classpath:logback-abc.xml&lt;/code&gt;, 则会加载&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-abc.xml&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy&lt;/code&gt;需要添加&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy&lt;/code&gt;的包依赖:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.groovy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;groovy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4.7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;输出到日志文件&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;这俩属性用于指定日志文件输出的位置. 默认情况下&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;只会把日志输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;, 添加了这两个属性(任意一个即可), 才会把日志输出到文件里.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;两个属性都不指定, 只输出到控制台, 不输出到文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;指定文件, 可以是相对路径, 可以是绝对路径.  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;指定目录, 若制定了目录, 则会输出日志到指定目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.log&lt;/code&gt;文件中&lt;/li&gt;
  &lt;li&gt;两个同时指定, 以&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;为准&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包里关于&lt;code class=&quot;highlighter-rouge&quot;&gt;logback&lt;/code&gt;的配置&lt;code class=&quot;highlighter-rouge&quot;&gt;file-appender.xml&lt;/code&gt;中定义了文件输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;${LOG_FILE}&lt;/code&gt;, 在同一包下的&lt;code class=&quot;highlighter-rouge&quot;&gt;base.xml&lt;/code&gt;文件里有这么一句:&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&amp;gt;&lt;/code&gt;. 稍微分析下就知道为什么以&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;为主, 指定&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;时会输出到该目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.log&lt;/code&gt;文件里了.&lt;br /&gt;
注意上面语句中多次嵌套使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;${key:-defaultVlaue}&lt;/code&gt;形式&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;日志级别&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.level.*&lt;/code&gt;用于指定日志级别, 比如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;logging.level.root&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;WARN
logging.level.org.springframework.web&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DEBUG
logging.level.org.hibernate&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ERROR
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意: 该属性配置的日志级别优先级要高于日志配置文件(如&lt;code class=&quot;highlighter-rouge&quot;&gt;logback.xml&lt;/code&gt;), 即日志配置文件中与该属性定义的日志级别不一致时, 以该属性定义的级别为准.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;日志格式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ogging.pattern.console&lt;/code&gt;指定在控制台输出的日志格式;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ogging.pattern.file&lt;/code&gt;指定在文件输出的日志格式;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ogging.pattern.level&lt;/code&gt;指定日之级别(&lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG, INFO, ERROR&lt;/code&gt;等)的格式, 默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;%5p&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些属性不指定时, 默认的格式在&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包中的&lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultLogbackConfiguration&lt;/code&gt;类里有定义, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults.xml&lt;/code&gt;里也有定义&lt;br /&gt;
格式大致为:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-11-02 21:59:11.366  INFO 11969 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat&lt;/code&gt;&lt;br /&gt;
依次为: &lt;code class=&quot;highlighter-rouge&quot;&gt;时间 日志级别 PID --- [线程名] 日志名 : 日志内容&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;如何写自己的日志配置文件&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包里有四个相关的&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;文件:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console-appender.xml&lt;/code&gt;: 定义了控制台输出的日志格式&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;file-appender.xml&lt;/code&gt;: 定义了一个日志的文件输出格式(指定每个文件&lt;code class=&quot;highlighter-rouge&quot;&gt;10M&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults.xml&lt;/code&gt;: 定义了一些日志级别&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base.xml&lt;/code&gt;: 包含了上面3个文件, 并指定了&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;的输出级别和输出方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们的日志配置线上不需要输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;, 日志文件的大小一般也不会是&lt;code class=&quot;highlighter-rouge&quot;&gt;10M&lt;/code&gt;, 所以上面那几个文件, 我们可以参考.&lt;/p&gt;

&lt;p&gt;比如我们可以这样定义&lt;code class=&quot;highlighter-rouge&quot;&gt;logback.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 这里面定义了 CONSOLE_LOG_PATTERN, FILE_LOG_PATTERN 等日志格式, 还定义了一些日志级别 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;include&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org/springframework/boot/logging/logback/defaults.xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 命令行输出, 一般线上不用 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CONSOLE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;${CONSOLE_LOG_PATTERN}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LOG_FILE_NAME&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myLog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 定义一个属性, 下面用 --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 输出格式 appender --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 可自己定义 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;${FILE_LOG_PATTERN}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 输出格式也可自己定义 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- error 日志 appender --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR_FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}_error.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;level&amp;gt;&lt;/span&gt;ERROR&lt;span class=&quot;nt&quot;&gt;&amp;lt;/level&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;${FILE_LOG_PATTERN}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;${catalina.base}/logs/${LOG_FILE_NAME}_error.%d{yyyy-MM-dd}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 定义日志级别, 也可在应用配置中指定 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.project&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INFO&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.web&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CONSOLE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 线上不需要输出到 CONSOLE --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR_FILE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;上例中, 日志会输出到文件&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX.log&lt;/code&gt;, 错误日志单独输出到一个&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_error.log&lt;/code&gt;文件, 日志文件并每天打包一次.  &lt;/li&gt;
  &lt;li&gt;上例中, 应用配置(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;)里用于指定日志文件名文件位置的属性(&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.file&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.path&lt;/code&gt;)将不起作用, 因为例子里没有用到这些属性, 其他配置(比如日志级别)仍有作用.&lt;/li&gt;
  &lt;li&gt;上例中的哪个&lt;code class=&quot;highlighter-rouge&quot;&gt;${catalina.base}&lt;/code&gt;算是一个系统变量, 表示应用所在目录, 文件名(位置)完全可以自己指定, 也可参考&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot&lt;/code&gt;包里的使用方式.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 03 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-03-Spring-Boot%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-03-Spring-Boot%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Spring Boot中的配置</title>
        <description>&lt;p&gt;这里所说的配置是指&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件这样的配置&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;配置的方式及优先级&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;优先级举例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;命令行参数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#springapplicationjson&quot;&gt;SPRING_APPLICATION_JSON&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#applicationproperties&quot;&gt;配置文件:&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;随机变量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;变量引用&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;多环境配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;自定义配置&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot;&gt;传统的配置加载方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot;&gt;类型安全的配置加载方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#configurationproperties&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;的优缺点&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#yaml&quot;&gt;使用YAML配置&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#applicationyml&quot;&gt;加载&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#yaml-1&quot;&gt;加载自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;配置的方式及优先级&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;允许通过&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件, &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;文件, &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;变量, 命令行参数等进行配置. 属性值可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;注入到bean中并通过Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;访问, 或通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;直接绑定到对象上.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;所提供的配置优先级从高到低如下所示:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;devtools&lt;/code&gt;的全局配置(&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.spring-boot-devtools.properties&lt;/code&gt;文件)(当使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;devtools&lt;/code&gt;时)&lt;/li&gt;
  &lt;li&gt;Test类上通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@TestPropertySource&lt;/code&gt;声明的属性文件&lt;/li&gt;
  &lt;li&gt;Test类上通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest#properties&lt;/code&gt;声明的属性&lt;/li&gt;
  &lt;li&gt;命令行参数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SPRING_APPLICATION_JSON&lt;/code&gt;属性, 环境变量或系统属性中的JSON&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletConfig&lt;/code&gt;初始化参数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContext&lt;/code&gt;初始化参数&lt;/li&gt;
  &lt;li&gt;来自于&lt;code class=&quot;highlighter-rouge&quot;&gt;java:comp/env&lt;/code&gt;的JNDI属性&lt;/li&gt;
  &lt;li&gt;Java系统属性(&lt;code class=&quot;highlighter-rouge&quot;&gt;System.getProperties()&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;操作系统环境变量&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;RandomValuePropertySource&lt;/code&gt;生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;random.*&lt;/code&gt;属性&lt;/li&gt;
  &lt;li&gt;jar包外的&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application-{profile}.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;jar包内的&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application-{profile}.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;jar包外的应用程序配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;jar包内的应用程序配置文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置)&lt;/li&gt;
  &lt;li&gt;配置类(&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;类)上的通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource&lt;/code&gt;注解声明的属性文件&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication.setDefaultProperties&lt;/code&gt;声明的默认属性&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;优先级举例&lt;/h3&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:application.properties&lt;/code&gt;文件里有个&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;变量(假设将它打成了jar包), 当在一个新的环境中运行时,
可以通过在jar包外(即新环境的的&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath&lt;/code&gt;下)提供一个&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;文件, 重新设置&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;变量的值.
甚至在测试的时候,可以通过优先级更高的命令行参数指定&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;的值(&lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar app.jar --name=&quot;Spring&quot;&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;命令行参数&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;会把所有的命令行参数(以&lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt;开头, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;--server.port=9000&lt;/code&gt;)转化为属性加载到Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 命令行参数的优先级高于配置文件&lt;/p&gt;

&lt;p&gt;如果不想让命令行参数添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication.setAddCommandLineProperties(false)&lt;/code&gt;设置&lt;/p&gt;

&lt;h3 id=&quot;springapplicationjson&quot;&gt;SPRING_APPLICATION_JSON&lt;/h3&gt;
&lt;p&gt;上面第5条中说的&lt;code class=&quot;highlighter-rouge&quot;&gt;SPRING_APPLICATION_JSON&lt;/code&gt;属性, 可以在命令行中指定&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ SPRING_APPLICATION_JSON=&#39;{&quot;foo&quot;:{&quot;bar&quot;:&quot;spam&quot;}}&#39; java -jar myapp.jar  // 环境变量形式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这样就相当于在Spring的&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中添加了&lt;code class=&quot;highlighter-rouge&quot;&gt;foo.bar=spam&lt;/code&gt;.&lt;br /&gt;
也可以像下面这些方式提供:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -Dspring.application.json=&#39;{&quot;foo&quot;:&quot;bar&quot;}&#39; -jar myapp.jar   // 系统变量
$ java -jar myapp.jar --spring.application.json=&#39;{&quot;foo&quot;:&quot;bar&quot;}&#39;   // 命令行参数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或以JNDI变量&lt;code class=&quot;highlighter-rouge&quot;&gt;java:comp/env/spring.application.json&lt;/code&gt;提供&lt;/p&gt;

&lt;p&gt;其实上面介绍的这几条优先级比较高的配置, 实际并不太常用. 命令行在测试的时候用的还算比较多&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;applicationproperties&quot;&gt;配置文件:&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;默认会加载配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中的配置并加到Spring &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 该文件的加载有个优先级: &lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:/config/application.properties&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:/application.properties&lt;/code&gt;即在&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:/config/&lt;/code&gt;下的配置文件优先级比较高. 也可以使用YAML文件(&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;)来替代properties文件.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;被称为&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;的外露配置, 文件中有很多属性可用来配置整个应用, 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;server.port=8080&lt;/code&gt;等; 你可以通过指定这些属性值来配置应用.&lt;/p&gt;

&lt;p&gt;配置文件的名字和位置, 也可自定义, 可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.name&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.location&lt;/code&gt;环境属性来指定, 这两个属性使用的时期非常早, 所以一般会在命令行或者系统属性或环境变量中来指定, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar myproject.jar --spring.config.name=myproject
$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;若&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.location&lt;/code&gt;指定的是一个目录, 则应该以&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;结尾, 并且使用该目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.name&lt;/code&gt;指定的配置文件&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;随机变量&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RandomValuePropertySource&lt;/code&gt;可以注入一些随机变量, 可产生&lt;code class=&quot;highlighter-rouge&quot;&gt;integer, long, string, uuid&lt;/code&gt;等类型的随机值, 例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my.secret&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
my.number&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.int&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
my.bignumber&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.long&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
my.uuid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.uuid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
my.number.less.than.ten&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.int(10)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
my.number.in.range&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.int[1024,65536]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;random.int*&lt;/code&gt;的语法为&lt;code class=&quot;highlighter-rouge&quot;&gt;OPEN value (,max) CLOSE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPEN,CLOSE&lt;/code&gt;是字符, &lt;code class=&quot;highlighter-rouge&quot;&gt;value,max&lt;/code&gt;是整数. 如果有&lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;则最小值是&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;最大值是&lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;(不包括max).&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;变量引用&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中定义的变量已经被&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;过滤, 所以可以引用前面定义过的变量, 比如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MyApp
app.description&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; is a Spring Boot application
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;多环境配置&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;从配置的优先级的第12~15条可以看出, &lt;code class=&quot;highlighter-rouge&quot;&gt;application-{profile}.properties&lt;/code&gt;的优先级要高于&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;这个&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;就用于区分是&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;环境还是&lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;环境还是&lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt;环境. 如果没有被指定, 默认会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;application-default.properties&lt;/code&gt;配置.&lt;/li&gt;
  &lt;li&gt;至于到底启用哪个&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;, 可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中通过属性&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.profiles.active=profile&lt;/code&gt;来指定, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;配置文件中指定该属性不起作用.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子, &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中有个默认属性&lt;code class=&quot;highlighter-rouge&quot;&gt;server.port=8080&lt;/code&gt;用于指定服务的端口. 假设有下面的文件, 文件内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// application.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;profiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// application-default.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8081&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// application-dev.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8082&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// application-prod.properties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8083&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;假设&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中不指定&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.profiles.active&lt;/code&gt;属性, 则&lt;code class=&quot;highlighter-rouge&quot;&gt;application-default.properties&lt;/code&gt;中的8081端口生效, 若指定&lt;code class=&quot;highlighter-rouge&quot;&gt;spring.profiles.active=prod&lt;/code&gt;, 则8083端口生效. 访问8080端口都会找不到服务&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-6&quot;&gt;自定义配置&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;默认加载&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中的配置, 这个文件中的默认属性相当多…&lt;br /&gt;
如果我们要加载自己的配置, 比如下面的数据库配置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MySQL
db.username&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;username
db.password&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;123456
db.tables[0]&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;table1
db.tables[1]&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;table2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以把这些属性直接放到&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;中, 但极力不推荐这样.&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;传统的配置加载方式&lt;/h3&gt;
&lt;p&gt;我们一般都是定义自己的配置文件, 比如把这些属性放到&lt;code class=&quot;highlighter-rouge&quot;&gt;db.properties&lt;/code&gt;文件. 然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource&lt;/code&gt;加载配置文件, 然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@Value(&quot;${key:defaultVlaue}&quot;)&lt;/code&gt;的形式进行配置, 如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PropertySource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DBConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.driver}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.username}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.password}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.tables[0]}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${db.tables[1]}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注: &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件默认是按照unicode加载, 若有中文, 一定要指定编码&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource(value = &quot;db.properties&quot;, encoding = &quot;UTF-8&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;类型安全的配置加载方式&lt;/h3&gt;
&lt;p&gt;上面这种方式在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Framework&lt;/code&gt;普遍使用, 但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;提供了更高级的使用配置的方式,类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;DataBinder&lt;/code&gt;工具. 还是&lt;code class=&quot;highlighter-rouge&quot;&gt;db.properties&lt;/code&gt;文件, 我们可以这样进行数据绑定:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:db.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DBConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;最上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;@Data&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Lombok&lt;/code&gt;包中用于生成&lt;code class=&quot;highlighter-rouge&quot;&gt;getter, setter&lt;/code&gt;等的注解, pom依赖为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.16.10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不用这个包也可以, 那就需要自己写 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt;方法了&lt;/p&gt;

&lt;p&gt;另外注意此时该类上是加了&lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt;注解的, 这样才会被当作Spring的Bean.&lt;/p&gt;

&lt;p&gt;其实不在&lt;code class=&quot;highlighter-rouge&quot;&gt;DBConfig&lt;/code&gt;上加&lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt;注解也有办法, 通常&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;是和&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableConfigurationProperties&lt;/code&gt;一起使用的, &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableConfigurationProperties&lt;/code&gt;注解需要加到配置类上.
像下面这样使用:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 配置类&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 代码&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 加载属性的类(主意这个类没有加 @Component 注解)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:db.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DBConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 代码&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种形式, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;bean将会以名字&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;prefix&amp;gt;-&amp;lt;fqn&amp;gt;&lt;/code&gt;注册, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt;就是注解中指定的前缀, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fqn&amp;gt;&lt;/code&gt;是该类的全类名. 上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;DBConfig&lt;/code&gt;将会被注册成名字为&lt;code class=&quot;highlighter-rouge&quot;&gt;db-com.example.myproject.config.DBConfig&lt;/code&gt;的bean&lt;/p&gt;

&lt;h3 id=&quot;configurationproperties&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;的优缺点&lt;/h3&gt;
&lt;p&gt;优点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;结构化, 对于结构化的配置, 优势明显&lt;/li&gt;
  &lt;li&gt;松散绑定, &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;属性名和&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties Beans&lt;/code&gt;属性名不需要精确匹配, 比如驼峰&lt;code class=&quot;highlighter-rouge&quot;&gt;person.firstName&lt;/code&gt;, 虚线&lt;code class=&quot;highlighter-rouge&quot;&gt;pserson.first-name&lt;/code&gt;, 下划线&lt;code class=&quot;highlighter-rouge&quot;&gt;person.first_name&lt;/code&gt;, 大写&lt;code class=&quot;highlighter-rouge&quot;&gt;PERSON_FIRST_NAME&lt;/code&gt;都能正确区分绑定&lt;/li&gt;
  &lt;li&gt;可校验, 可以在属性上添加&lt;code class=&quot;highlighter-rouge&quot;&gt;@NotNull&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@NotEmpty&lt;/code&gt;等(JSR-303)注解进行校验&lt;/li&gt;
  &lt;li&gt;可生成&lt;code class=&quot;highlighter-rouge&quot;&gt;meta-data&lt;/code&gt;文件(可被IDE使用)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不支持&lt;code class=&quot;highlighter-rouge&quot;&gt;SpEL&lt;/code&gt;表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;yaml&quot;&gt;使用YAML配置&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;的超集, 有一定的结构, &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;提供了对&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;的支持.
使用&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置文件需要确保在classpath中引入了&lt;code class=&quot;highlighter-rouge&quot;&gt;SnakeYAML&lt;/code&gt;包, &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter&lt;/code&gt;中已经包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;SnakeYAML&lt;/code&gt;包, 也可以主动显式地添加pom依赖:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.yaml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;snakeyaml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.17&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;applicationyml&quot;&gt;加载&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;会自动加载这个配置, 因此效果跟&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;一样。&lt;br /&gt;
Spring 提供了两个方便的类加载&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;YamlPropertiesFactoryBean&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;Properties&lt;/code&gt;加载, &lt;code class=&quot;highlighter-rouge&quot;&gt;YamlMapFactoryBean&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt;加载;&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;YamlPropertySourceLoader&lt;/code&gt;可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;PropertySource&lt;/code&gt;加到Spring &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt;中, 这样就可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;的方式进行注入了.&lt;/p&gt;

&lt;p&gt;比如下面的写法是一样的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// yml文件
environments:
    dev:
        url: http://dev.bar.com
        name: Developer Setup
    prod:
        url: http://foo.bar.com
        name: My Cool App
my:
    servers:
        - dev.bar.com
        - foo.bar.com
// properties文件
environments.dev.url=http://dev.bar.com
environments.dev.name=Developer Setup
environments.prod.url=http://foo.bar.com
environments.prod.name=My Cool App
my.servers[0]=dev.bar.com
my.servers[1]=foo.bar.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;yaml-1&quot;&gt;加载自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;配置&lt;/h3&gt;
&lt;p&gt;遗憾的是, &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;不能像&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;文件一样使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@PropertySource&lt;/code&gt;注解的方式加载.&lt;br /&gt;
加载自定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt;文件可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;注解来加载, 如:&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties(prefix=&quot;db&quot;, locations = &quot;classpath:db.yml&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-02-Spring-Boot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE.html</link>
        <guid isPermaLink="true">http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-02-Spring-Boot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE.html</guid>
        
        <category>Spring</category>
        
        
        <category>编程技术</category>
        
      </item>
    
  </channel>
</rss>
